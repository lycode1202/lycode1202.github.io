{"meta":{"title":"寜笙的博客","subtitle":"Coding","description":"代码尽头谁为峰，一见秃头道成空。","author":"寜笙","url":"https://lycode1202.github.io"},"pages":[{"title":"404","date":"2020-10-03T10:19:22.000Z","updated":"2022-03-06T03:41:24.190Z","comments":true,"path":"404.html","permalink":"https://lycode1202.github.io/404.html","excerpt":"","text":"","raw":null,"content":null},{"title":"about","date":"2022-03-05T03:52:03.000Z","updated":"2022-03-07T10:11:57.115Z","comments":true,"path":"about/index.html","permalink":"https://lycode1202.github.io/about/index.html","excerpt":"","text":"个人简介（以后再写）我是一个帅哥，哈哈哈，过于自恋了！！","raw":null,"content":null},{"title":"","date":"2022-03-09T14:33:22.784Z","updated":"2022-03-09T14:33:22.784Z","comments":true,"path":"api/index.html","permalink":"https://lycode1202.github.io/api/index.html","excerpt":"","text":"API接口合集影视音频接口 网易云音乐 知乎专栏 豆瓣一刻 考拉FM 蜻蜓FM Musixmatch 猫眼电影 平台接口 阿里云市场 API-免费API数据接口平台-京东万象 小白开放平台 进制数据 iDataAPI apishop 注册可以免费使用（不是永久免费，赠送次数超过需要缴费） 聚合数据 注册部分可以免费使用，有的需要收费 百度AI开放平台 涵盖图像处理、自然语言、语音技术、知识图谱、数据智能、AR、视频技术和深度学习八大方面 人脸识别Face++ 注：申请试用的API Key可以免费试用他上面的接口 淘宝开放平台 微博开放平台 马化腾的微信开放平台（对应的还有腾讯开放平台） 融云IM 地图接口 高德地图 百度地图 腾讯地图 搜狗地图 天气接口 丫丫天气 心知天气 和风天气 快递接口 快递100 快递网 AI接口 百度AI市场 智能机器人 笔记接口 OneNote 有道云笔记 印象笔记","raw":null,"content":null},{"title":"categories","date":"2022-03-05T03:39:25.000Z","updated":"2022-03-05T03:50:49.945Z","comments":true,"path":"categories/index.html","permalink":"https://lycode1202.github.io/categories/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"download","date":"2022-03-07T09:32:47.000Z","updated":"2022-03-07T09:32:47.356Z","comments":true,"path":"download/index.html","permalink":"https://lycode1202.github.io/download/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"friends","date":"2022-03-05T07:17:29.000Z","updated":"2022-03-05T07:17:49.786Z","comments":true,"path":"friends/index.html","permalink":"https://lycode1202.github.io/friends/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"tags","date":"2022-03-05T03:51:07.000Z","updated":"2022-03-05T03:51:27.158Z","comments":true,"path":"tags/index.html","permalink":"https://lycode1202.github.io/tags/index.html","excerpt":"","text":"","raw":null,"content":null}],"posts":[{"title":"","slug":"小程序项目开发","date":"2022-03-10T04:56:02.400Z","updated":"2022-03-10T04:56:02.401Z","comments":true,"path":"2022/03/10/xiao-cheng-xu-xiang-mu-kai-fa/","link":"","permalink":"https://lycode1202.github.io/2022/03/10/xiao-cheng-xu-xiang-mu-kai-fa/","excerpt":"","text":"小程序项目开发FinCilp 小程序开发框架","raw":null,"content":null,"categories":[],"tags":[]},{"title":"SpringBoot2整合Mybatis-plus","slug":"SpringBoot2整合Mybatis-plus","date":"2022-03-05T16:00:00.000Z","updated":"2022-03-06T03:48:51.411Z","comments":true,"path":"2022/03/06/springboot2-zheng-he-mybatis-plus/","link":"","permalink":"https://lycode1202.github.io/2022/03/06/springboot2-zheng-he-mybatis-plus/","excerpt":"","text":"","raw":null,"content":null,"categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://lycode1202.github.io/tags/SpringBoot/"}]},{"title":"Git分布式版本控制工具","slug":"Git分布式版本控制工具","date":"2022-03-05T16:00:00.000Z","updated":"2022-03-10T03:48:49.967Z","comments":true,"path":"2022/03/06/git-fen-bu-shi-ban-ben-kong-zhi-gong-ju/","link":"","permalink":"https://lycode1202.github.io/2022/03/06/git-fen-bu-shi-ban-ben-kong-zhi-gong-ju/","excerpt":"","text":"Git分布式版本控制工具1 、目标 了解Git基本概念 能够概述git工作流程 能够使用Git常用命令 熟悉Git代码托管服务 能够使用idea操作git 2 、概述2.1、开发中的实际场景场景一：备份 小明负责的模块就要完成了，就在即将Release之前的一瞬间，电脑突然蓝屏，硬盘光荣牺牲！几个月来的努力付之东流 场景二：代码还原 这个项目中需要一个很复杂的功能，老王摸索了一个星期终于有眉目了，可是这被改得面目全非的代码已经回不到从前了。什么地方能买到哆啦A梦的时光机啊？ 场景三：协同开发 小刚和小强先后从文件服务器上下载了同一个文件：Analysis.java。小刚在Analysis.java文件中的第 30 行声明了一个方法，叫count()，先保存到了文件服务器上；小强在Analysis.java文件中的第 50 行声明了一个方法，叫sum()，也随后保存到了文件服务器上，于是，count()方法就只存在于小刚的记忆中了 场景四：追溯问题代码的编写人和编写时间！ 老王是另一位项目经理，每次因为项目进度挨骂之后，他都不知道该扣哪个程序员的工资！就拿这次来说吧，有个Bug调试了 30 多个小时才知道是因为相关属性没有在应用初始化时赋值！可是二胖、王东、刘流和正经牛都不承认是自己干的！ 2.2、版本控制器的方式a、集中式版本控制工具 集中式版本控制工具，版本库是集中存放在中央服务器的，team里每个人work时从中央服务器下载代码，是必须联网才能工作，局域网或互联网。个人修改后然后提交到中央版本库。 举例：SVN和CVS b、分布式版本控制工具 分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样工作的时候，无需要联网了，因为版本库就在你自己的电脑上。多人协作只需要各自的修改推送给对方，就能互相看到对方的修改了。 举例：Git 2.3、SVN 2.4、Git Git是分布式的,Git不需要有中心服务器，我们每台电脑拥有的东西都是一样的。我们使用Git并且有个中心服务器，仅仅是为了方便交换大家的修改，但是这个服务器的地位和我们每个人的PC是一样的。我们可以把它当做一个开发者的pc就可以就是为了大家代码容易交流不关机用的。没有它大家一样可以工作，只不过“交换”修改不方便而已。 git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git是Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（ 1991 － 2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标： 速度 简单的设计 对非线性开发模式的强力支持（允许成千上万个并行开发的分支） 完全分布式 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量） 2.5、Git工作流程图 命令如下： 1. clone（克隆）: 从远程仓库中克隆代码到本地仓库 2. checkout（检出）:从本地仓库中检出一个仓库分支然后进行修订 3. add（添加）: 在提交前先将代码提交到暂存区 4. commit（提交）: 提交到本地仓库。本地仓库中保存修改的各个历史版本 5. fetch (抓取) ： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。 6. pull (拉取) ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于fetch+merge 7. push（推送） : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库 3 、Git安装与常用命令本教程里的git命令例子都是在Git Bash中演示的，会用到一些基本的linux命令，在此为大家提前列举： ls/ll 查看当前目录 cat 查看文件内容 touch 创建文件 vi/vi编辑器 （使用vi编辑器是为了方便展示效果，学员可以记事本、editPlus、notPad++等其它编辑器） 3.1、 Git环境配置3.1.1 下载与安装 下载地址： https://git-scm.com/download 双击下载的安装文件来安装Git。安装完成后在电脑桌面（也可以是其他目录）点击右键，如果能够看到如下两个菜单则说明Git安装成功。 备注： Git GUI：Git提供的图形界面工具 Git Bash：Git提供的命令行工具 当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息 3.1.2基本配置 打开Git Bash 设置用户信息 查看配置信息 git config --global user.name “itcast” git config --global user.email “hello@itcast.cn” git config --list 3.1.3 为常用指令配置别名（可选） 有些常用的指令参数非常多，每次都要输入好多参数，我们可以使用别名。 打开用户目录，创建.bashrc文件 部分windows系统不允许用户创建点号开头的文件，可以打开gitBash,执行 touch ~/.bashrc 在.bashrc文件中输入如下内容： #用于输出git提交日志 alias git-log='git log --pretty=oneline --all --graph --abbrev-commit' #用于输出当前目录所有文件及基本信息 alias ll='ls -al' 打开gitBash，执行source ~/.bashrc 3.1.4 解决GitBash乱码问题 打开GitBash执行下面命令 git config --global core.quotepath false ${git_home}/etc/bash.bashrc 文件最后加入下面两行 export LANG=\"zh_CN.UTF-8\" export LC_ALL=\"zh_CN.UTF-8\" 3.2、获取本地仓库要使用Git对我们的代码进行版本控制，首先需要获得本地仓库 1 ）在电脑的任意位置创建一个空目录（例如test）作为我们的本地Git仓库 2 ）进入这个目录中，点击右键打开Git bash窗口 3 ）执行命令git init 4 ）如果创建成功后可在文件夹下看到隐藏的.git目录。 3.3、基础操作指令Git工作目录下对于文件的 修改 (增加、删除、更新)会存在几个状态，这些 修改 的状态会随着我们执行Git的命令而发生变化。 本章节主要讲解如何使用命令来控制这些状态之间的转换： git add (工作区 –&gt; 暂存区) git commit (暂存区 –&gt; 本地仓库) 3.3.1、*查看修改的状态（status） 作用：查看的修改的状态（暂存区、工作区） 命令形式：git status 3.3.2、*添加工作区到暂存区(add) 作用：添加工作区一个或多个文件的修改到暂存区 命令形式：git add 单个文件名|通配符 将所有修改加入暂存区： git add . 3.3.3、*提交暂存区到本地仓库(commit) 作用：提交暂存区内容到本地仓库的当前分支 命令形式：git commit -m ‘注释内容’ 3.3.4、*查看提交日志(log) git-log 在3.1.3中配置的别名 git - log 就包含了这些参数，所以后续可以直接使用指令 git-log 作用:查看提交记录 命令形式：git log [option] options –all 显示所有分支 –pretty=oneline 将提交信息显示为一行 –abbrev-commit 使得输出的commitId更简短 –graph 以图的形式显示 3.3.5、版本回退 作用：版本切换 命令形式：git reset –hard commitID commitID 可以使用git-log或git log指令查看 如何查看已经删除的记录？ git reflog 这个指令可以看到已经删除的提交记录 3.3.6、添加文件至忽略列表 一般我们总会有些文件无需纳入Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以在工作目录中创建一个名为 .gitignore 的文件（文件名称固定），列出要忽略的文件模式。下面是一个示例： 练习:基础操作 # no .a files *.a # but do track lib.a, even though you're ignoring .a files above !lib.a # only ignore the TODO file in the current directory, not subdir/TODO /TODO # ignore all files in the build/ directory build/ # ignore doc/notes.txt, but not doc/server/arch.txt doc/*.txt # ignore all .pdf files in the doc/ directory doc/**/*.pdf #####################仓库初始化###################### # 创建目录（git_test01）并在目录下打开gitbash 略 # 初始化git仓库 git init #####################创建文件并提交##################### # 目录下创建文件 file01.txt 略 # 将修改加入暂存区 git add . # 将修改提交到本地仓库，提交记录内容为：commit 001 git commit -m 'commit 001' # 查看日志 git log ####################修改文件并提交###################### # 修改file01的内容为：count= 略 # 将修改加入暂存区 git add. # # 将修改提交到本地仓库，提交记录内容为：update file git commit --m 'update file01' # 查看日志 git log # 以精简的方式显示提交记录 git-log ####################将最后一次修改还原################## # 查看提交记录 git-log # 找到倒数第 2 次提交的commitID 略 # 版本回退,想要回退哪一步，就找到该步的commitID git reset commitID --hard 3.4、分支几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。 3.4.1、查看本地分支 命令：git branch 3.4.2、创建本地分支 命令：git branch 分支名 3.4.4、*切换分支(checkout) 命令：git checkout 分支名 我们还可以直接切换到一个不存在的分支（创建并切换） 命令：git checkout -b 分支名 3.4.6、*合并分支(merge) 一个分支上的提交可以合并到另一个分支，首先切换到想要合并的分支上，然后选中被合并的分支 命令：git merge 分支名称 3.4.7、删除分支 不能删除当前分支，只能删除其他分支 git branch -d b1 删除分支时，需要做各种检查 git branch -D b1 不做任何检查，强制删除 3.4.8、解决冲突 当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解决冲突，解决冲突步骤如下： 1. 处理文件中冲突的地方 2. 将解决完冲突的文件加入暂存区(add) 3. 提交到仓库(commit) 冲突部分的内容处理如下所示： 1、准备新的feature1分支，继续我们的新分支开发： $ git switch -c feature1 Switched to a new branch 'feature1' 2、修改readme.txt最后一行，改为： Creating a new branch is quick AND simple. 3、在feature1分支上提交： $ git add readme.txt $ git commit -m \"AND simple\" [feature1 14096d0] AND simple 1 file changed, 1 insertion(+), 1 deletion(-) 4、切换到master分支： $ git switch master Switched to branch 'master' Your branch is ahead of 'origin/master' by 1 commit. (use \"git push\" to publish your local commits) Git还会自动提示我们当前master分支比远程的master分支要超前1个提交。 5、在master分支上把readme.txt文件的最后一行改为： Creating a new branch is quick &amp; simple. 提交： $ git add readme.txt $ git commit -m \"&amp; simple\" [master 5dc6824] &amp; simple 1 file changed, 1 insertion(+), 1 deletion(-) 现在，master分支和feature1分支各自都分别有新的提交，变成了这样： 6、这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看： $ git merge feature1 Auto-merging readme.txt CONFLICT (content): Merge conflict in readme.txt Automatic merge failed; fix conflicts and then commit the result. 7、果然冲突了！Git告诉我们，readme.txt文件存在冲突，必须手动解决冲突后再提交。git status也可以告诉我们冲突的文件： $ git status On branch master Your branch is ahead of 'origin/master' by 2 commits. (use \"git push\" to publish your local commits) You have unmerged paths. (fix conflicts and run \"git commit\") (use \"git merge --abort\" to abort the merge) Unmerged paths: (use \"git add &lt;file>...\" to mark resolution) both modified: readme.txt no changes added to commit (use \"git add\" and/or \"git commit -a\") 8、我们可以直接查看readme.txt的内容： Git is a distributed version control system. Git is free software distributed under the GPL. Git has a mutable index called stage. Git tracks changes of files. &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD Creating a new branch is quick &amp; simple. ======= Creating a new branch is quick AND simple. >>>>>>> feature1 9、Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改如下后保存： Creating a new branch is quick and simple. 10、再提交： $ git add readme.txt $ git commit -m \"conflict fixed\" [master cf810e4] conflict fixed 现在，master分支和feature1分支变成了下图所示： 11、用带参数的git log也可以看到分支的合并情况： $ git log --graph --pretty=oneline --abbrev-commit * cf810e4 (HEAD -> master) conflict fixed |\\ | * 14096d0 (feature1) AND simple * | 5dc6824 &amp; simple |/ * b17d20e branch test * d46f35e (origin/master) remove test.txt * b84166e add test.txt * 519219b git tracks changes * e43a48b understand how stage works * 1094adb append GPL * e475afc add distributed * eaadf4e wrote a readme file 12、最后，删除feature1分支： $ git branch -d feature1 Deleted branch feature1 (was 14096d0). 3.4.9、开发中分支使用原则与流程 几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。 在开发中，一般有如下分支使用原则与流程： master （生产） 分支 线上分支，主分支，中小规模项目作为线上运行的应用对应的分支； develop（开发）分支 是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线 要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支,准备上线。 feature/xxxx分支 从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完 成后合并到develop分支。 hotfix/xxxx分支， 从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、test、 develop分支。 还有一些其他分支，在此不再详述，例如test分支（用于代码测试）、pre分支（预上线分支）等 等。 练习:分支操作 4 、Git远程仓库4.1、 常用的托管服务[远程仓库]###########################创建并切换到dev01分支，在dev01分支提交 # [master]创建分支dev git branch dev # [master]切换到dev git checkout dev # [dev01]创建文件file02.txt 略 # [dev01]将修改加入暂存区并提交到仓库,提交记录内容为：add file02 on dev git add. git commit -m 'add file02 on dev' # [dev01]以精简的方式显示提交记录 git-log ###########################切换到master分支，将dev01合并到master分支 # [dev01]切换到master分支 git checkout master # [master]合并dev01到master分支 git merge dev # [master]以精简的方式显示提交记录 git-log # [master]查看文件变化(目录下也出现了file02.txt) 略 ##########################删除dev01分支 # [master]删除dev01分支 git branch -d dev # [master]以精简的方式显示提交记录 git-log 4.2、 注册码云要想使用码云的相关服务，需要注册账号（地址： https://gitee.com/signup ） 4.3、 创建远程仓库前面我们已经知道了Git中存在两种类型的仓库，即本地仓库和远程仓库。那么我们如何搭建Git远程仓库 呢？我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub、码云、GitLab等。 gitHub（ 地址：https://github.com/ ）是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名gitHub 码云（地址： https://gitee.com/ ）是国内的一个代码托管平台，由于服务器在国内，所以相比于 GitHub，码云速度会更快 GitLab （地址： https://about.gitlab.com/ ）是一个用于仓库管理系统的开源项目，使用Git作 为代码管理工具，并在此基础上搭建起来的web服务,一般用于在企业、学校等内部网络搭建git私服。 仓库创建完成后可以看到仓库地址，如下图所示: 4.4、配置SSH公钥生成SSH公钥 ssh-keygen -t rsa 不断回车 如果公钥已经存在，则自动覆盖 Gitee设置账户共公钥 获取公钥 cat ~/.ssh/id_rsa.pub 验证是否配置成功 ssh -T git@gitee.com 4.5、操作远程仓库4.5.1、添加远程仓库 此操作是先初始化本地库，然后与已创建的远程库进行对接 。 命令： git remote add &lt;远端名称> &lt;仓库路径> 远端名称，默认是origin，取决于远端服务器设置 仓库路径，从远端服务器获取此URL 例如: git remote add origin git@gitee.com:czbk_zhang_meng/git_test.git 4.5.2、查看远程仓库 命令：git remote 4.5.3、推送到远程仓库 命令：git push [-f] [--set-upstream] [远端名称 [本地分支名][:远端分支名] ] 如果远程分支名和本地分支名称相同，则可以只写本地分支 git push origin master -f 表示强制覆盖 --set-upstream 推送到远端的同时并且建立起和远端分支的关联关系。 git push --set-upstream origin master 如果 当前分支已经和远端分支关联 ，则可以省略分支名和远端名。 git push 将master分支推送到已关联的远端分支。 查询远程仓库 4.5.4、 本地分支与远程分支的关联关系 查看关联关系我们可以使用 git branch -vv命令 4.5.5、从远程仓库克隆 如果已经有一个远端仓库，我们可以直接clone到本地。 命令: git clone &lt;仓库路径> [本地目录] 本地目录可以省略，会自动生成一个目录 4.5.6、从远程仓库中抓取和拉取 远程分支和本地的分支一样，我们可以进行merge操作，只是需要先把远端仓库里的更新都下载到本地，再进行操作。 抓取 命令：git fetch [remote name] [branch name] 抓取指令就是将仓库里的更新都抓取到本地，不会进行合并 如果不指定远端名称和分支名，则抓取所有分支。 拉取 命令：git pull [remote name] [branch name] 拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge 如果不指定远端名称和分支名，则抓取所有并更新当前分支。 1. 在test01这个本地仓库进行一次提交并推送到远程仓库 在另一个仓库将远程提交的代码拉取到本地仓库 4.5.7、解决合并冲突 在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。 A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要推送到远程仓库，此时B用户晚于A用户， 故需要先拉取远程仓库的提交，经过合并后才能推送到远端分支 ,如下图所示。 在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲突。 远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同 ，在此不再赘述，需要学员自己练习。 练习:远程仓库操作 5 、在Idea中使用Git5.1、在Idea中配置Git##########################1-将本地仓库推送到远程仓库 # 完成4.1、4.2、4.3、4.4的操作 略 # [git_test01]添加远程仓库 git remote add origin git@gitee.com/**/**.git # [git_test01]将master分支推送到远程仓库,并与远程仓库的master分支绑定关联关系 git push --set-upstream origin master ###########################2-将远程仓库克隆到本地 # 将远程仓库克隆到本地git_test02目录下 git clone git@gitee.com/**/**.git git_test # [git_test02]以精简的方式显示提交记录 git-log ###########################3-将本地修改推送到远程仓库 # [git_test01]创建文件file03.txt 略 # [git_test01]将修改加入暂存区并提交到仓库,提交记录内容为：add file git add. git commit -m 'add file03' # [git_test01]将master分支的修改推送到远程仓库 git push origin master ###########################4-将远程仓库的修改更新到本地 # [git_test02]将远程仓库修改再拉取到本地 git pull # 以精简的方式显示提交记录 git-log # 查看文件变化(目录下也出现了file03.txt) 略 安装好IntelliJ IDEA后，如果Git安装在默认路径下，那么idea会自动找到git的位置，如果更改了Git的安装位置则需要手动配置下Git的路径。选择File→Settings打开设置窗口，找到Version Control下的git选项： 点击Test按钮,现在执行成功，配置完成 5.2、在Idea中操作Git场景：本地已经有一个项目，但是并不是git项目，我们需要将这个放到码云的仓库里，和其他开发人员继续一起协作开发。 5.2.1、创建项目远程仓库（参照4.3） 5.2.2、初始化本地仓库 5.2.3、设置远程仓库 5.2.4、提交到本地仓库 5.2.6、推送到远程仓库 5.2.7、克隆远程仓库到本地 5.2.8、创建分支 最常规的方式 最强大的的方式 5.2.9、切换分支及其他分支相关操作 5.2.11、解决冲突 执行merge或pull操作时，可能发生冲突 冲突解决后加入暂存区 提交到本地仓库 推送到远程仓库 5.3、IDEA常用GIT操作入口 第一张图上的快捷入口可以基本满足开发的需求。 第二张图是更多在IDEA操作git的入口。 5.4、场景分析基于我们后面的实战模式，我们做一个综合练习 当前的开发环境如下，我们每个人都对这个项目已经开发一段时间，接下来我们要切换成团队开发模式。也就是我们由一个团队来完成这个项目实战的内容。团队有组长和若干组员组成（组长就是开发中的项目经理）。 所有操作都在idea中完成。 练习场景如下： 1 、由组长，基于本项目创建本地仓库；创建远程仓库，推送项目到远程仓库。 2 、每一位组员从远程仓库克隆项目到idea中,这样每位同学在自己电脑上就有了一个工作副本，可以正式的开始开发了。我们模拟两个组员(组员A、组员B)，克隆两个工作区。 3 、组员A修改工作区,提交到本地仓库，再推送到远程仓库。组员B可以直接从远程仓库获取最新的代码。 4 、组员A和组员B修改了同一个文件的同一行，提交到本地没有问题，但是推送到远程仓库时，后一个推送操作就会失败。 解决方法：需要先获取远程仓库的代码到本地仓库，编辑冲突，提交并推送代码。 附：几条铁令 切换分支前先提交本地的修改 代码及时提交，提交过了就不会丢 遇到任何问题都不要删除文件目录，第 1 时间找老师 附：疑难问题解决 windows下看不到隐藏的文件（.bashrc、.gitignore） windows下无法创建.ignore|.bashrc文件 这里以创建.ignore文件为例： 在git目录下打开gitbash 执行指令touch .gitignore 附：IDEA集成GitBash作为Terminal","raw":null,"content":null,"categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://lycode1202.github.io/tags/git/"}]},{"title":"SpringBoot2消息中间件RabbitMQ","slug":"SpringBoot2消息中间件RabbitMQ","date":"2022-03-05T16:00:00.000Z","updated":"2022-03-06T03:48:51.420Z","comments":true,"path":"2022/03/06/springboot2-xiao-xi-zhong-jian-jian-rabbitmq/","link":"","permalink":"https://lycode1202.github.io/2022/03/06/springboot2-xiao-xi-zhong-jian-jian-rabbitmq/","excerpt":"","text":"","raw":null,"content":null,"categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://lycode1202.github.io/tags/SpringBoot/"}]},{"title":"SpringBoot整合Redis","slug":"SpringBoot2整合Redis","date":"2022-03-05T16:00:00.000Z","updated":"2022-03-06T03:48:51.429Z","comments":true,"path":"2022/03/06/springboot2-zheng-he-redis/","link":"","permalink":"https://lycode1202.github.io/2022/03/06/springboot2-zheng-he-redis/","excerpt":"","text":"SpringBoot整合Redis添加相关依赖 redis 通用池 mysql mybatis 通用mapper lombok web test &lt;!-- redis--> &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-data-redis&lt;/artifactId> &lt;/dependency> &lt;!-- web--> &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-web&lt;/artifactId> &lt;/dependency> &lt;!-- lombok--> &lt;dependency> &lt;groupId>org.projectlombok&lt;/groupId> &lt;artifactId>lombok&lt;/artifactId> &lt;optional>true&lt;/optional> &lt;/dependency> &lt;!-- test--> &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-test&lt;/artifactId> &lt;scope>test&lt;/scope> &lt;/dependency> &lt;!-- mysql--> &lt;dependency> &lt;groupId>mysql&lt;/groupId> &lt;artifactId>mysql-connector-java&lt;/artifactId> &lt;/dependency> &lt;!-- mybatis--> &lt;dependency> &lt;groupId>org.mybatis.spring.boot&lt;/groupId> &lt;artifactId>mybatis-spring-boot-starter&lt;/artifactId> &lt;version>2.2.2&lt;/version> &lt;/dependency> &lt;!-- 通用mapper--> &lt;dependency> &lt;groupId>tk.mybatis&lt;/groupId> &lt;artifactId>mapper-spring-boot-starter&lt;/artifactId> &lt;version>2.1.5&lt;/version> &lt;/dependency> 配置 端口 mysql数据源 redis数据源 log mybatis # 端口、MySQL数据源、redis、mybatis、log Spring: datasource: url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2B8&amp;useSSL=false username: root password: 123456 driver-class-name: com.mysql.cj.jdbc.Driver jpa: show-sql: true properties: hibernate: format_sql: true server: port: 8081 mybatis: mapper-locations: classpath:/mybatis/mapper/*.xml type-aliases-package: cn.kgc.entities 业务实现启动类测试","raw":null,"content":null,"categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://lycode1202.github.io/tags/SpringBoot/"}]},{"title":"hexo-matery博客目录结构","slug":"hexo博客目录解析","date":"2022-03-05T16:00:00.000Z","updated":"2022-03-07T10:05:22.629Z","comments":true,"path":"2022/03/06/hexo-bo-ke-mu-lu-jie-xi/","link":"","permalink":"https://lycode1202.github.io/2022/03/06/hexo-bo-ke-mu-lu-jie-xi/","excerpt":"","text":"目录部分 deploy_git，与git是git相关内容，如果无法git到仓库，需要检查git文件夹中配置 scaffolds，存放的是默认生成md文件的配置，其中post.md是默认生成文章的配置 scripts，扩展脚本目录，这里可以自定义一些javascript脚本存放的是页面加载脚本(非默认) source，hexo源码目录，是核心目录，下面详解 themes，是主题目录，下面详解 packages，是存放看板动画模型的(非默认) public，是通过hexo g编译出来的最终网页文件，也是部署到github上的文件，输出的静态网页内容目录 node_modules，是hexo的一些库文件 文件部分 _config.yml，是hexo的全局配置文件(核心配置文件)，一些插件安装后都需在此文件开启 CNAME，可配置个人域名 package.json，应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮 main.py，个人快速执行脚本(非默认) source目录hexo的源码目录，写文章的主要目录 ├── _data # 存放友链的friends.json和相册的json ├── _posts # 所有文章就在这里 ├── 404 # 404相关 ├── categories # 归档页面 ├── contact # 关于页面 ├── friends # 友联页面 ├── galleries # 相册页面 ├── images # 图片页面，其他图，懒加载图存放位置 ├── media # 多媒体 ├── tags # 标签页 ├── 404.md # 404崩溃页面 └── CANME themes目录 hexo-theme-matery主题为例，**_config.yml是主题配置文件，非常重要** ├── languages # 多语言 | ├── default.yml # 默认语言 | └── zh-CN.yml # 中文语言 ├── layout # 布局，根目录下的*.ejs文件是对主页，分页，存档等的控制 | ├── _partial # 局部的布局，此目录下的*.ejs是对头尾等局部的控制 | └── _widget # 小挂件的布局，页面下方小挂件的控制 ├── source # 源码 | ├── css # css源码 | | ├── _base # *.styl基础css | | ├── _partial # *.styl局部css | | ├── fonts # 字体 | | ├── images # 图片 | | └── style.styl # *.styl引入需要的css源码 | ├── fancybox # fancybox效果源码 | └── js # javascript源代码 ├── _config.yml # 主题配置文件 └── README.md # 用GitHub的都知道 layout目录目录部分 _partial主要修改文件 bg-cover-content.ejs # 主页背景图相关，banner图切换，打字机效果加字等 footer.ejs # 页脚配置 social-link.ejs # 修改社交链接，微信，qq，微博等 文件 404.ejs # 404页面 about.ejs # 关于我页面，个人简历 archive.ejs categories.ejs category.ejs contact.ejs douban.ejs # 豆瓣插件 friends.ejs galleries.ejs # 自定义相册 gallery.ejs # 自定义相册 index.ejs layout.ejs # 比较重要，我的天气，动态标签，鼠标点击特效等都在这开启 post.ejs tag.ejs tags.ejs 重点是这个layout.ejs，几乎所有自定义特效都在这个文件开启 source目录存放主题源码 ├── css #css源码 | ├── gallery.css # 相册css | ├── gitment.css | ├── matery.css # 主页的css相关调整，字体调整，主题色修改 | ├── my-gitalk.css | └── my.css # hexo-filter-github-emojis ├── js # javascript源代码，自定义js | ├── click.js # 鼠标点击特效 | ├── crypto-js.js # 加密相关 | ├── cursor.js # 雪花背景特效 | ├── fireworks.js # 鼠标点击烟花特效 | └── gallery-encrypt.js # 相册加密 ├── libs # 库文件，fancybox效果等插件需在这里打开 ├── medias # 主题内用到的背景图，图标，打赏图等都在这里 └── favicon.png # 网页标签图 js目录比较重要，所有自定特效，鼠标点击特效，背景特效在这里定义","raw":null,"content":null,"categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://lycode1202.github.io/tags/hexo/"}]},{"title":"hexo博客美化","slug":"hexo博客美化2","date":"2022-03-05T16:00:00.000Z","updated":"2022-03-07T09:08:47.927Z","comments":true,"path":"2022/03/06/hexo-bo-ke-mei-hua-2/","link":"","permalink":"https://lycode1202.github.io/2022/03/06/hexo-bo-ke-mei-hua-2/","excerpt":"","text":"首先声明一下，一定要分清什么是站点配置文件，什么是主题文件，比如我在 F 盘新建我的博客文件夹，名称为 blog，那么站点配置文件的路径为 F:/blog/_config.yml，而你的主题配置文件路径为 F:/blog/themes/matery/_config.yml。 1. 修改主题的基本信息#这是根目录下的配置文件信息 title: 过客~励む #这是网站标题 subtitle: 励む #这是网站副标题subtitle # 下面两个description,keywords，需要填上，如果想让搜索引擎收录，这个做SEO优化必不可忽视的两个属性 description: 专注于Web,分享生活,分享知识 #网站描述 keywords: [HTML, CSS, JavaScript, JQuery, React, Vue.js等] #网站的关键词 author: YangAir #作者，文章版权所显示的 language: zh-CN #网站语言，不填写，默认为英文 timezone: #时区，可以不填写 2. 修改主题的 logo 图和 favicon 图标打开你的主题配置文件，找到如下的配置，将其更改为你的 logo 和 favicon 路径即可： # 配置网站favicon和网站LOGO favicon: /favicon.png logo: /favicon.png 3. 去掉右上角的 github 图标打开你的主题配置文件，找到下面的配置: # Whether to display fork me on github icon and link, default true, You can change it to your repo address # 配置是否在 header 中显示 fork me on github 的图标，默认为true，你可以修改为你的仓库地址. githubLink: enable: true url: https://github.com/blinkfox/hexo-theme-matery title: Fork Me 将 enable 的属性值由 true 改为 false 即可。 4. 去掉主页的 Github 按钮打开主题配置文件，找到下面的配置： # 首页 banner 中的第二个按钮的配置，包括按钮的显示名称、font awesome图标和按钮的超链接. indexbtn: enable: true name: Github icon: fab fa-github-alt url: https://github.com/blinkfox/hexo-theme-matery 将 enable 属性值由 true 改为 false 即可。 5. 修改社交链接主页 banner 图中显示的社交链接与底部的社交链接是同步修改的，打开主题配置文件，将社交链接信息修改为你的信息。修改如下: # 首页 banner 中的第二行个人信息配置，留空即不启用 socialLink: github: https://github.com/blinkfox email: 1181062873@qq.com facebook: # https://www.facebook.com/xxx twitter: # https://twitter.com/xxx qq: 1181062873 weibo: # https://weibo.com/xxx zhihu: # https://www.zhihu.com/xxx rss: true # true、false 如果想添加简书，CSDN，掘金，博客园等等，需要在主题配置文件添加相关配置，如下是我个人的配置： socialLink: qq: 1035800145 weixin: https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/wechat.png github: https://github.com/Yafine email: mailto:1035800145@qq.com facebook: # https://www.facebook.com/xxx twitter: # https://twitter.com/xxx weibo: # https://weibo.com/xxx zhihu: https://www.zhihu.com/people/xuan-tian-40-64/activities juejin: https://juejin.im/user/5a902053f265da4e7527ae71/activities csdn: https://blog.csdn.net/victoryxa jianshu: https://www.jianshu.com/u/3b3856869772 cnblogs: https://www.cnblogs.com/yafine/ rss: true # true、false 其中的 weixin 我是用的图片链接，会跳转到一个新的标签页，之后还需要修改 ejs 文件，文件在主题目录下的 layout 文件夹下的_partial 文件夹，修改 social-link.ejs，添加相关的配置，我个人添加的配置如下： javascript &lt;% if (theme.socialLink.jianshu) { %&gt; &lt;a href=\"&lt;%= theme.socialLink.jianshu %&gt;\" class=\"tooltipped\" target=\"_blank\" data-tooltip=\"关注我的简书: &lt;%= theme.socialLink.jianshu %&gt;\" data-position=\"top\" data-delay=\"50\"&gt; &lt;i class=\"fab fa-jianshu\"&gt;简&lt;/i&gt; &lt;/a&gt; &lt;% } %&gt; &lt;% if (theme.socialLink.csdn) { %&gt; &lt;a href=\"&lt;%= theme.socialLink.csdn %&gt;\" class=\"tooltipped\" target=\"_blank\" data-tooltip=\"关注我的CSDN: &lt;%= theme.socialLink.csdn %&gt;\" data-position=\"top\" data-delay=\"50\"&gt; &lt;i class=\"fab fa-csdn\"&gt;C&lt;/i&gt; &lt;/a&gt; &lt;% } %&gt; &lt;% if (theme.socialLink.juejin) { %&gt; &lt;a href=\"&lt;%= theme.socialLink.juejin %&gt;\" class=\"tooltipped\" target=\"_blank\" data-tooltip=\"关注我的掘金: &lt;%= theme.socialLink.juejin %&gt;\" data-position=\"top\" data-delay=\"50\"&gt; &lt;i class=\"fab fa-juejin\"&gt;掘&lt;/i&gt; &lt;/a&gt; &lt;% } %&gt; &lt;% if (theme.socialLink.cnblogs) { %&gt; &lt;a href=\"&lt;%= theme.socialLink.cnblogs %&gt;\" class=\"tooltipped\" target=\"_blank\" data-tooltip=\"关注我的博客园: &lt;%= theme.socialLink.cnblogs %&gt;\" data-position=\"top\" data-delay=\"50\"&gt; &lt;i class=\"fab fa-juejin\"&gt;博&lt;/i&gt; &lt;/a&gt; &lt;% } %&gt; &lt;% if (theme.socialLink.weixin) { %&gt; &lt;a href=\"&lt;%= theme.socialLink.weixin %&gt;\" class=\"tooltipped\" target=\"_blank\" data-tooltip=\"微信联系我: &lt;%= theme.socialLink.weixin %&gt;\" data-position=\"top\" data-delay=\"50\"&gt; &lt;i class=\"fab fa-weixin\"&gt;&lt;/i&gt; &lt;/a&gt; &lt;% } %&gt; 6. 去掉 banner 图的动态滤镜颜色并修改导航栏颜色 去掉动态滤镜颜色 打开 themes/matery/source/css/matery.css 文件，查找下面的代码块，然后将其注释即可。如下： css .bg-cover:after { -webkit-animation: rainbow 60s infinite; animation: rainbow 60s infinite; } 或者是找到如下代码，将其注释掉即可： css /*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/ @-webkit-keyframes rainbow { /* 动态切换背景颜色. */ } @keyframes rainbow { /* 动态切换背景颜色. */ } 上面的两段代码是有关联的，将.bg-cover:after 这段代码注释掉，上面的代码就不会起作用了。 修改导航栏颜色及透明效果 打开 themes/matery/source/css/matery.css 文件，大约在 250 行，有一个.bg-color 属性，修改其属性值即可，代码如下： css .bg-color { background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%); //修改成自己喜欢的颜色值 opacity: 0.8; //透明效果 值范围 0~1，看情况自己修改 } 7. 修改 banner 图和文章特色图你可以直接在 /source/medias/banner 文件夹中更换你喜欢的 banner 图片，主题代码中是每天动态切换一张，只需 7 张即可。如果你会 JavaScript 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，banner 切换的代码位置在 /layout/_partial/bg-cover-content.ejs 文件的 &lt;script&gt;&lt;/script&gt; 代码中： javascript $('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)'); 在 /source/medias/featureimages 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 _config.yml 做同步修改。 如果想改为每小时或者每分钟切换 banner 图的话，需要将 getDay() 改为 getHours() 或者 getMinutes() 即可。 注意：这个不会自动切换 banner 图，需要刷新页面才可以，更换为每分钟或每小时可能会出现问题，如图片显示不出来，具体的解决办法，自己研究吧😂，可能是图片数量不足，或者是图片命名规范的问题。 8. 添加首页动态打字效果副标题在主题配置文件中，找到下面的配置： yml # 网站副标题，打字效果 # 如果有符号 ‘ ，请在 ’ 前面加上 \\ subtitle: enable: true loop: true # 是否循环 showCursor: true # 是否显示光标 startDelay: 300 # 开始延迟 typeSpeed: 100 # 打字速度 backSpeed: 50 # 删除速度 sub1: 志之所向，金石为开，谁能御之？ sub2: 花开不是为了花落，而是为了开的更加灿烂。 sub3: 没有伞的孩子必须努力奔跑！ sub4: 欲望以提升热忱，毅力以磨平高山。 sub5: 如果放弃太早，你永远都不知道自己会错过什么。 sub6: 没有礁石，就没有美丽的浪花；没有挫折，就没有壮丽的人生。 注意： 网站打字效果副标题默认有两个，即 sub1 和 sub2，如果想写多个，则需要修改两处地方，首先修改配置文件，如上面所示，在 sub1 和 sub2 后面继续添加即可，然后在去主题目录下的 layout 文件夹下的_partial 文件夹，修改 bg-cover-content.ejs 文件，大约在 12 行左右，如下面所示： javascript &lt;div class=\"description center-align\"&gt; &lt;% if (theme.subtitle.enable) { %&gt; &lt;span id=\"subtitle\"&gt;&lt;/span&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/typed.js@2.0.11\"&gt;&lt;/script&gt; &lt;script&gt; var typed = new Typed(\"#subtitle\", { strings: ['&lt;%= theme.subtitle.sub1 %&gt;', '&lt;%= theme.subtitle.sub2 %&gt;', '&lt;%= theme.subtitle.sub3 %&gt;', '&lt;%= theme.subtitle.sub4 %&gt;', '&lt;%= theme.subtitle.sub5 %&gt;', '&lt;%= theme.subtitle.sub6 %&gt;'], startDelay: &lt;%= theme.subtitle.startDelay %&gt;, typeSpeed: &lt;%= theme.subtitle.typeSpeed %&gt;, loop: &lt;%= theme.subtitle.loop %&gt;, backSpeed: &lt;%= theme.subtitle.backSpeed %&gt;, showCursor: &lt;%= theme.subtitle.showCursor %&gt; }); &lt;/script&gt; &lt;% } else { %&gt; &lt;%= config.description %&gt; &lt;% } %&gt; &lt;/div&gt; 9.动态标题实现方法，引入 js 文件，在主题文件下的 /source/js/ 下新建 FunnyTitle.js，然后在添加到 themes/matery/layout/layout.ejs 或者添加到 themes/matery/layout/_partial/head.ejs，其代码如下： javascript &lt;!--浏览器搞笑标题--&gt; var OriginTitle = document.title; var titleTime; document.addEventListener('visibilitychange', function () { if (document.hidden) { $('[rel=\"icon\"]').attr('href', \"https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/favicon.png\"); document.title = 'ヽ(●-`Д´-)ノ你要玩捉迷藏嘛'; clearTimeout(titleTime); } else { $('[rel=\"icon\"]').attr('href', \"https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/favicon.png\"); document.title = 'ヾ(Ő∀Ő3)ノ好哦！' + OriginTitle; titleTime = setTimeout(function () { document.title = OriginTitle; }, 2000); } }); 或者直接在 themes/matery/layout/layout.ejs 文件中添加如下代码： javascript &lt;script type=\"text/javascript\"&gt; var OriginTitile=document.title,st; document.addEventListener(\"visibilitychange\",function(){ document.hidden?(document.title=\"ヽ(●-`Д´-)ノ你要玩捉迷藏嘛\",clearTimeout(st)):(document.title=\"(Ő∀Ő3)ノ好哦！\",st=setTimeout(function(){document.title=OriginTitile},3e3)) }) &lt;/script&gt; 10.修改导航栏颜色以及透明效果打开 themes/matery/source/css/matery.css 文件，大约在 250 行，有一个.bg-color 属性，修改其属性值即可，代码如下： css .bg-color { background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%); //修改成自己喜欢的颜色值 opacity: 0.8; //透明效果 值范围 0~1，看情况自己修改 } 11. 添加动态诗词采用的是今日诗词，每次返回一句诗词，根据时间、地点、天气、事件智能推荐。官网有 API 文档，可以去看一下，有多种安装方式，最简单的方式就是从官网获取代码，在 /themes/matery/layout/_partial/head.ejs 添加下面的一行代码： javascript &lt;script src=\"https://sdk.jinrishici.com/v2/browser/jinrishici.js\" charset=\"utf-8\"&gt;&lt;/script&gt; 然后再将 /themes/matery/layout/_partial/bg-cover-content.ejs 中的 &lt;%= config.description %&gt; 修改为 &lt;%- '&lt;span id=\"jinrishici-sentence\"&gt;正在加载今日诗词....&lt;/span&gt;' %&gt;，这个使用前提是将主题配置文件的 subtitle 的值改为 false。 12.鼠标点击文字特效实现方法，引入 js 文件，在主题文件下的 /source/js/ 下新建 click_show_text.js，其代码如下： javascript 复制成功var a_idx = 0; jQuery(document).ready(function ($) { $(\"body\").click(function (e) { var a = new Array(\"富强\", \"民主\", \"文明\", \"和谐\", \"自由\", \"平等\", \"公正\", \"法治\", \"爱国\", \"敬业\", \"诚信\", \"友善\"); var $i = $(\"&lt;span/&gt;\").text(a[a_idx]); a_idx = (a_idx + 1) % a.length; var x = e.pageX, y = e.pageY; $i.css({ \"z-index\": 5, \"top\": y - 20, \"left\": x, \"position\": \"absolute\", \"font-weight\": \"bold\", \"color\": \"#FF0000\" }); $(\"body\").append($i); $i.animate({ \"top\": y - 180, \"opacity\": 0 }, 3000, function () { $i.remove(); }); }); setTimeout('delay()', 2000); }); function delay() { $(\".buryit\").removeAttr(\"onclick\"); } 或者使用我的 cdn 链接，理论上一直有效 https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/click_show_text.js，然后在添加到 themes/matery/layout/layout.ejs。 13. 鼠标点击礼花特效文件地址：传送门 在 matery/source/js/ 目录下新建 lihua.js，然后打开上面的传送门网址，将代码复制粘贴进 js 文件里，然后在 layout.ejs 文件里引用，最后本地运行查看效果即可。 14. 自定义鼠标样式建议大家下载鼠标指针样式的格式为 ico 格式，大小为 1616，或者 2424 的。 首先将鼠标样式下载到本地，推荐大家一个网站，可以免费下载，不过需要登录一下：网址为：https://www.easyicon.net/ 以我的为例，我将鼠标指针样式放在了主题文件夹下的 medias 目录下，然后打开主题文件夹下的 my.css 文件，添加内容如下： css *{ cursor: url(\"/medias/cursor1.ico\"),auto!important; } :active{ cursor: url(\"/medias/cursor2.ico\"),auto!important; } 然后在本地运行查看效果即可 15. 添加鼠标彩虹星星掉落跟随效果在 themes/matery/source/js 目录下新建 cursor.js 文件，打开这个网址传送门，将内容复制粘贴到 cursor.js 即可。 然后再 themes/matery/layout/layout.ejs 文件内添加下面的内容： javascript &lt;script src=\"/js/cursor.js\"&gt;&lt;/script&gt;","raw":null,"content":null,"categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://lycode1202.github.io/tags/hexo/"}]},{"title":"hexo博客美化","slug":"hexo博客美化3","date":"2022-03-05T16:00:00.000Z","updated":"2022-03-07T10:05:35.603Z","comments":true,"path":"2022/03/06/hexo-bo-ke-mei-hua-3/","link":"","permalink":"https://lycode1202.github.io/2022/03/06/hexo-bo-ke-mei-hua-3/","excerpt":"","text":"在 Hexo 博客中创建自定义页面使用hexo创建的静态博客，所有博文内容都是有markdown生成，且页面样式也是由下载的主题自动化生成的，那么想要在独立页面中大展身手的前端小伙伴，如何将写好的静态页面引入到hexo博客中呢？html，css，js等文件在hexo项目里如何避免被自动渲染呢？ 打开hexo项目根目录下的配置文件_config.yml，找到skip_render:，在这里就可以配置需要跳过渲染的文件。 例如，我们把所有静态页面放到source文件夹下的demo文件夹中，只要配置 skip_render: demo/** 就可以使demo下的所有文件（包括子文件）避免被编译。 skip_render: demo/* # 屏蔽demo文件夹下的文件，不包括子文件夹内的内容 skip_render: demo/** # 屏蔽demo文件夹下的所有文件，包括子文件夹内的内容 skip_render: demo/index.html # 屏蔽demo文件夹下的index.html，特指一个文件 skip_render: demo/*.html # 屏蔽demo文件夹下的所有html文件 写多个筛选条件时 skip_render: - space/** - demo/* 随后即可 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s","raw":null,"content":null,"categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://lycode1202.github.io/tags/hexo/"}]},{"title":"hexo博客美化-基本配置","slug":"hexo博客美化","date":"2022-03-05T16:00:00.000Z","updated":"2022-03-07T10:09:26.170Z","comments":true,"path":"2022/03/06/hexo-bo-ke-mei-hua/","link":"","permalink":"https://lycode1202.github.io/2022/03/06/hexo-bo-ke-mei-hua/","excerpt":"","text":"主题下载与安装 说明：在之后提到的站点目录即根文件夹，主题目录就是主题文件夹，同理，站点配置文件就是根文件夹的配置文件，如我的：E:\\blog\\_config.yml，主题配置文件： E:\\blog\\themes\\matery\\_config.yml 在你的目录文件夹下使用 git clone 命令来下载：直接在站点根目录下执行下面的命令，即可进行主题的下载，主题有两个版本，稳定版本和最新版本(不定期更新优化)，自主选择版本，本文使用的是稳定版。 git clone https://gitee.com/yafine66/hexo-theme-matery themes/matery # 稳定版 git clone -b develop https://gitee.com/yafine66/hexo-theme-matery themes/matery #最新版(不定期进行优化更新) 切换主题： 将站点配置文件中的theme值修改为你下载主题的文件名，此处为matery，即theme: matery。 还需要修改的一些配置： 语言选择：如果为中文用户，则在language:后添加值zh-CN，如果不修改，默认为英语； 网址修改：url:的值为你的网址名，如http://xxxx.github.io； 站点配置文件有个per_page属性，建议修改为6的倍数，这样网站在适应设备时，有较好的显示效果。 1.增加功能1.1 增加页面 增加页面的步骤都基本相同，创建tags标签页、categories分类页，about关于我页、 contact留言板页、friends友情链接页、均可以使用这个步骤 如果在你的博客 source 目录下还没有，就输入以下命令（站点目录打开的命令行）来新建一个： hexo new page \"页面的英文\" # 如：hexo new page \"tags\" 编辑你刚刚新建的页面文件 /source/tags/index.md，至少需要以下内容： --- title: tags date: 2020-06-19 16:23:38 type: \"页面的英文\" # 如：type: \"tags\" layout: \"页面的英文\" # 如：layout: \"tags\" --- 关于 contact留言板页：留言板功能依赖于第三方评论系统，激活评论系统才有效果，下面会有介绍 关于friends友情链接页：如果你想增加内容，在你的博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，输入以下内容： [{ \"avatar\": \"http://image.luokangyuan.com/1_qq_27922023.jpg\", \"name\": \"码酱\", \"introduction\": \"我不是大佬，只是在追寻大佬的脚步\", \"url\": \"http://luokangyuan.com/\", \"title\": \"前去学习\" }, { \"avatar\": \"http://image.luokangyuan.com/4027734.jpeg\", \"name\": \"闪烁之狐\", \"introduction\": \"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬\", \"url\": \"https://blinkfox.github.io/\", \"title\": \"前去学习\" }, { \"avatar\": \"http://image.luokangyuan.com/avatar.jpg\", \"name\": \"ja_rome\", \"introduction\": \"平凡的脚步也可以走出伟大的行程\", \"url\": \"https://me.csdn.net/jlh912008548\", \"title\": \"前去学习\" }] 1.2 菜单导航配置 关于导航的配置都在主题配置文件中 1.2.1 配置基本菜单导航的名称、路径url和图标icon 导航名称可以设置成中文/英文 图标icon可以更换，具体属性值可以在fontawesome中查找 menu: Index: url: / icon: fas fa-home Tags: url: /tags icon: fas fa-tags Categories: url: /categories icon: fas fa-bookmark Archives: url: /archives icon: fas fa-archive About: url: /about icon: fas fa-user-circle 友人帐: #可以使用中文，也可以在对应的md中设置title:友人帐 url: /friends icon: fas fa-address-book 1.2.2 二级菜单配置方法 在需要添加二级菜单的一级菜单下添加children关键字(如:爱好菜单下添加children)，一级菜单不需要增加url属性 创建二级页面，步骤与创建页面步骤相同，编辑md时不需要layout属性 --- title: 追番 date: 2020-06-15 15:19:35 type: \"bangumis\" --- 给二级菜单增加名称name,路径url和图标icon 注意每个二级菜单模块前要加 - 二级菜单要缩进到一级菜单内 爱好: icon: fas fa-bicycle children: - name: 追番 url: /bangumis icon: fas fa-play-circle - name: 音乐 url: /musics icon: fas fa-music 1.3 增加番剧、音乐页面 此处可以设置一个二级导航爱好，将这些归纳到一个导航中效果更佳 1.3.1 Bilibili 需要插件来获取你的番剧 安装插件 npm install hexo-bilibili-bangumi --save 安装番剧更新插件 npm install hexo-bilibili-bangumi --update --save 配置 将下面的配置写入站点配置文件_config.yml里（非主题） bangumi: enable: true #是否开启 vmid: 1234567 #输入你番剧的uid，登录网址https://space.bilibili.com/1234567，后面数字就是你的uid title: '追番列表' # 标题 quote: '生命不息，追番不止！' # 简介 show: 1 # 初始显示页面：0: 想看 , 1: 在看 , 2: 看过，默认为 1 loading: '/img/bangumi-loading.gif' # 图片加载完成前的 loading 图片 创建番剧页面 输入命令 hexo new page bangumis 找到source/bangumis/index.md这个文件，修改这个文件，添加 type: \"bangumis\" ```yamltitle: bangumisdate: 2020-06-18 00:00:00 type: “bangumis” 配置番剧页面为二级导航栏 参考上边的二级导航栏配置方式 使用 输入命令，更新番剧数据 hexo clean &amp;&amp; hexo g &amp;&amp; hexo bangumi -u &amp;&amp; hexo s 更新时遇到的坑： 错误：配置都完全正确，却出现Get bangumi data error 原因：你的B站设置了番剧仅自己可见 解决方法：进入B站个人空间，点击设置，将追番追剧设置为公开 如果想要删除数据，可以输入该命令 hexo bangumi -d 注意：该插件不需要我们每次部署都要输入更新数据的命令，只有你自己番剧更新时才需要执行更新指令，之前的番剧数据会一直保留，直到被你删除 1.3.2 网易云音乐 这个就非常简单了，不需要安装任何插件，只需要创建新页面，配置二级导航即可 创建音乐页面 输入命令 hexo new page musics 找到source/musics/index.md这个文件，修改这个文件，添加 type: \"music\" --- title: 音乐！音乐！ date: 2020-06-16 14:45:30 type: 'music' --- 在index.md文件中增加以下内容 &lt;iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=530 height=520 src=\"//music.163.com/outchain/player?type=0&amp;id=2817562565&amp;auto=1&amp;height=430\">&lt;/iframe> 第二行的id的那串数字，需要改成你想要的歌单id 查看自己id的方式： 点击网易云音乐软件，找到想设置的歌单→分享→复制链接 https://music.163.com/playlist?id=531558923&amp;userid=375531677 id则是你想要的id，不是后面的userid 配置音乐页面为二级导航栏 参考上边的二级导航栏配置方式 1.4 增加自定义相册 修改的原因： matery主题原有的相册效果不佳，原因在于全部采用平铺式，没有分类的功能，自定义相册可以建立文件夹，方便分类 注意：本教程采用图床+CDN，图床采用的是github+Picgo 关于图床和cdn是什么： 通俗来说就是将本地图片上传到网上，通过cdn加速来加快读取图片的一种方式 具体看励心大佬关于github图床搭建的教程 新建相册页面 执行以下命令： hexo new page galleries 到站点根目录的source目录下找名称为 **galleries** 的目录，打开目录下的 **index.md** 文档，添加以下配置： title: 相册 date: 2020-06-13 10:59:30 type: \"galleries\" layout: \"galleries\" 配置导航菜单 在主题配置文件中menu加上 相册: url: /galleries icon: fas fa-image 创建ejs文件和css文件 在路径 matery/source/css目录下，新建gallery.css，增加以下代码 .gallery-wrapper{ padding-top: 30px; } .gallery-wrapper .gallery-box{ padding: 5px !important; } .gallery-wrapper .gallery-item { display: block; overflow: hidden; background-color: #fff; padding: 5px; padding-bottom: 0; position: relative; -moz-box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.22); -webkit-box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.22); box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.22); } .gallery-cover-box{ width: 100%; padding-top: 60%; text-align: center; overflow: hidden; position: relative; background: center center no-repeat; -webkit-background-size: cover; background-size: cover; } .gallery-cover-box .gallery-cover-img { display: inline-block; width: 100%; position: absolute; left: 50%; top: 50%; transform: translate(-50%,-50%); } .gallery-item .gallery-name{ font-size: 14px; line-height: 24px; text-align: center; color: #666; margin: 0; } .waterfall { column-count: 3; column-gap: 1em; } .photo-wrapper{ padding-top: 20px; } .photo-item { display: block; padding: 10px; padding-bottom: 0; margin-bottom: 14px; font-size: 0; -moz-page-break-inside: avoid; -webkit-column-break-inside: avoid; break-inside: avoid; background: white; -moz-box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.22); -webkit-box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.22); box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.22); } .photo-item img { width: 100%; } .photo-item .photo-name{ font-size: 14px; line-height: 30px; text-align: center; margin-top: 10px; margin-bottom: 10px; border-top: 1px solid #dddddd; } /*适配移动端布局*/ @media only screen and (max-width: 601px) { .waterfall { column-count: 2; column-gap: 1em; } } 在matery/layout 目录下创建 galleries.ejs ，增加以下代码，并修改代码 &lt;link rel=\"stylesheet\" href=\"/css/gallery.css\"> &lt;%- partial('_partial/bg-cover') %> &lt;main class=\"content\"> &lt;div class=\"container\"> &lt;% if (site.data &amp;&amp; site.data.galleries) { %> &lt;% var galleries = site.data.galleries; %> &lt;div class=\"gallery-wrapper row\"> &lt;% for (var i = 0, len = galleries.length; i &lt; len; i++) { %> &lt;% var gallery = galleries[i]; %> &lt;div class=\"col s6 m4 l4 xl3 gallery-box\"> &lt;a href=\"./&lt;%- gallery.name %>\" class=\"gallery-item\" data-aos=\"zoom-in-up\"> &lt;div class=\"gallery-cover-box\" style=\"background-image: url(你的链接&lt;%- gallery.cover%>);\"> &lt;/div> &lt;p class=\"gallery-name\"> &lt;%- gallery.name %> &lt;/p> &lt;/a> &lt;/div> &lt;% } %> &lt;/div> &lt;% } %> &lt;/div> &lt;/main> 修改代码： 在你的链接这填写你相册图床的根网址，解释一下什么叫根网址， 一张图片的目录是https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/123/aaa.jpg 那么它的根目录就是https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/，123/只是图床中的一个文件夹 比如我的修改为：url(https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/&lt;%- gallery.cover%&gt;);”&gt; 仍然在此目录新建gallery.ejs文件，添加以下代码，并修改代码： &lt;link rel=\"stylesheet\" href=\"/css/gallery.css\"> &lt;link type=\"text/css\" href=\"/libs/fancybox/jquery.fancybox.css\" rel=\"stylesheet\"> &lt;link type=\"text/css\" href=\"/libs/justifiedGallery/justifiedGallery.min.css\" rel=\"stylesheet\"> &lt;%- partial('_partial/post-cover') %> &lt;% let galleries = []; if (site.data &amp;&amp; site.data.galleries) { galleries = site.data.galleries; } var pageTitle = page.title; function getCurrentGallery(galleries, pageTitle) { for (let i = 0; i &lt; galleries.length; i++) { if (galleries[i]['name'] == pageTitle) { return galleries[i]; } } } var currentGallery = getCurrentGallery(galleries, pageTitle) var photos = currentGallery.photos; let imageStr = '' for (var i = 0, len = photos.length; i &lt; len; i++) { var photo = photos[i]; imageStr += \"&lt;a href=\\\"你的链接\" + photo + \"\\\"\" + \" class=\\\"photo-item\\\" rel=\\\"example_group\\\"\" + \" data-fancybox=\\\"images\\\">\" + \" &lt;img src=\\\"你的链接\" + photo + \"\\\"\" + \" alt=\" + photo + \">\\n\" + \" &lt;/a>\" } %> &lt;div class=\"container\"> &lt;div class=\"photo-wrapper\"> &lt;% if (page.password ) { %> &lt;script src=\"/js/crypto-js.js\">&lt;/script> &lt;script src=\"/js/gallery-encrypt.js\">&lt;/script> &lt;div id=\"hbe-security\"> &lt;div class=\"hbe-input-container\"> &lt;input type=\"password\" class=\"hbe-form-control\" id=\"pass\" placeholder=\"请输入密码查看内容\"/> &lt;a href=\"javascript:;\" class=\"btn-decrypt\" id=\"btn_decrypt\">解密&lt;/a> &lt;/div> &lt;/div> &lt;div id=\"mygallery\"> &lt;div class=\"waterfall\" id=\"encrypt-blog\" style=\"display:none\"> &lt;%- aes(imageStr, page.password) %> &lt;/div> &lt;/div> &lt;% } else { %> &lt;div class=\"waterfall\" id=\"encrypt-blog\"> &lt;%- imageStr %> &lt;/div> &lt;% } %> &lt;/div> &lt;/div> &lt;script src=\"/libs/fancybox/fancybox.js\">&lt;/script> &lt;script src=\"/libs/justifiedGallery/justifiedGallery.min.js\">&lt;/script> &lt;script> $(\"a[rel=example_group]\").fancybox(); $(\"#encrypt-blog\").justifiedGallery({margins: 5, rowHeight: 150}); &lt;/script> 修改代码： 在你的链接这填写你相册图床的根网址 注意：最后一定要带上 / 添加相册json配置文件 在根目录source\\_data新建 galleries.json 的文件，增加json 代码如下： [ { \"name\": \"相册名字\", \"cover\": \"images/p0.png\", \"description\": \"相册的描述\", \"photos\": [ \"images/node-1.png\", \"images/node-2.png\", \"images/node-3.png\", \"images/node-4.png\", \"images/node-5.png\", \"images/node-6.png\", \"images/node-7.png\", ] } ] 属性介绍： cover：相册的封面，值为图片的地址 photos：图片的地址，输入了地址界面才会显示该图片，前提是图床中有该图片 新建相册 在galleries目录下建立对应的相册名称目录和文件，比如我这个相册需要新建名称为 2020 文件夹，然后在文件夹中新建index.md文件，文件内容为： --- title: 2020 date: 2020-02-19 10:51:50 type: \"gallery\" layout: \"gallery\" --- 查看效果 重新部署 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 1.5 增加emoji支持😄 使你markdown博客里的emoji表情跳动起来 安装插件 npm install hexo-filter-github-emojis --save 在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项： githubEmojis: enable: true className: github-emoji inject: true styles: customEmojis: 重新部署即可查看 小坑：在配置支持前发布的文章中的表情并没有获得支持，并且连表情都不会显示，所以最好在配置之后再输入表情进行测试 1.6代码高亮由于 Hexo 自带的代码高亮主题显示不好看，用一个插件来替换它 安装插件 npm i -S hexo-prism-plugin 修改 Hexo 站点配置文件 _config.yml 中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下： prism_plugin: mode: 'preprocess' # realtime/preprocess theme: 'tomorrow' line_number: false # default false custom_css: 1.7 搜索功能实现文章内容搜索 安装插件 npm install hexo-generator-search --save 在 Hexo 站点配置文件 _config.yml 中，新增以下的配置项： search: path: search.xml field: post 1.8 中文链接转拼音如果你的文章名称是中文的，那么 Hexo 默认生成的文章链接也会有中文，这样不利于 SEO，且 gitment 评论对中文链接也不支持。我们可以用 hexo-permalink-pinyin Hexo 插件使在生成文章时生成中文拼音的永久链接。 安装插件 npm i hexo-permalink-pinyin --save 在 Hexo 站点配置文件 _config.yml 中，新增以下的配置项： permalink_pinyin: enable: true separator: '-' # default: '-' 1.9 文章字数统计插件用于在文章中显示文章字数、阅读时长信息 安装插件 npm i --save hexo-wordcount 在主题配置文件_config.yml 文件中，激活以下配置项即可： wordCount: enable: false # 将这个值设置为 true 即可. postWordCount: true min2read: true totalCount: true 1.10 配置音乐播放器想支持音乐播放，在主题的 _config.yml 配置文件中激活music配置即可： # 是否在首页显示音乐. music: enable: true title: #非吸底模式有效 enable: true show: 听听音乐 autoHide: false # hide automaticaly server: netease #require music platform: netease, tencent, kugou, xiami, baidu type: playlist #require song, playlist, album, search, artist id: 411680085 #require song id / playlist id / album id / search keyword fixed: true # 开启吸底模式 autoplay: false # 是否自动播放 theme: '#42b983' loop: 'all' # 音频循环播放, 可选值: 'all', 'one', 'none' order: 'random' # 音频循环顺序, 可选值: 'list', 'random' preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto' volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效 listFolded: false # 列表默认折叠 hideLrc: true # 隐藏歌词 属性介绍： server可选netease（网易云音乐），tencent（QQ音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐） type可选song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手） id获取示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，playlist的id即为这串数字。 小坑：matery主题不支持ajax异步机制，在切换页面时音乐也会切换，不会继续一首歌播放所以这个功能比较鸡肋，在于自己取舍 1.11 关于我页面添加个人简历打开theme/matery/layout/about.ejs文件，大约在13行。有一个card标签，找出其对应结尾的标签，大约在61行左右，然后在下面新增如下代码 &nbsp;&nbsp; 注意粘贴的位置和空格要正确，这里的位置随你自己设置，你也可以把简历作为第一个card，然后/source/about/index.md下面写上你的简历了（就像写博客一样）。 1.12 配置404错误页面站点根目录下的source文件夹下新建404.md文件，里面内容如下： --- title: 404 date: 2020-6-18 16:41:10 type: \"404\" layout: \"404\" description: \"Oops～，我崩溃了！找不到你想要的页面了\" --- 在主题文件夹的layout目录下新建404.ejs文件，添加内容如下： /* don't remove. */ .about-cover { height: 90.2vh; } 404 // 每天切换 banner 图. Switch banner image every day. $('.bg-cover').css('background-image', 'url(https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.1/source/medias/banner/' + new Date().getDay() + '.jpg)'); 然后部署，再看看效果即可http://localhost:4000/404/ 1.13 添加Valine评论系统编辑主题目录下的配置文件MyBlog/themes/matery/_config.yml，找到如下内容并修改 # Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey. valine: enable: true appId: Ucrxxxxxxxxxxxxxxxx-xxxxsz # 自行注册valine获取 appKey: zPsLxxxxxxxxxxxxxxerLmd # 自行注册valine获取 notify: true verify: true visitor: true avatar: 'monsterid' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide pageSize: 10 placeholder: '留下你的足迹..' # Comment Box placeholder background: /medias/comment_bg.png count: true enableQQ: 16463223 # 改为自己的QQ号 recordIP: true requiredFields: - nick - mail guest_info: - nick - mail - link master: - 46606772953bed0812789d6dc955614e # md5加密后的博主邮箱 metaPlaceholder: # 输入框的背景文字 nick: 昵称/QQ号(必填) mail: 邮箱(必填) link: 网址(https://) lang: zh-CN tagMeta: # The String Array of Words to show Flag.[Just Only xCss Style mode] - 博主 - 小伙伴 - 访客 friends: # The MD5 String Array of friends Email to show friends Flag.[Just Only xCss Style mode] - cb3e577ff029d6073400d5557effd41f - 1.14 修改公告(dream一栏)里的每日一句找到/themes/matery/layout/index.ejs，第17行改为： &lt;% if (theme.dream.enable) { %> &lt;!-- &lt;%- partial('_widget/dream') %> --> &lt;i class=\"fa fa-volume-up fa-lg fa-fw text-color\">&lt;/i> &lt;%- '&lt;span id=\"hitokoto\">一言API请求超时。请稍后重试。&lt;/span> （来源：一言API）' %> &lt;% } %> 同时在/themes/matery/layout/_partial/head.ejs增加代码： &lt;script src=\"https://v1.hitokoto.cn/?c=d&amp;encode=js&amp;select=%23hitokoto\" defer>&lt;/script> 1.15 修改打赏二维码在主题文件的 source/medias/reward 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。 2. 博客优化2.1 gulp代码压缩 hexo生成的html、css、js等都有很多的空格或者换行，而空格和换行也是占用字节的，所以需要将空格换行去掉也就是我要进行的“压缩”，减小一点资源文件的大小也是对访问速度有那么一点提升的。 在站点目录执行以下命令，安装插件 # 全局安装gulp模块 npm install gulp -g # 安装各种小功能模块 执行这步的时候，可能会提示权限的问题，最好以管理员模式执行 npm install gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save # 额外的功能模块 npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save 在Hexo根目录新建文件 gulpfile.js，并复制以下内容到文件中，有中文注释，可以根据自己需求修改。（注意：文件名不能错，一定为gulpfile.js，否则会出错！） var gulp = require(\"gulp\"); var debug = require(\"gulp-debug\"); var cleancss = require(\"gulp-clean-css\"); //css压缩组件 var uglify = require(\"gulp-uglify\"); //js压缩组件 var htmlmin = require(\"gulp-htmlmin\"); //html压缩组件 var htmlclean = require(\"gulp-htmlclean\"); //html清理组件 var imagemin = require(\"gulp-imagemin\"); //图片压缩组件 var changed = require(\"gulp-changed\"); //文件更改校验组件 var gulpif = require(\"gulp-if\"); //任务 帮助调用组件 var plumber = require(\"gulp-plumber\"); //容错组件（发生错误不跳出任务，并报出错误内容） var isScriptAll = true; //是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件) var isDebug = true; //是否调试显示 编译通过的文件 var gulpBabel = require(\"gulp-babel\"); var es2015Preset = require(\"babel-preset-es2015\"); var del = require(\"del\"); var Hexo = require(\"hexo\"); var hexo = new Hexo(process.cwd(), {}); // 初始化一个hexo对象 // 清除public文件夹 gulp.task(\"clean\", function () { return del([\"public/**/*\"]); }); // 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return // 创建静态页面 （等同 hexo generate） gulp.task(\"generate\", function () { return hexo.init().then(function () { return hexo .call(\"generate\", { watch: false }) .then(function () { return hexo.exit(); }) .catch(function (err) { return hexo.exit(err); }); }); }); // 启动Hexo服务器 gulp.task(\"server\", function () { return hexo .init() .then(function () { return hexo.call(\"server\", {}); }) .catch(function (err) { console.log(err); }); }); // 部署到服务器 gulp.task(\"deploy\", function () { return hexo.init().then(function () { return hexo .call(\"deploy\", { watch: false }) .then(function () { return hexo.exit(); }) .catch(function (err) { return hexo.exit(err); }); }); }); // 压缩public目录下的js文件 gulp.task(\"compressJs\", function () { return gulp .src([\"./public/**/*.js\", \"!./public/libs/**\"]) //排除的js .pipe(gulpif(!isScriptAll, changed(\"./public\"))) .pipe(gulpif(isDebug, debug({ title: \"Compress JS:\" }))) .pipe(plumber()) .pipe( gulpBabel({ presets: [es2015Preset] // es5检查机制 }) ) .pipe(uglify()) //调用压缩组件方法uglify(),对合并的文件进行压缩 .pipe(gulp.dest(\"./public\")); //输出到目标目录 }); // 压缩public目录下的css文件 gulp.task(\"compressCss\", function () { var option = { rebase: false, //advanced: true, //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）] compatibility: \"ie7\" //保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式] //keepBreaks: true, //类型：Boolean 默认：false [是否保留换行] //keepSpecialComments: '*' //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀 }; return gulp .src([\"./public/**/*.css\", \"!./public/**/*.min.css\"]) //排除的css .pipe(gulpif(!isScriptAll, changed(\"./public\"))) .pipe(gulpif(isDebug, debug({ title: \"Compress CSS:\" }))) .pipe(plumber()) .pipe(cleancss(option)) .pipe(gulp.dest(\"./public\")); }); // 压缩public目录下的html文件 gulp.task(\"compressHtml\", function () { var cleanOptions = { protect: /&lt;\\!--%fooTemplate\\b.*?%-->/g, //忽略处理 unprotect: /&lt;script [^>]*\\btype=\"text\\/x-handlebars-template\"[\\s\\S]+?&lt;\\/script>/gi //特殊处理 }; var minOption = { collapseWhitespace: true, //压缩HTML collapseBooleanAttributes: true, //省略布尔属性的值 &lt;input checked=\"true\"/> ==> &lt;input /> removeEmptyAttributes: true, //删除所有空格作属性值 &lt;input id=\"\" /> ==> &lt;input /> removeScriptTypeAttributes: true, //删除&lt;script>的type=\"text/javascript\" removeStyleLinkTypeAttributes: true, //删除&lt;style>和&lt;link>的type=\"text/css\" removeComments: true, //清除HTML注释 minifyJS: true, //压缩页面JS minifyCSS: true, //压缩页面CSS minifyURLs: true //替换页面URL }; return gulp .src(\"./public/**/*.html\") .pipe(gulpif(isDebug, debug({ title: \"Compress HTML:\" }))) .pipe(plumber()) .pipe(htmlclean(cleanOptions)) .pipe(htmlmin(minOption)) .pipe(gulp.dest(\"./public\")); }); // 压缩 public/medias 目录内图片 gulp.task(\"compressImage\", function () { var option = { optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级） progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片 interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染 multipass: false //类型：Boolean 默认：false 多次优化svg直到完全优化 }; return gulp .src(\"./public/medias/**/*.*\") .pipe(gulpif(!isScriptAll, changed(\"./public/medias\"))) .pipe(gulpif(isDebug, debug({ title: \"Compress Images:\" }))) .pipe(plumber()) .pipe(imagemin(option)) .pipe(gulp.dest(\"./public\")); }); // 执行顺序： 清除public目录 -> 产生原始博客内容 -> 执行压缩混淆 -> 部署到服务器 gulp.task( \"build\", gulp.series( \"clean\", \"generate\", \"compressHtml\", \"compressCss\", \"compressJs\", gulp.parallel(\"deploy\") ) ); // 默认任务 gulp.task( \"default\", gulp.series( \"clean\", \"generate\", gulp.parallel(\"compressHtml\", \"compressCss\", \"compressJs\") ) ); //Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数 注意：这里我去掉了图片的压缩，如果想要加上可以在第154行加上 “compressImage”, 和第165行的加上”compressImage” 即可 使用（两种方式）： 直接在Hexo根目录执行 gulp，这个命令相当于 hexo cl&amp;&amp;hexo g 并且再把代码压缩，再hexo s进行部署即可 在Hexo根目录执行 gulp build ，这个命令与第1种相比是：在最后又加了个 hexo d ，等于说生成、压缩文件后又帮你自动部署了 2.2 CDN加速 关于CDN是什么？参考励心大佬 由于我们将博客部署到了国外的Github上，国内访问速度很慢，我们可以使用这个技术来实现全站加速 在理解了CDN的含义和该如何使用CDN的前提下，matery主题有一个很人性化的操作，不需要我们将每个资源都逐个设置，在主题配置文件_config.yml中搜索jsDelivr，填写url为自己的博客仓库即可，如我的： jsDelivr: url: https://cdn.jsdelivr.net/gh/fenghen0918/fenghen0918.github.io 此时重新hexo cl &amp;&amp; hexo g &amp;&amp; hexo d部署你的项目体验效果，网站的加载速度会快很多（先看小苏经历的坑）。 关于CDN加速的坑： 配置了此项，就代表着hexo s本地调试的时候，网站依然会去GitHub请求资源（原来的资源），所以本地调试的时候记得将 此项配置 注释或者删除掉； 在hexo s本地调试好之后，需要hexo d部署到网上，要先配置到url，之后再hexo cl &amp;&amp; hexo g &amp;&amp; hexo d进行部署，否则不生效； 使用了matery提供的全局CDN加速，有可能你的樱花散落，鼠标图标等一些特效消失，具体原因还不清楚，不过加速效果才是小苏想要的，就舍弃掉了这些特效。 2.3 打造图床 图床的选择有免费和收费，在这里推荐一种免费搭建图床的方式： PicGo+Github：https://yafine-blog.cn/posts/eb3a.html 有了图床，我们可以实现自定义相册、markdown基于图床上传图片的功能，很强大 2.4 部署到Coding 在上面的教程我们可以将博客部署到国外Github的仓库上，我们也可以将博客部署到国内Coding、Gitee仓库上，可以提高一些网站访问的速度，小苏只使用了Coding，这里也介绍一下。 https://fenghen0918.github.io/2020/06/20/hexo-bo-ke-bu-shu-dao-coding/ 2.5 新建文章自动打开本地Markdown编辑器 写新文章时，需要控制台执行hexo new “文章名字”生成一篇新文章，但需要手动打开，挺麻烦，我们可以设置在生成之后自动打开 在站点根目录下新建scripts目录，然后在新建auto_open.js，在文件填入一下内容： var spawn = require('child_process').exec; // Hexo 2.x 用户复制这段 //hexo.on('new', function(path){ //spawn('start \"markdown编辑器绝对路径.exe\" ' + path); //}); // Hexo 3 用户复制这段 hexo.on('new', function(data){ spawn('start \"D:\\Program Files\\Typora\\Typora.exe\" ' + data.path); }); 其中”D:\\Program Files\\Typora\\Typora.exe”是我本地编辑器的路径，只需要改为你本地编辑器的路径即可，然后在执行hexo cl &amp;&amp; hexo g -d，部署到GitHub即可，以后在发布文章就会自动打开编辑器。","raw":null,"content":null,"categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://lycode1202.github.io/tags/hexo/"}]}]}