<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/05/31/xian-xing-hui-gui/"/>
      <url>/2023/05/31/xian-xing-hui-gui/</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230515215453568.png" alt="image-20230515215453568"></p><p><strong>什么是回归预测？什么是分类预测？</strong></p><table><thead><tr><th align="center">模型</th><th align="center">输入变量</th><th align="center">预测结果</th><th align="center">应用</th></tr></thead><tbody><tr><td align="center">回归预测</td><td align="center">实值离散</td><td align="center">一个<strong>连续值</strong>域上的任意值</td><td align="center">预测值的分布情况</td></tr><tr><td align="center">分类预测</td><td align="center">实值离散</td><td align="center">两个或多个<strong>分类</strong>值</td><td align="center">将输入变量分类到不同类别</td></tr></tbody></table><p>思考一个问题：分类问题是否可以转变为回归问题？</p><p>回答：当然可以！</p><p>例子：检测癌症患者患病概率，检查值可能是40%、50%、60%等连续值，但是如果我们给定一个划分标准，如高于50%的检查值认定为患病，那么我们就把一个回归问题转化成了分类问题。</p><p><strong>什么是线性？</strong></p><ul><li>可加性，又称叠加性<ul><li>f(x+y)=f(x)+f(y)</li></ul></li><li>齐次性，又称均匀性<ul><li>f(ax)=af(x)，其中a为与x无关的常数</li></ul></li><li>f(x,y)=f(ax+by)=af(x)+bf(y)</li></ul><p><strong>什么是线性回归（LinearRegression）？</strong></p><p>顾名思义：用一条线来进行回归预测。</p><p>例子：已知房屋面积和房屋价格的对应关系，100平60w；120平70w；130平75w。根据对应的散列点在二维空间描绘出来得到下图：</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230601085044975.png" alt="image-20230601085044975"></p><p>线性回归在这种背景下的工作就是寻找一条直线，尽可能的拟合这些离散点。</p><p><strong>什么是拟合？</strong></p><p>专业的来说：针对数据(x1,y1)、(x2,y2)，…，(xn,yn)，确定一个函数f(x)使得尽可能的准确表达这些变量间的关系。</p><p>拟合不一定是百分百的，如上图的这些离散点，根据两点确定一条直线的原则，你无法找到一条能够完全穿过这些点的直线，因此不同人可能会找到不同的直线，如下图：</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230601085902068.png" alt="image-20230601085902068"><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230601085911994.png" alt="image-20230601085911994"><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230601085934186.png" alt="image-20230601085934186"></p><p>这么多条线，我们的应该选取哪一条作为最终的f(x)呢？针对这个问题，我们引入了一个评判指标——损失函数</p><p><strong>什么是损失函数（loss function）？</strong></p><p>首先我们明确一个概念：</p><p>图上这条直线上的点称为预测点，图上这些离散的点称为真实点。既然是预测就会存在误差，这里我们把真实值和预测值之间的差值称为——残差</p><p>残差公式：<br>$$<br>e = y - \hat y<br>$$<br><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230601091424515.png" alt="image-20230601091424515"></p><p>对于单个具体点我们可以用残差来衡量评估标准，但对于图中所有的点，我们要进行整体评估，因此数学上一般将所有点的残差的平方加和等到一个总和</p><p>残差平方和公式（SSE）：<br>$$<br>Q = \sum_{i=1}^{n}(y_i-\hat y_i)^2=\sum_{i=1}^{n}(y_i-(\hat \beta_0+\hat \beta_1x_i))^2<br>$$<br>我们可以通过这个SSE公式来评估我们的直线的误差，不断动态调整我们的直线，尽可能逼近最小误差</p><p>这个时候又会有另外一个疑问，<strong>误差评判标准是唯一不变的吗？</strong></p><p>针对这个问题，马克思曾说过：要具体问题具体分析。因此损失函数的选择不是唯一的，但是有些函数常常会被我们用到，举例如下：</p><ul><li>均方误差MSE</li></ul><p>$$<br>\frac{1}{n}\sum_{i=1}^{n}(y_i-\hat y_i)^2<br>$$</p><ul><li>均方根误差RMSE</li></ul><p>$$<br>\sqrt{\frac{1}{n}\sum_{i=1}^{n}(y_i-\hat y_i)^2}<br>$$</p><ul><li>平均绝对误差MAE</li></ul><p>$$<br>\frac{1}{n}\sum_{i=1}^{n}|y_i-\hat y_i|<br>$$</p><ul><li>根均方百分比误差RMSPE</li></ul><p>$$<br>\frac{1}{n}\sqrt{\sum_{i=1}^{n}(\frac{y_i-\hat y_i}{y_i})^2}<br>$$</p><p>由于篇幅有限加上初期接触，这里不再过多拓展，更多详情在<a href="https://zhuanlan.zhihu.com/p/58883095">损失函数拓展篇</a></p><p>这个时候就会有人说，是不是我选择了一个好的损失函数，并且使其损失值最小化。我的模型就可以在工业应用中有着优秀表现呢？</p><p>答案可能是不一定的，还是那句话具体问题要具体分析，因此我们引入了另外一个评估角度——评价指标</p><p><strong>什么是评价指标（evaluation metric）？</strong></p><p>既然要去评价一个东西，那必须多维度全方面的去评估，因此机器学习中给出了一些常用的评价指标。</p><p>这里我们以“二分类”问题为例，所谓二分类就是把一个东西分成两类，看各自分类的正确率和错误率。</p><ul><li>Confusion Matrix（混淆矩阵）</li></ul><table style="text-align:center">    <tbody><tr>        <td rowspan="2">真实情况</td>        <td colspan="2">预测结果</td>    </tr>    <tr>        <td>正例</td>        <td>反例</td>    </tr>    <tr>        <td>正例(P)</td>        <td>TP（真正例）</td>        <td>FN（假反例）</td>    </tr>    <tr>        <td>反例(N)</td>        <td>FP（假正例）</td>        <td>TN（真反例）</td>    </tr></tbody></table><p>​    </p><ul><li>Accuracy（准确率）</li></ul><p>真实情况和预测结果一致的样本占总样本的比例<br>$$<br>Accuracy =\frac{TP+TN}{P+N}<br>$$</p><ul><li>Precision（精准率）(又称查准率)</li></ul><p>被分为正例中真实情况为正例的比例<br>$$<br>Precision =\frac{TP}{TP+FP}<br>$$</p><ul><li>Recall（召回率）（又称查全率）</li></ul><p>真实情况中正例被正确分类的比例<br>$$<br>Recall =\frac{TP}{TP+FN}<br>$$</p><ul><li>F1 Score（F1分数）</li></ul><p>F1值是评估二元分类模型性能中精准性和召回率综合效果的指标<br>$$<br>F_1 =\frac{2·Precision·Recall}{Precision+Recall}=\frac{2TP}{2TP+TP+FN}<br>$$</p><ul><li>AUC（ROC曲线下面积）</li></ul><p>AUC的值可以表示为预测模型对于随机选择一个正样本和一个负样本能够给出正确的分类预测的概率大小。因此AUC的值越大，说明模型的分类效果越优秀</p><p>ROC曲线以真阳性率为纵坐标，以假阳性率为横坐标绘制的性能评价曲线。</p><p>其中真阳性率为<br>$$<br>\frac{TP}{P}<br>$$<br>假阳性率为<br>$$<br>\frac{FP}{N}<br>$$<br><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230601110704055.png" alt="image-20230601110704055"></p><p>ROC曲线越靠近左上角，说明其对应模型越可靠。ROC曲线下面的面积（Area Under Curve, AUC）越大，模型越可靠。</p><ul><li>R-squared（R平方）</li></ul><p>R方，决定系数，又称拟合优度，通常用来描述数据对模型拟合程度的好坏，表示自变量X对因变量Y的解释程度。R方的取值在[0,1]之间，越接近1，说明回归拟合效果越好。比如R方=0.5，那么说明自变量可以解释因变量50%的变化原因。</p><p>$$<br>R^2 = 1-\frac{\sum_{i=1}^{n}(y_i-\hat y_i)^2}{\sum_{i=1}^{n}(y_i-\bar y_i)^2} = 1-\frac{SSE}{SST}=\frac{SSR}{SST}<br>$$<br><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230601112430309.png" alt="image-20230601112430309"></p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230601112350131.png" alt="image-20230601112350131"></p><h1 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h1><p>针对前面的铺垫内容，我们来开始对线性模型的具体学习，一般我们在实际应用中待检测的物体都有多种属性，根据多个属性值x来确定最终的结果值y。用数学描述如下：<br>$$<br>属性值x =\left(<br>\begin{matrix}<br> x_{1}  \<br> x_{2} \<br> \vdots  \<br> x_{d}  \<br>\end{matrix}<br>\right) </p><p>对应属性值的权重值w=\left(<br>\begin{matrix}<br> w_{1}  \<br> w_{2} \<br> \vdots  \<br> w_{d}  \<br>\end{matrix}<br>\right)<br>$$</p><p>线性回归模型：<br>$$<br>f(x)=w_1x_1+w_2x_2+…+w_dx_d+b<br>$$<br>向量形式：<br>$$<br>f(x)=w^Tx+b<br>$$</p><p>将问题抽象成数学公式后，就转化成了对w、b值进行求解的数学问题，那<strong>如何求解出w和b呢？</strong></p><p>上一节讲到的损失函数就是重要的解题依据，我们采用均方误差最小化的形式来使f(x)无限逼近真实值，从而确定w和b</p><p>首先对于单个属性值的预测结果<br>$$<br>f(x_i)=wx_i+b 使得 f(x_i)\backsim y_i<br>$$</p><p>使得均方误差最小化：（因为1/m是固定值，不影响最后结果可以省去）<br>$$<br>(w^*,b^*)=argmin\sum_{i=1}^{m}(f(x_i)-y_i)^2=argmin\sum_{i=1}^{m}(y_i-wx_i-b)^2=argminE_{(w,b)}<br>$$</p><ul><li>应用：最小二乘法：找到一条直线，使得所有样本到直线上的欧式距离之和最小</li></ul><p>分别对w、b求导可得</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230602182910621.png" alt="image-20230602182910621"><br>$$<br>\frac{\partial E_{(w,b)} }{\partial w}=2(w\sum_{i=1}^{m}x_i^2-\sum_{i=1}^{m}(y_i-b)x_i)<br>$$</p><p>$$<br>\frac{\partial E_{(w,b)}}{\partial b}=2(mb-\sum_{i=1}^{m}(y_i-wx_i))<br>$$</p><p>令导数值为0得到w、b表达式</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230602182938877.png" alt="image-20230602182938877"></p><h2 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h2><p>上述我们对单个属性对应的单个w和b进行计算，但是在实际应用中，样本数据中可能会有多个属性，他们共同影响着最终的预测值f(x)，因此我们要把一维的情况拓展到多维，得到更一般的表达式：<br>$$<br>f(x_i)=w^Tx_i+b,使得f(x_i)\backsim y_i<br>$$</p><p>将w和</p><p>吸收入向量中：<br>$$<br>\hat{w}=\left(<br>\begin{matrix}<br> w_{1}  \<br> w_{2} \<br> \vdots  \<br> w_{d}  \<br> b  \<br>\end{matrix}<br>\right) = \left(<br>\begin{matrix}<br> w \<br> b  \<br>\end{matrix}<br>\right)<br>$$</p><p>$$<br>X = \left[<br>\begin{matrix}<br> x_{11}      &amp; x_{12}      &amp; \cdots &amp; x_{1d} &amp; 1  \<br> x_{21}      &amp; x_{22}      &amp; \cdots &amp; x_{2d} &amp; 1     \<br> \vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots \<br> x_{m1}      &amp; x_{m2}      &amp; \cdots &amp; x_{md} &amp; 1      \<br>\end{matrix}<br>\right] = \left[<br>\begin{matrix}<br> x_1^T      &amp; 1    \<br> x_2^T      &amp; 1    \<br> \vdots &amp; \vdots  \<br> x_m^T      &amp; 1     \<br>\end{matrix}<br>\right] = \left[<br>\begin{matrix}<br> X_1\<br> X_2\<br> \vdots \<br> X_m\<br>\end{matrix}<br>\right]<br>$$</p><p>所有样本点对应的真实值：<br>$$<br>y = \left(<br>\begin{matrix}<br> y_{1}  \<br> y_{2} \<br> \vdots  \<br> y_{m}  \<br>\end{matrix}<br>\right)<br>$$<br>对于单个样本的预测值可以如下式子表示：<br>$$<br>f(x_1) = x_1^T · w + b = X_1·\hat{w}<br>$$<br>所有样本的预测值可以如下式子表示：<br>$$<br>f(x) = X\hat{w}<br>$$<br>因此多元情况下的差值函数也类似于单元，可以利用向量进行运算。<br>$$<br>差值² = (y_i-f(x_i))^2 = (y-X\hat{w})^2=(y-X\hat{w})^T(y-X\hat{w})<br>$$<br>利用最小二乘法来找到合适的w、b值<br>$$<br>(w^*,b^*)=\hat{w}^*=argmin(y-X\hat{w})^T(y-X\hat{w})<br>$$</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230602221600275.png" alt="image-20230602221600275"><br>$$<br>\frac{\partial E_{\hat{w}}}{\partial \hat{w}} = 2X^T(X\hat{w}-y)<br>$$</p><p>$$<br>\hat{w}^* = (X^TX)^{-1}X^Ty<br>$$</p><p>$$<br>f(\hat{x}_i) = X\hat{w} = \hat{x}_i(X^TX)^{-1}X^Ty<br>$$</p><p>阅读到这里我们要去思考一个问题，就是对于X^TX这个矩阵，它<strong>是否一定可逆呢？</strong></p><p>答案是不一定的，因此可能在实际求解中，w有多个值，均可以使差值最小化。</p><p><strong>拓展知识：</strong><br>$$<br>\frac{\partial (x^T A x)}{\partial x}=Ax+A^Tx，其中A是常数矩阵<br>$$</p><p>$$<br>\frac{\partial(x^T \alpha)}{\partial x}=\frac{\partial(\alpha^Tx)}{\partial x}=\alpha，其中a为常数向量<br>$$</p><h2 id="广义线性模型"><a href="#广义线性模型" class="headerlink" title="广义线性模型"></a>广义线性模型</h2><p>针对之前学习的线性回归模型思考几个问题：</p><ul><li>x与y之间的变化不是线性的，存在非线性关系还可以像之前那样定义吗？</li><li>预测数据和真实之间的差值不是常数，且随x变化，如何来界定呢？</li><li>线性回归假设在因变量正态分布的前提上，导致因变量必须是连续的，若是离散值如何处理呢？</li></ul><p>因此在原来线性回归的基础上又衍生出了种类繁多的线性类模型。</p><p>在线性回归基础上，在等号的左边或右边加上了一个函数，从而能够让模型更好的捕捉一般规律，此时该模型就被称为广义线性模型，该函数就被称为联系函数。<br>广义线性模型的提出初衷上还是为了解决非线性相关的预测问题。</p><p>$$<br>y = g^{-1}(w^Tx+b) 其中g(·)是联系函数<br>$$</p><p><a href="https://www.bilibili.com/video/BV1gL411G7rA/?p=2&amp;spm_id_from=pageDriver&amp;vd_source=bec2125737739866803f91c8ef193b50">实战解析</a>（讲的很好）</p><h2 id="逻辑回归模型（对数几率回归）"><a href="#逻辑回归模型（对数几率回归）" class="headerlink" title="逻辑回归模型（对数几率回归）"></a>逻辑回归模型（对数几率回归）</h2><p>事先申明，虽然它叫逻辑“回归”，但是它的主要任务是进行二分类。</p><p><strong>几率（odd）与对数几率</strong></p><p>几率不是概率，而是一个事件发生与不发生的概率的比值。假设某件事发生的概率为p，则该件事不发生的概率为1-p，则该事件的几率：<br>$$<br>odd(p)=\frac{p}{1-p}<br>$$<br>在几率的基础上取e为底的对数，怎么这件事的对数几率（logit）：<br>$$<br>logit(p)=ln\frac{p}{1-p}<br>$$<br><strong>对数几率模型</strong></p><p>如果我们将对数几率看成是一个函数，并将其作为联系函数，则该广义线性模型为：<br>$$<br>g(y)=ln\frac{y}{1-y}=\hat w^T·\hat x<br>$$<br>可以将其反解出来：</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230603112016006.png" alt="image-20230603112016006"></p><p>我们将其抽象成数学公式的话，其实可以表示为：<br>$$<br>f(z) =\frac{1}{1+e^{-z}}<br>$$<br>那我们将这个图像绘制出来看看它的特性：</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230603112413160.png" alt="image-20230603112413160"> </p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230603112455478.png" alt="image-20230603112455478"></p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230603225320507.png" alt="image-20230603225320507"></p><p>读到这里大家可能会产生疑问：</p><ul><li><p>为什么非得探讨对数的情况？指数、绝对值情况不可以吗？</p></li><li><p>为什么最后是sigmoid函数，不可以是其他的函数吗？</p></li></ul><p><a href="https://www.bilibili.com/video/BV13X4y1R7im/?spm_id_from=333.788&amp;vd_source=bec2125737739866803f91c8ef193b50">拓展了解广义线性回归</a></p><p>数学基础：<a href="https://www.bilibili.com/video/BV1EA411p7xP/?spm_id_from=333.337.search-card.all.click&amp;vd_source=bec2125737739866803f91c8ef193b50">伯努利分布</a>、<a href="https://www.bilibili.com/video/BV1QM4y167oZ/?spm_id_from=333.788&amp;vd_source=bec2125737739866803f91c8ef193b50">极大似然估计</a>、<a href="https://www.bilibili.com/video/BV16s411k7bq/?spm_id_from=333.788.recommend_more_video.-1&amp;vd_source=bec2125737739866803f91c8ef193b50">高斯(正态)分布</a>、<a href="https://www.bilibili.com/video/BV18P4y1j7uH/?spm_id_from=333.337.search-card.all.click&amp;vd_source=bec2125737739866803f91c8ef193b50">梯度下降</a></p><p><strong>引入了sigmoid函数，我们可以做什么？</strong></p><p>我们假设有一个分类任务，我们要求出正例和反例各自的概率，不妨假设预测函数就是sigmoid函数，具体示例如下：<br>$$<br>h_{\theta}(x)=g({\theta}^Tx)=\frac{1}{1+e^{  {-\theta}^Tx}  } ，其中\theta = (w;b)<br>$$</p><p>$$<br>正例：P(y=1|x;\theta)=h_{\theta}(x) 反例：P(y=0|x;\theta)=1-h_{\theta}(x)整合：P(y|x;\theta)=(h_{\theta}(x))^y(1-h_{\theta}(x))^{1-y} ，其中二分类任务y只取0,1<br>$$</p><p>似然函数：<br>$$<br>L(\theta)=\prod_{i=1}^mP(y_i|x_i;\theta) =\prod_{i=1}^m(h_{\theta}(x_i))^{y_i}(1-h_{\theta}(x_i))^{1-y_i}<br>$$</p><p>概率的连乘会使最后数据过小无法有效计算，想办法消去连乘，便引进了对数似然函数：<br>$$<br>l(\theta)=logL(\theta)=\sum_{i=1}^{m}(y_ilogh_\theta(x_i)+(1-y_i)log(1-h_\theta(x_i)))<br>$$<br>此时要求对数似然函数的最大值：但是求最大是一个梯度上升的问题，我们平常所熟悉的是梯度下降的问题，那就要进行问题的转化。<br>$$<br>J(\theta)=- \frac{1}{m}l(\theta)<br>$$<br>利用梯度下降方法求出迭代方向（即导数值）</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230603225351181.png" alt="image-20230603225351181"></p><p>$$<br>x_i^j 表示第i个样本的第j个特征<br>$$<br>参数更新：<br>$$<br>\theta_j :=\theta_j-\alpha\frac{1}{m}\sum_{i=1}^{m}(h_\theta(x_i)-y_i)x_i^j<br>$$<br>这个式子中的α表示更新的步长（学习率），后面表示方向。方向乘以步长表示我要更新的内容</p><p>拓展：多分类的softmax</p><h2 id="类别不平衡问题"><a href="#类别不平衡问题" class="headerlink" title="类别不平衡问题"></a>类别不平衡问题</h2><p>什么时候需要去处理类别不平衡的问题：</p><p>当一个样本中的“小类”比样本中的“大类”更为重要时才需要对类别不平衡进行处理。</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230604011031730.png" alt="image-20230604011108746"></p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230604011043537.png"></p><p>推荐讲解：<a href="https://www.bilibili.com/video/BV1tV4y1674V?p=21&amp;vd_source=bec2125737739866803f91c8ef193b50">周志华老师西瓜书</a></p><p><strong>本文为机器学习入门篇，暂时不对复杂问题进行探讨。对于中间提到的公式最好是手动推导！</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/21/ke-yan-ji-chu-zhi-shi/"/>
      <url>/2023/05/21/ke-yan-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h1><ul><li><p>SCI《科学引文索引》期刊分为四部分：</p><ul><li><p>科学引文索引（Science Citation Index Expanded）</p></li><li><p>社会科学引文索引（Social Sciences Citation Index）</p></li><li><p>艺术与人文文献索引（Arts and Humanities Citation Index）</p></li><li><p>新兴科学引文索引（Emerging Sources Citation Index）</p></li></ul></li><li><p>EI《工程索引》</p><ul><li>范围高于SCI</li></ul></li><li><p>CPCI/ISTP会议（科技会议录索引）</p></li></ul><h2 id="jcr"><a href="#jcr" class="headerlink" title="jcr"></a>jcr</h2><ul><li>Q1（前25%）</li><li>Q2（26%-50%）</li><li>Q3（51%-75%）</li><li>Q4（76%-100%）</li></ul><h2 id="中科院"><a href="#中科院" class="headerlink" title="中科院"></a>中科院</h2><ul><li>1区（前5%）</li><li>2区（6%-20%）</li><li>3区（21%-50%）</li><li>4区（51%-100%）</li></ul><h1 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h1><ul><li>自然科学</li><li>社会科学</li><li>艺术与人文科学</li></ul><h1 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h1><ul><li><a href="https://www.webofscience.com/wos/alldb/basic-search">https://www.webofscience.com/wos/alldb/basic-search</a></li></ul><h1 id="科普知识"><a href="#科普知识" class="headerlink" title="科普知识"></a>科普知识</h1><ul><li>影响因子</li></ul><p>$$<br>if = \frac{期刊发表论文被引用的次数}{总共发表论文的总数}<br>$$</p><h1 id="期刊查询"><a href="#期刊查询" class="headerlink" title="期刊查询"></a>期刊查询</h1><h2 id="中文期刊"><a href="#中文期刊" class="headerlink" title="中文期刊"></a>中文期刊</h2><ul><li>知网（<a href="https://navi.cnki.net/knavi/#%EF%BC%89">https://navi.cnki.net/knavi/#）</a></li></ul><h2 id="外文期刊"><a href="#外文期刊" class="headerlink" title="外文期刊"></a>外文期刊</h2><ul><li>letpub（<a href="https://www.letpub.com.cn/index.php?page=journalapp%EF%BC%89">https://www.letpub.com.cn/index.php?page=journalapp）</a></li><li>小木虫</li></ul><h2 id="计算机期刊"><a href="#计算机期刊" class="headerlink" title="计算机期刊"></a>计算机期刊</h2><ul><li>中国计算机协会（CCF）（<a href="https://www.ccf.org.cn/Academic_Evaluation/By_category/%EF%BC%89">https://www.ccf.org.cn/Academic_Evaluation/By_category/）</a><ul><li>A类</li><li>B、C类</li></ul></li><li>Computer Science Conference Rankings (CORE) （顶会）</li><li>计算机学报</li><li>软件学报</li><li>计算机研究与发展</li></ul><h2 id="刊号"><a href="#刊号" class="headerlink" title="刊号"></a>刊号</h2><ul><li>CN：国内刊号</li><li>ISSN：国外刊号<ul><li>较为容易申请</li></ul></li></ul><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><ul><li>北大核心（北大中文核心)<ul><li>作为<strong>普及最广</strong>的北大核心；</li></ul></li><li>南大核心（中文社会科学引文索引(CSSCI)来源期刊）<ul><li>作为<strong>最权威</strong>的南大核心；</li></ul></li><li>科技核心（中国科技论文统计源期刊(CSTPCD))<ul><li>又名“统计源核心”，全称“科技统计源核心期刊”。目录每年更新一次，分为社会科学卷和自然科学卷。可从中信所官网下载目录，<strong>知网上并不会标注</strong>。</li><li>作为医药机构的科核</li></ul></li><li>CSCD（中国科学引文数据库)<ul><li>作为理科的CSCD</li></ul></li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230521122607031.png" alt="image-20230521122607031"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/14/md-shu-xue-gong-shi/"/>
      <url>/2023/05/14/md-shu-xue-gong-shi/</url>
      
        <content type="html"><![CDATA[<p>插入格式</p><p><strong>$$ 数学公式 $$</strong><br>$$<br>y = ax + b<br>$$</p><table><thead><tr><th align="center">代码</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$x^{2}$</td><td align="center">上标</td></tr><tr><td align="center">$x_{i}$</td><td align="center">下标</td></tr><tr><td align="center">$\langle$</td><td align="center">⟨</td></tr><tr><td align="center">$\rangle$</td><td align="center">⟩</td></tr><tr><td align="center">${$</td><td align="center">{</td></tr><tr><td align="center">$}$</td><td align="center">}</td></tr><tr><td align="center">$\frac{x}{y} $</td><td align="center">分数</td></tr><tr><td align="center">$\sqrt{2}$</td><td align="center">根号</td></tr><tr><td align="center">$\sqrt[n]{5}$</td><td align="center">n次根号</td></tr><tr><td align="center">$\vec{x}$</td><td align="center">向量 x</td></tr><tr><td align="center">$\overleftarrow{x}$</td><td align="center">x 上方左箭头</td></tr><tr><td align="center">$\overrightarrow{x}$</td><td align="center">x 上方右箭头</td></tr><tr><td align="center">$\leftarrow$</td><td align="center">左箭头</td></tr><tr><td align="center">$\rightarrow$</td><td align="center">右箭头</td></tr><tr><td align="center">$\uparrow$</td><td align="center">向上的箭头</td></tr><tr><td align="center">$\downarrow$</td><td align="center">向下的箭头</td></tr><tr><td align="center">$\Leftarrow$</td><td align="center">双向左箭头(其余同例)</td></tr><tr><td align="center">$a \otimes b$</td><td align="center">a⊗b 外积</td></tr><tr><td align="center">$\langle a , b \rangle$</td><td align="center">⟨a,b⟩ 内积</td></tr><tr><td align="center">$a \cdot b$</td><td align="center">a⋅b 点乘</td></tr><tr><td align="center">$a \times b$</td><td align="center">a×b 叉乘</td></tr><tr><td align="center">$\sin$</td><td align="center">sin</td></tr><tr><td align="center">$\angle A$</td><td align="center">∠A</td></tr><tr><td align="center">$\cong$</td><td align="center">≅</td></tr><tr><td align="center">$\backsim$</td><td align="center">∽</td></tr><tr><td align="center">$\log$</td><td align="center">log</td></tr><tr><td align="center">$\emptyset$</td><td align="center">∅</td></tr><tr><td align="center">$\in$</td><td align="center">∈</td></tr><tr><td align="center">$\notin$</td><td align="center">不属于</td></tr><tr><td align="center">$\subset$</td><td align="center">真包含于</td></tr></tbody></table><p>$$<br>\int_{0}^{1}{x^{3}}dx<br>$$</p><p>$$<br> \lim_{x \to \infty} \frac{1}{n(n+1)}<br>$$</p><p>$$<br>\sum_{i=0}^{n} x_i<br>$$</p><p>$$<br>\sum_{i=1}^n \frac{1}{i^2} \quad and \quad \prod_{i=1}^n \frac{1}{i^2} \quad and \quad \bigcup_{i=1}^{2} \Bbb{R}<br>$$</p><p>$$<br>f(x)= \begin{cases} 0,&amp; \text{if x is even} \ 1, &amp; \text{if x is odd} \end{cases}<br>$$</p><p>$$<br>\begin{matrix}<br>   1 &amp; 2 &amp; 3 \<br>   4 &amp; 5 &amp; 6 \<br>   7 &amp; 8 &amp; 9<br>  \end{matrix}<br>$$</p><p>$$<br> \left{<br> \begin{matrix}<br>   1 &amp; 2 &amp; 3 \<br>   4 &amp; 5 &amp; 6 \<br>   7 &amp; 8 &amp; 9<br>  \end{matrix}<br>  \right} \tag{2}<br>$$</p><p>$$<br>\left[<br> \begin{matrix}<br>   1 &amp; 2 &amp; 3 \<br>   4 &amp; 5 &amp; 6 \<br>   7 &amp; 8 &amp; 9<br>  \end{matrix}<br>  \right]<br>$$</p><p>$$<br>\left[<br>\begin{matrix}<br> 1      &amp; 2      &amp; \cdots &amp; 4      \<br> 7      &amp; 6      &amp; \cdots &amp; 5      \<br> \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br> 8      &amp; 9      &amp; \cdots &amp; 0      \<br>\end{matrix}<br>\right]<br>$$</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/14/ji-qi-xue-xi/"/>
      <url>/2023/05/14/ji-qi-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h1><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230515215453568.png" alt="image-20230515215453568"></p><p>线性模型试图学得一个通过属性的线性组合来进行预测的函数<br>$$<br>f(x)=w_1x_1+w_2x_2+…+w_dx_d+b<br>$$<br>向量形式：<br>$$<br>f(x)=w^Tx+b<br>$$</p><h2 id="单线性回归"><a href="#单线性回归" class="headerlink" title="单线性回归"></a>单线性回归</h2><p>$$<br>f(x_i)=wx_i+b 使得 f(x_i)\backsim y_i<br>$$</p><p>离散属性的处理：若有“序”（order），则连续化；否则，转化为k维向量</p><p>均方误差最小化：<br>$$<br>(w^*,b^*)=argmin\sum_{i=1}^{m}(f(x_i)-y_i)^2=argmin\sum_{i=1}^{m}(y_i-wx_i-b)^2<br>$$</p><ul><li>应用：最小二乘法：找到一条直线，使得所有样本到直线上的欧式距离之和最小</li></ul><p>分别对w、b求导可得<br>$$<br>\frac{\partial E(w,b)}{\partial w}=2(w\sum_{i=1}^{m}x_i^2-\sum_{i=1}^{m}(y_i-b)x_i)<br>$$</p><p>$$<br>\frac{\partial E(w,b)}{\partial b}=2(mb-\sum_{i=1}^{m}(y_i-w_ix_i))<br>$$</p><p>令导数值为0得到w、b表达式</p><h2 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h2><p>$$<br>f(x_i)=w^Tx_i+b,使得f(x_i)\backsim y_i<br>$$</p><p>将w和b吸收入向量中：<br>$$<br>\hat{w}=(w;b)<br>$$</p><p>$$<br>X = \left[<br>\begin{matrix}<br> x_{11}      &amp; x_{12}      &amp; \cdots &amp; x_{1d} &amp; 1  \<br> x_{21}      &amp; x_{22}      &amp; \cdots &amp; x_{2d} &amp; 1     \<br> \vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots \<br> x_{m1}      &amp; x_{m2}      &amp; \cdots &amp; x_{md} &amp; 1      \<br>\end{matrix}<br>\right] = \left[<br>\begin{matrix}<br> x_1^T      &amp; 1    \<br> x_2^T      &amp; 1    \<br> \vdots &amp; \vdots  \<br> x_m^T      &amp; 1     \<br>\end{matrix}<br>\right]<br>$$</p><p>$$<br>(w^*,b^*)=\hat{w}^*=argmin(y-X\hat{w})^T(y-X\hat{w})<br>$$</p><p>$$<br>\frac{\partial E_{\hat{w}}}{\partial \hat{w}} = 2X^T(X\hat{w}-y)<br>$$</p><p>$$<br>\hat{w}^* = (X^TX)^{-1}X^Ty<br>$$</p><p>$$<br>f(\hat{x}_i) = X\hat{w} = \hat{x}_i(X^TX)^{-1}X^Ty<br>$$</p><h2 id="广义线性模型"><a href="#广义线性模型" class="headerlink" title="广义线性模型"></a>广义线性模型</h2><p>$$<br>y = g^{-1}(w^Tx+b) 其中g(·)是联系函数<br>$$</p><h2 id="对数几率回归"><a href="#对数几率回归" class="headerlink" title="对数几率回归"></a>对数几率回归</h2><h3 id="二分类问题"><a href="#二分类问题" class="headerlink" title="二分类问题"></a>二分类问题</h3><ul><li>TP 将正类预测为正类</li><li>FN 将正类预测为负类</li><li>FP 将负类预测为正类</li><li>TN 将负类预测为负类</li><li>精确率</li></ul><p>$$<br>P = \frac{TP}{TP+FP}<br>$$</p><ul><li>召回率</li></ul><p>$$<br>R = \frac{TP}{TP+FN}<br>$$</p><ul><li>调和均值</li></ul><p>$$<br>\frac{2}{F_1}=\frac{1}{P}+\frac{1}{R}<br>$$</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230531204551493.png" alt="image-20230531204551493"></p><ul><li>输出标记 y∈{0,1} </li><li>预测值 z</li></ul><p>$$<br>y =\frac{1}{1+e^{-z}}=\frac{1}{1+e^{-(w^Tx+b)}}<br>$$</p><p>$$<br>ln\frac{y}{1-y} = w^Tx+b ,其中\frac{y}{1-y}称为几率(odds)<br>$$</p><ul><li>类别不平衡问题<ul><li>正类和负类个数并不相同，差距较大</li></ul></li></ul><p>$$<br>原先 \frac{y}{1-y}&gt;1,则预测为正例。判断条件改进为\frac{y}{1-y}&gt;\frac{m^+}{m^-}<br>$$</p><h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><h2 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h2><p>“信息熵”是度量样本集合纯度的指标，针对数据集D的信息熵为：<br>$$<br>Ent(D) = -\sum_{k=1}^{|y|}p_klog_2p_k<br>$$<br>Ent(D)越小，D纯度越高</p><p>针对属性a对样本集D进行划分所获得的“信息增益”<br>$$<br>Gain(D,a)=Ent(D)-\sum_{v=1}^{V} \frac{|D^v|}{|D|}Ent(D^v)<br>$$<br>信息增益大的用来划分属性，但是有些属性划分不具有泛化能力（如：序号）</p><h2 id="增益率"><a href="#增益率" class="headerlink" title="增益率"></a>增益率</h2><p>$$<br>Gain-ration(D,a)=\frac{Gain(D,a)}{IV(a)}<br>$$</p><p>$$<br>IV(a) = -\sum_{v=1}^{V}\frac{|D^v|}{|D|}log_2\frac{|D^v|}{|D|}<br>$$</p><p>先从候选划分属性中找出信息增益高于平均水平的属性，再从中选择增益率最高的</p><h2 id="基尼指数"><a href="#基尼指数" class="headerlink" title="基尼指数"></a>基尼指数</h2><p>数据集D的纯度用来度量：<br>$$<br>Gini(D)=\sum_{k=1}^{|y|}\sum_{k’≠k}p_kp_{k’}=1-\sum_{k=1}^{|y|}p_k^2<br>$$</p><h2 id="剪枝处理-pruning"><a href="#剪枝处理-pruning" class="headerlink" title="剪枝处理(pruning)"></a>剪枝处理(pruning)</h2><p>解决“过拟合”现象</p><h3 id="预剪枝"><a href="#预剪枝" class="headerlink" title="预剪枝"></a>预剪枝</h3><ul><li>提前不让树枝长出来</li><li>最大深度限制：设定决策树的最大深度，当达到设定的最大深度时停止分支。</li><li>叶子节点样本数限制：设置一个阈值，当某个节点上的样本数量小于该阈值时，停止分支，将该节点作为叶子节点。</li><li>不纯度减小阈值：计算每个节点的不纯度（如基尼指数、熵），设定一个阈值，当分支后不纯度的减小量低于该阈值时，停止分支。</li><li>类别纯度阈值：判断节点上的样本是否属于同一类别，当节点的类别纯度达到设定阈值时，停止分支。</li><li>特征重要性评估：在决策树构建过程中，实时评估每个特征的重要性，当某个特征的重要性低于一定阈值时，停止分支。</li></ul><h3 id="后剪枝"><a href="#后剪枝" class="headerlink" title="后剪枝"></a>后剪枝</h3><ul><li>构建完整的决策树：使用训练数据构建完整的决策树，直到每个叶子节点都包含纯净的类别或达到预定的停止条件。</li><li>评估子树的准确性：对于每个非叶子节点，考虑其子树的整体准确性，可以使用交叉验证、验证集或其他评估方法来评估子树的性能。</li><li>执行剪枝操作：从决策树的底部开始逐步剪枝，将子树替换为叶子节点，并将叶子节点的类别设置为该子树中最常见的类别。然后，通过比较剪枝前后的整体准确性来确定是否剪枝。</li><li>重复剪枝操作：循环执行步骤3，逐步剪枝决策树的其他子树，直到不能再获得更好的性能为止。</li></ul><h2 id="连续与缺失值"><a href="#连续与缺失值" class="headerlink" title="连续与缺失值"></a>连续与缺失值</h2><h1 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h1><h2 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h2><ul><li>二分类的线性模型</li><li>梯度下降</li></ul><p>一个超平面S能够将数据集的正实例点和负实例点完全正确地划分到超平面的两侧</p><ul><li>损失函数<ul><li>输入空间R中任一点x到超平面S的距离</li></ul></li></ul><p>$$<br>d = \frac{1}{||w||}|w·x_0+b|<br>$$</p><p>$$<br>范式||w|| = \sqrt{w_1^2+w_2^2+…+w_n^2}<br>$$</p><ul><li>误分类</li></ul><p>$$<br>-y_i(w·x_i+b)&gt; 0<br>$$</p><ul><li>感知机学习损失函数</li></ul><p>$$<br>L(w,b)=-\sum_{x_i∈M}y_i(w·x_i+b)<br>$$</p><p>感知机学习的策略是在假设空间中选取损失函数式最小的模型参数w，b</p><ul><li>迭代求最好的w、b值</li><li>η（0 &lt; η ≤ 1）是学习步长，又称学习率 </li></ul><p>$$<br>\frac{\partial L}{\partial w}=-\sum_{i=1;x∈M}^{n}y_ix_i<br>$$</p><p>$$<br>\frac{\partial L}{\partial b}=-\sum_{i=1;x∈M}^{n}y_i<br>$$</p><p>$$<br>w = w + \eta \frac{\partial L}{\partial w}<br>$$</p><p>$$<br>b = b + \eta \frac{\partial L}{\partial b}<br>$$</p><ul><li>感知机算法过程<ul><li>选取初值w、b</li><li>在训练集中选取数据（x，y）</li><li>如果y(wx+b) ≤ 0,</li><li>改变w、b的值</li><li>重复至第二步，直至训练集中没有误分类点</li></ul></li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230519191455625.png" alt="image-20230519191455625"></p><p>证明上述结论：<br>$$<br>\hat{w}<em>k·\hat{w}</em>{opt} ≥ k \eta \gamma<br>$$</p><p>$$<br>||w_k||^2 ≤ k \eta^2 \gamma^2<br>$$</p><ul><li>对偶形式</li></ul><p>$$<br>w = \sum_{i=1}^{N} \alpha_iy_ix_i<br>$$</p><p>$$<br>b = \sum_{i=1}^{N}\alpha_iy_i<br>$$</p><p>这里的α就是误分类点出现的次数</p><ul><li>Gram矩阵</li></ul><p>$$<br>G = [x_i,x_j]_{N×N}<br>$$</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230528102836690.png" alt="image-20230528102836690"></p><h1 id="K近邻"><a href="#K近邻" class="headerlink" title="K近邻"></a>K近邻</h1><p> 给定一个数据集，对于新输入的实例，在训练数据集中找到与该实例最接近的k个实例，这k个实例的多数属于哪个类，就把它划分到哪个类</p><p>三个参数</p><ul><li>距离度量<ul><li>欧式距离<ul><li>由于不同的距离度量所确定的最近邻点是不同的</li></ul></li></ul></li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230528161627276.png" alt="image-20230528161627276"></p><ul><li>k值的选择<ul><li>太小过拟合</li><li>太大无异议</li></ul></li><li>分类决策规则<ul><li>多数表决规则 = 经验风险最小化</li></ul></li></ul><h2 id="kd树"><a href="#kd树" class="headerlink" title="kd树"></a>kd树</h2><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230528170215517.png" alt="image-20230528170215517"></p><ul><li>kd树的查找</li></ul><p>kd树构建完毕后，利用kd树进行k近邻搜索。在kd树上进行近邻搜索时，很多时候可以不进入某个父节点的另一个子节点（省去了另一个子节点数据点的查找）。kd树查找的具体算法如下：<br>算法输入：构造完毕的kd树，需要分类的目标点x<br>算法输出：目标点x的k近邻点<br>算法过程：</p><p>（1）通过深度优先方法，在kd树中搜索到目标点的所在的叶节点。（注：该搜索并不能直接找到最近邻点）搜索方法如下，在搜索每一层的过程中，根据该层的分割特征的序数，来对目标点的该序数的特征进行分类（决定是进入左子节点还是右子节点）。<br>（2）以该叶节点作为当前的NN（最近邻）点，计算该叶节点与目标点的距离，并设为当前的最小距离。<br>（3）计算该叶节点父节点与目标点的距离，若小于当前的最小距离，则更新当前的最小距离以及当前的NN点（被覆盖的点先记录下来）<br>（4） 判断是否要进入父节点的另一个子节点：  判断方法为：计算父节点在其分割特征上的值距离目标点在该特征上的值的距离，若该距离小于当前的最小距离，则进入另一个子节点，否则不进入。既：检查另一子节点对应的区域是否与以目标点为球心，以目标点与当前的NN点的距离为半径的球体相交。若相交则进入，反正不进入。<br>            a）若不进入另一个子节点，则以此父节点视为叶节点，重复步骤3。<br>            b）若进入另一个子节点，则对右边节点以下的子树执行步骤1，找到新的叶节点。判断是否要更新NN点与当前最小距离。随后以该叶节点开始，重复步骤3。</p><p>以此类推，搜索过程中将不断向跟节点回退。在向根节点回退的过程中，不必再次进入从中退出的子节点，保证过程不会进入死循环。</p><p>5 当回退到根节点时（且以根节点与目标点的距离来更新最小距离与NN点后），最后的NN点即为x的最近邻点。且记录下来的所有NN点，对应的距离，最小的K个即为K近邻点。<br>如果实例点是随机分布的，则kd树搜索的平均及计算复杂度是O（logN）</p><h1 id="贝叶斯分类器"><a href="#贝叶斯分类器" class="headerlink" title="贝叶斯分类器"></a>贝叶斯分类器</h1><p><a href="https://www.bilibili.com/video/BV1m44y1r7gh/?spm_id_from=333.337.search-card.all.click&amp;vd_source=bec2125737739866803f91c8ef193b50">什么是贝叶斯？？</a></p><p><a href="https://www.bilibili.com/video/BV1E94y1o7pK/?spm_id_from=333.337.search-card.all.click&amp;vd_source=bec2125737739866803f91c8ef193b50">什么是正态分布？？</a></p><p>对给定的输入x，通过学习到的模型计算后验概率分布P，将后验概率最大的类作为x的类输出。——生成学习的方法<br>$$<br>P(Y=c_k|X=x)=\frac{P(X=x|Y=c_k)P(Y=c_k)}{\sum_{k}P(X=x|Y=c_k)P(Y=c_k)}<br>$$<br>朴素贝叶斯分类器<br>$$<br>y = f(x)= argmax\frac{P(Y=c_k)\quad\prod_jP(X^{(j)}=x^{(j)}|Y=c_k)}{\sum_{k}P(X=x|Y=c_k)\quad\prod_jP(X^{(j)}=x^{(j)}|Y=c_k)}<br>$$</p><p>因为分母对所以C_k都是相同的，所以：<br>$$<br>y = P(Y=c_k)\quad\prod_jP(X^{(j)}=x^{(j)}|Y=c_k)<br>$$<br>根据算数得出期望风险最小化准则就得到了后验概率最大化准则：<br>$$<br>f(x) = argmaxP(C_k|X=x)<br>$$<br><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230528225931821.png" alt="image-20230528225931821"></p><h1 id="逻辑斯蒂回归与最大熵模型"><a href="#逻辑斯蒂回归与最大熵模型" class="headerlink" title="逻辑斯蒂回归与最大熵模型"></a>逻辑斯蒂回归与最大熵模型</h1><h2 id="逻辑斯蒂回归"><a href="#逻辑斯蒂回归" class="headerlink" title="逻辑斯蒂回归"></a>逻辑斯蒂回归</h2><p>逻辑斯蒂分布中的分布函数和密度函数：<br>$$<br>F(x) = P(X≤x)=\frac{1}{1+e^{-(x-u)/r}}<br>$$</p><p>$$<br>f(x)=F^{‘}(x)=\frac{e^{-(x-u)/r}}{r(1+e^{-(x-u)/r})^2}<br>$$</p><p>F(x)关于点（u，½）中心对称<br>$$<br>F(-x+u)-1/2=-F(x-u)+1/2<br>$$<br><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230529105854849.png" alt="image-20230529105854849"></p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230529110514701.png" alt="image-20230529110514701"></p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230529110731102.png" alt="image-20230529110731102"></p><h2 id="最大熵模型"><a href="#最大熵模型" class="headerlink" title="最大熵模型"></a>最大熵模型</h2><p>在已有条件约束下，在模型集合中选择熵最大的模型（即最优化的模型）</p><p>熵：<br>$$<br>H(P) = -\sum_{x}P(x)logP(x)<br>$$</p><p>$$<br>0 ≤ H(P) ≤log|X| (|X|是X的取值个数)<br>$$</p><p>最大熵模型：<br>$$<br>H(P) = - um<br>$$</p><h1 id="集成学习"><a href="#集成学习" class="headerlink" title="集成学习"></a>集成学习</h1><h1 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h1><h1 id="降维与度量学习"><a href="#降维与度量学习" class="headerlink" title="降维与度量学习"></a>降维与度量学习</h1><h1 id="特征选择与系数学习"><a href="#特征选择与系数学习" class="headerlink" title="特征选择与系数学习"></a>特征选择与系数学习</h1><h1 id="计算学习理论"><a href="#计算学习理论" class="headerlink" title="计算学习理论"></a>计算学习理论</h1><h1 id="半监督学习"><a href="#半监督学习" class="headerlink" title="半监督学习"></a>半监督学习</h1><h1 id="概率图模型"><a href="#概率图模型" class="headerlink" title="概率图模型"></a>概率图模型</h1><h1 id="规则学习"><a href="#规则学习" class="headerlink" title="规则学习"></a>规则学习</h1><h1 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/15/conda-ming-ling/"/>
      <url>/2023/04/15/conda-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="conda命令"><a href="#conda命令" class="headerlink" title="conda命令"></a>conda命令</h1><p>conda下载包是通过一些chanel来访问下载的，原本内置的有一些chanel，另外一些包需要自己添加下载所需的chanel。</p><p>1.查看chanel：</p><pre class="line-numbers language-shell"><code class="language-shell">conda config --show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.添加chanel：</p><pre class="line-numbers language-shell"><code class="language-shell">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.删除chanel：</p><pre class="line-numbers language-shell"><code class="language-shell">conda config –remove channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.conda搜索某个包及可安装的版本信息（以scikit-learn包为例）：</p><pre class="line-numbers language-shell"><code class="language-shell">conda list                    #查看目前以安装的包conda env list                  #查看目前安装的虚拟环境conda search scikit-learn     #查看scikit-learn是否可安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5.conda安装指定版本的包：</p><pre class="line-numbers language-shell"><code class="language-shell">conda install scikit-learn=0.23.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.conda卸载包：</p><pre class="line-numbers language-shell"><code class="language-shell">conda uninstall scikit-learnconda remove [package] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>7.conda升级包：</p><pre class="line-numbers language-shell"><code class="language-shell">conda update scikit-learn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.conda缓存清理（conda报错segment fault的时候就是需要清理缓存哦）：</p><pre class="line-numbers language-shell"><code class="language-shell">conda clean -p      //删除没有用的包conda clean -t      //删除tar包conda clean -y --all //删除所有的安装包及cache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>9.conda创建环境，激活、使用、关闭：</p><pre class="line-numbers language-shell"><code class="language-shell">conda create -n myenv python=3.5    #创建python3.5名字叫myenv虚拟环境conda activate myenv                #开启myenv环境conda deactivate                    #关闭环境conda env list                      #显示所有的虚拟环境conda remove --name myenv --all     #删除创建的myenv环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.创建一个新环境</p><pre class="line-numbers language-shell"><code class="language-shell">conda create -n your_env_name python=X.X conda create --name your_env_name python=X.X-n即--name，your_env_name是你自定义的环境名称。例：conda create -n newenv python=3.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.激活某个环境</p><pre class="line-numbers language-shell"><code class="language-shell">Windows系统：conda activate your_env_nameLinux系统：source activate your_env_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>12.退出当前虚拟环境</p><pre class="line-numbers language-shell"><code class="language-shell">source deactivate  # Linux环境conda deactivate # Windows环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>13.删除某个虚拟环境：</p><pre class="line-numbers language-shell"><code class="language-shell">conda remove -n your_env_name --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>14.分享/备份环境<br>一个分享环境的快速方法就是给他一个你的环境的.yml文件。</p><p>首先激活到要分享的环境，在当前工作目录下生成一个environment.yml文件。</p><pre><code>conda env export &gt; environment.yml</code></pre><p>对方拿到environment.yml文件后，将该文件放在工作目录下，可以通过以下命令从该文件创建环境。</p><pre><code>conda env create -f environment.yml</code></pre><p>15.镜像源</p><pre><code>查看镜像源：conda config --show channels删除镜像源：conda config --remove channels xxx添加镜像源（如清华源）：conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --set show_channel_urls yesconda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/conda-forge/conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/pkgs/main/conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/bioconda/conda config --add channels http://mirrors.aliyun.com/anaconda/cloud/bioconda/conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/10/cv-shi-zhan/"/>
      <url>/2023/04/10/cv-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h1><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><pre class="line-numbers language-shell"><code class="language-shell">(base) $ conda config --add channels conda-forge(base) $ conda config --set channel_priority strict(base) $ conda create -y -n pydata-book python=3.10(base) $ conda activate pydata-book    //进入pydata-book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><pre class="line-numbers language-shell"><code class="language-shell">题外：尽量全部使用conda安装，不成功再用pip(pydata-book) $ conda install -y pandas jupyter matplotlibconda install lxml beautifulsoup4 html5lib openpyxl requests sqlalchemy seaborn scipy statsmodels patsy scikit-learn pyarrow pytables numba<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h2><pre class="line-numbers language-shell"><code class="language-shell">(pydata-book) ipythonIn [1]: a = 5In [2]: aOut[2]: 5In [3]: import numpy as npIn [4]: data = [np.random.standard_normal() for i in range(7)]In [5]: dataOut[5]: [-0.20470765948471295, 0.47894333805754824, -0.5194387150567381, -0.55573030434749, 1.9657805725027142, 1.3934058329729904, 0.09290787674371767]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Jupyter-Notebook"><a href="#Jupyter-Notebook" class="headerlink" title="Jupyter Notebook"></a>Jupyter Notebook</h2><pre class="line-numbers language-shell"><code class="language-shell">(pydata-book) Jupyter Notebook<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230415012644596.png" alt="image-20230415012644596"></p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230415012658168.png" alt="image-20230415012658168"></p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230423194432488.png" alt="image-20230423194432488"></p><ul><li>重命名：单击页面顶部的笔记本标题并键入新标题，完成后按 Enter</li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul><li><p>元组：元素不能随意更改</p><ul><li><p>字符串转元祖 </p><pre><code>tup = tuple('string')</code></pre></li><li><p>变量拆包：</p><pre><code>In [34]: values = 1, 2, 3, 4, 5In [35]: a, b, *rest = valuesIn [36]: aOut[36]: 1In [37]: bOut[37]: 2In [38]: restOut[38]: [3, 4, 5]</code></pre></li></ul></li><li><p>列表</p><ul><li>append</li><li>insert</li><li>pop</li><li>sort</li><li>切片</li></ul></li><li><p>字典</p><ul><li>del</li><li>pop</li><li>update</li></ul></li><li><p>集合</p></li></ul><h2 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h2><ul><li><p>匿名 (Lambda) 函数</p><ul><li><pre class="line-numbers language-python"><code class="language-python">equiv_anon <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">apply_to_list</span><span class="token punctuation">(</span>some_list<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> <span class="token punctuation">[</span>f<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> some_list<span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ints <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">203</span><span class="token punctuation">]</span><span class="token punctuation">:</span> apply_to_list<span class="token punctuation">(</span>ints<span class="token punctuation">,</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">203</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>打开文件</p><ul><li><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">233</span><span class="token punctuation">]</span><span class="token punctuation">:</span> path <span class="token operator">=</span> <span class="token string">"examples/segismundo.txt"</span>In <span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f <span class="token operator">=</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><pre><code>In [237]: f.close()</code></pre></li></ul></li></ul><h1 id="pytorch"><a href="#pytorch" class="headerlink" title="pytorch"></a>pytorch</h1><h2 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h2><ul><li>Theano<ul><li>TensorFlow</li><li>TensorFloweager</li></ul></li><li>Torch7<ul><li>pytorch+THNN</li><li>pytorch+Caffe2</li></ul></li><li>Caffe<ul><li>Caffe2</li><li>Pytorch1.0</li></ul></li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230414000644207.png" alt="image-20230414000644207"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/08/ai-ren-gong-zhi-neng/"/>
      <url>/2023/04/08/ai-ren-gong-zhi-neng/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>对于给定的<strong>任务T</strong>，在合理的<strong>性能度量方案P</strong>的前提下，程序可以自主学习<strong>任务T</strong>的<strong>经验E</strong>；随着提供合适、优质、大量的<strong>经验E</strong>，程序对于<strong>任务T</strong>的性能逐步提高</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230408212323444.png" alt="image-20230408212323444"></p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230408212650892.png" alt="image-20230408212650892"></p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230408212716772.png" alt="image-20230408212716772"></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>dataset 数据集</li><li>instance 示例(没有结果的)/sample 样本(有结果的)</li><li>attribute 属性/feature 特征</li><li> classification 分类</li><li>连续值 regression 回归</li><li>离散值</li><li>监督学习<ul><li>分类</li><li>回归</li></ul></li><li>无监督学习<ul><li>聚类（类内差距最小化，类间差距最大化）</li></ul></li><li>输入空间x → 输出空间y  映射f y=f(x)</li><li>泛化：训练模型适应新样本的能力</li><li>学习过程：在所以假设(hypothesis)组成的空间中进行搜索</li><li>归纳偏好：算法在学习过程中对某种类型假设的偏好</li><li>奥卡姆剃刀原理：若有多个假设与观察一致，则选最简单的那个</li><li>语义分割：图片中像素点分类从而进行物品的分类</li><li>VGG</li><li>ResNet</li><li>DensNet</li><li>YOLO系列</li><li>RCNN系列</li><li>SSD</li><li>DeepLab系列</li><li>U-Net</li><li>SAM</li></ul><h2 id="PAC"><a href="#PAC" class="headerlink" title="PAC"></a>PAC</h2><ul><li>概率近似准确</li></ul><p>$$<br>P(|f(x)-y|≤\epsilon)≥1-\delta<br>$$</p><h2 id="NFL定理"><a href="#NFL定理" class="headerlink" title="NFL定理"></a>NFL定理</h2><p>一个算法若在某些问题上比另一个算法好，必存在另一些问题一者比另一者好。</p><h2 id="三大问题"><a href="#三大问题" class="headerlink" title="三大问题"></a>三大问题</h2><ul><li><p>评估方法</p><ul><li>测试集应该与训练集“互斥”<ul><li>留出法<ul><li>分层采样</li><li>随机划分</li><li>测试集不能太大、太小</li></ul></li><li>K-折交叉验证法</li><li>自助法</li></ul></li></ul></li><li><p>性能度量</p></li><li><p>比较检验</p><ul><li><p>交叉验证t校验</p><ul><li>k折交叉验证</li></ul></li><li><p>McNemar检验（基于联列表，卡方检验）</p></li></ul></li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="前馈型神经网络"><a href="#前馈型神经网络" class="headerlink" title="前馈型神经网络"></a>前馈型神经网络</h3><h3 id="反馈型神经网络"><a href="#反馈型神经网络" class="headerlink" title="反馈型神经网络"></a>反馈型神经网络</h3><h3 id="自组织神经网络"><a href="#自组织神经网络" class="headerlink" title="自组织神经网络"></a>自组织神经网络</h3><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="分支一：计算机视觉（CV）"><a href="#分支一：计算机视觉（CV）" class="headerlink" title="分支一：计算机视觉（CV）"></a>分支一：计算机视觉（CV）</h3><h3 id="分支二：语音识别"><a href="#分支二：语音识别" class="headerlink" title="分支二：语音识别"></a>分支二：语音识别</h3><ul><li>鸡尾酒效应<ul><li>同时多个声音出现，计算机无法准确识别各个说话主体，无法进行排异</li></ul></li></ul><h3 id="分支三：文本挖掘-分类"><a href="#分支三：文本挖掘-分类" class="headerlink" title="分支三：文本挖掘/分类"></a>分支三：文本挖掘/分类</h3><ul><li>关键字</li></ul><h3 id="分支四：机器翻译（MT）"><a href="#分支四：机器翻译（MT）" class="headerlink" title="分支四：机器翻译（MT）"></a>分支四：机器翻译（MT）</h3><h3 id="分支五：机器人"><a href="#分支五：机器人" class="headerlink" title="分支五：机器人"></a>分支五：机器人</h3><h1 id="Python-机器学习"><a href="#Python-机器学习" class="headerlink" title="Python-机器学习"></a>Python-机器学习</h1><h2 id="工具包package类型"><a href="#工具包package类型" class="headerlink" title="工具包package类型"></a>工具包package类型</h2><ul><li>Numpy<ul><li>FFT/Gauss/LSQ/SVD</li><li><strong>ndarray</strong></li></ul></li><li>pandas<ul><li><strong>DataFrame</strong></li><li>Series(Excel/csv/tsv)</li></ul></li><li>scipy<ul><li>Gamma</li><li>Comb</li></ul></li><li>matplotlib</li><li>scikit-learn<ul><li>ML</li></ul></li><li>tensorflow(Keras)/pyTorch/Theano(Keras)/Caffe/PandlePandle<ul><li>DL</li></ul></li></ul><h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><ul><li>pip</li></ul><h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><ul><li>Anaconda</li><li>PyCharm</li></ul><h1 id="Numpy、matplotlib、pandas实操"><a href="#Numpy、matplotlib、pandas实操" class="headerlink" title="Numpy、matplotlib、pandas实操"></a>Numpy、matplotlib、pandas实操</h1><h2 id="随机点阵图"><a href="#随机点阵图" class="headerlink" title="随机点阵图"></a>随机点阵图</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true">#随机点阵图</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>x <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'go'</span><span class="token punctuation">,</span> markersize<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230409163113613.png" alt="image-20230409163113613"></p><h2 id="随机柱状图"><a href="#随机柱状图" class="headerlink" title="随机柱状图"></a>随机柱状图</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true">#随机柱状图</span>p <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>set_printoptions<span class="token punctuation">(</span>edgeitems<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span> suppress<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>p<span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">,</span> edgecolor<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：（均匀分布）</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230409164113512.png" alt="image-20230409164113512"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true">#迭代柱状图</span>N <span class="token operator">=</span> <span class="token number">10000</span>times <span class="token operator">=</span> <span class="token number">100</span>z <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">:</span>    z <span class="token operator">+=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>N<span class="token punctuation">)</span>z <span class="token operator">/=</span> timesplt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>z<span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'m'</span><span class="token punctuation">,</span> edgecolor<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：（高斯分布）</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230409164558866.png" alt="image-20230409164558866"></p><h2 id="随机生成数组"><a href="#随机生成数组" class="headerlink" title="随机生成数组"></a>随机生成数组</h2><ul><li>numpy  -&gt;  ndarray</li><li>pandas  -&gt;  DataFrame</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdd <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230409173000728.png" alt="image-20230409173000728"></p><h2 id="随机折线图"><a href="#随机折线图" class="headerlink" title="随机折线图"></a>随机折线图</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdx <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>y <span class="token operator">=</span> x<span class="token operator">**</span>xplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230409173933737.png" alt="image-20230409173933737">    </p><h2 id="读写文本格式数据"><a href="#读写文本格式数据" class="headerlink" title="读写文本格式数据"></a>读写文本格式数据</h2><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230425133808727.png" alt="image-20230425133808727"></p><h1 id="前馈神经网络（BP算法）"><a href="#前馈神经网络（BP算法）" class="headerlink" title="前馈神经网络（BP算法）"></a>前馈神经网络（BP算法）</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul><li>输入层</li><li>隐层</li><li>输出层</li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230414003800860.png" alt="image-20230414003800860"></p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>$$<br>\sum_{Sample} \sum_{i=1}^k (\hat{y_k} - y_k)<br>$$</p><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><ul><li>Sigmoid函数<ul><li>优点：输出范围有限(0,1)</li><li>缺点：梯度下降明显，两头平坦 -&gt; 梯度消失</li></ul></li></ul><p>$$<br>\psi(x)=\frac{1}{1+e^{-x}}<br>$$</p><ul><li>tanh函数<ul><li>优点：值域对称，完全可微分、反对称</li><li>缺点：梯度消失问题</li></ul></li></ul><p>$$<br>tanh(x)=\frac{e^x - e^{-x}}{e^x + e^{-x}}<br>$$</p><ul><li>ReLu函数<ul><li>优点：线性，收敛速度快，无梯度饱和</li></ul></li></ul><p>$$<br>R(z)=max(0,z)<br>$$</p><h3 id="函数特性"><a href="#函数特性" class="headerlink" title="函数特性"></a>函数特性</h3><ul><li>非线性</li><li>可微性</li><li>单调性</li><li>f(x) ≈ x</li><li>输出值范围</li><li>计算简单</li><li>归一化</li></ul><h2 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h2><p>二分类问题<br>$$<br>J(w)=\frac{1}{N}\sum_{n=1}^NH(p_n,q_n)=-\frac{1}{N}\sum_{n=1}^N[y_nlog\hat{y_k} + (1-y_n)log(1-\hat{y_k})]<br>$$</p><h2 id="学习率（步长）"><a href="#学习率（步长）" class="headerlink" title="学习率（步长）"></a>学习率（步长）</h2><ul><li>手动调整</li><li>固定学习率</li><li>动量法动态调整</li><li>随机梯度下降</li><li>Adam自动调整</li></ul><h2 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h2><p>防止方法：</p><ul><li>参数范数惩罚<ul><li>修改损失函数 -&gt; 惩罚函数</li></ul></li><li>数据增强</li><li>提前终止<ul><li>每过几个epoch来验证一次，查看是否过拟合了</li></ul></li><li>Bagging等集成方法</li><li>Dropout<ul><li>有概率的在训练中放弃一些神经元点</li></ul></li><li>批正则化</li></ul><h2 id="归一化处理"><a href="#归一化处理" class="headerlink" title="归一化处理"></a>归一化处理</h2><p>将一个数值组中最大最小值所在区间映射到[0,1]的区间上进行后续的数据处理</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/01/14/python-pa-chong/"/>
      <url>/2023/01/14/python-pa-chong/</url>
      
        <content type="html"><![CDATA[<h1 id="python爬虫"><a href="#python爬虫" class="headerlink" title="python爬虫"></a>python爬虫</h1><h2 id="第一个爬虫"><a href="#第一个爬虫" class="headerlink" title="第一个爬虫"></a>第一个爬虫</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopenresp <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 打开 百度</span><span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 打印 抓取到的内容</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"baidu.html"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>                                         <span class="token comment" spellcheck="true"># 创建⽂件</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 保存在⽂件中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="web请求过程"><a href="#web请求过程" class="headerlink" title="web请求过程"></a>web请求过程</h2><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230115155026822.png" alt="image-20230115155026822"></p><h3 id="⻚⾯渲染数据的过程"><a href="#⻚⾯渲染数据的过程" class="headerlink" title="⻚⾯渲染数据的过程"></a>⻚⾯渲染数据的过程</h3><p>​    1.服务器渲染 </p><p>我们在请求到服务器的时候, 服务器直接把数据全部写⼊到html中, 我们浏览器就 能直接拿到带有数据的html内容. ⽐如, 由于数据是直接写在html中的, 所以我们能看到的数据都在⻚⾯ 源代码中能找的到的. 这种⽹⻚⼀般都相对⽐较容易就能抓取到⻚⾯内容</p><p>​    2.前端JS渲染 </p><p>这种就稍显麻烦了. 这种机制⼀般是第⼀次请求服务器返回⼀堆 HTML框架结构. 然后再次请求到真正保存数据的服务器, 由这个服务器返回数据, 最后在浏览器上对数据进⾏加载</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20230115155336604.png" alt="image-20230115155336604"></p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p><strong>HTTP协议把⼀条消息分为三⼤块内容. ⽆论是请求还是响应都是三块内容</strong></p><ul><li><p>请求</p><pre><code>请求⾏ -&gt; 请求⽅式(get/post) 请求url地址 协议请求头 -&gt; 放⼀些服务器要使⽤的附加信息请求体 -&gt; ⼀般放⼀些请求参数</code></pre></li><li><p>响应</p><pre><code>状态⾏ -&gt; 协议 状态码响应头 -&gt; 放⼀些客户端要使⽤的⼀些附加信息响应体 -&gt; 服务器返回的真正客户端要⽤的内容(HTML,json)等</code></pre></li></ul><p>请求头中最常⻅的⼀些重要内容(爬⾍需要): </p><ol><li><p><strong>User-Agent : 请求载体的身份标识(⽤啥发送的请求)</strong> </p></li><li><p><strong>Referer: 防盗链(这次请求是从哪个⻚⾯来的? 反爬会⽤到)</strong></p></li><li><p><strong>cookie: 本地字符串数据信息(⽤户登录信息, 反爬的token)</strong> </p></li></ol><p>响应头中⼀些重要的内容:</p><ol><li><p><strong>cookie: 本地字符串数据信息(⽤户登录信息, 反爬的token)</strong></p></li><li><p><strong>各种神奇的莫名其妙的字符串(这个需要经验了, ⼀般都是token 字样, 防⽌各种攻击和反爬）</strong></p></li></ol><p>请求方式：</p><ul><li><p>Get</p><ul><li>Query String Parameters</li></ul></li><li><p>Post</p><ul><li>form data</li></ul></li></ul><h2 id="pip清华园镜像"><a href="#pip清华园镜像" class="headerlink" title="pip清华园镜像"></a>pip清华园镜像</h2><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">https://mirrors.tuna.tsinghua.edu.cn/help/pypi/</a></p><h2 id="requests实例"><a href="#requests实例" class="headerlink" title="requests实例"></a>requests实例</h2><pre><code>案例1. 抓取搜狗搜索内容kw = input("请输⼊你要搜索的内容:")response = requests.get(f"https://www.sogou.com/web?query={kw}") # 发送get请求# print(response.text) # 直接拿结果(⽂本)with open("sogou.html", mode="w", encoding="utf-8") as f: f.write(response.text)</code></pre><pre class="line-numbers language-python"><code class="language-python"> 案例<span class="token number">2</span><span class="token punctuation">.</span>抓取百度翻译数据<span class="token comment" spellcheck="true"># 准备参数</span>kw <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输⼊你要翻译的英语单词:"</span><span class="token punctuation">)</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"kw"</span><span class="token punctuation">:</span> kw <span class="token comment" spellcheck="true"># 这⾥要和抓包⼯具⾥的参数⼀致.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 请注意百度翻译的sug这个url. 它是通过post⽅式进⾏提交的. 所以我们也要模拟post请求</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"https://fanyi.baidu.com/sug"</span><span class="token punctuation">,</span>data<span class="token operator">=</span>dic<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回值是json 那就可以直接解析成json</span>resp_json <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># {'errno': 0, 'data': [{'k': 'Apple', 'v': 'n.苹果公司，原称苹果电脑公司'....</span><span class="token keyword">print</span><span class="token punctuation">(</span>resp_json<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'v'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 拿到返回字典中的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">案例<span class="token number">3</span><span class="token punctuation">:</span> 抓取⾖瓣电影url <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/j/chart/top_list'</span>param <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'24'</span><span class="token punctuation">,</span> <span class="token string">'interval_id'</span><span class="token punctuation">:</span> <span class="token string">'100:90'</span><span class="token punctuation">,</span> <span class="token string">'action'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'start'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#从库中的第⼏部电影去取</span> <span class="token string">'limit'</span><span class="token punctuation">:</span> <span class="token string">'20'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#⼀次取出的个数</span><span class="token punctuation">}</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span><span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>param<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>list_data <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>fp <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'./douban.json'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>list_data<span class="token punctuation">,</span>fp<span class="token operator">=</span>fp<span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'over!!!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="XHR异步加载"><a href="#XHR异步加载" class="headerlink" title="XHR异步加载"></a>XHR异步加载</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/21/springboot-zheng-he-zi-yuan/"/>
      <url>/2022/06/21/springboot-zheng-he-zi-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot整合servlet、filter、interceptor"><a href="#springboot整合servlet、filter、interceptor" class="headerlink" title="springboot整合servlet、filter、interceptor"></a>springboot整合servlet、filter、interceptor</h1><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="方式一：xml注入"><a href="#方式一：xml注入" class="headerlink" title="方式一：xml注入"></a>方式一：xml注入</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lee<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * springboot整合servlet的第一种方式： *   原来 *      &lt;servlet> *          &lt;servlet-name>firstServlet&lt;/servlet-name> *          &lt;servlet-class>com.lee.FirstServlet&lt;/servlet-class> *      &lt;/servlet> *      &lt;servlet-mapping> *          &lt;servlet-name>firstServlet&lt;/servlet-name> *          &lt;url-pattern>/firstServlet&lt;/url-pattern> *      &lt;/servlet-mapping> */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"firstServlet"</span><span class="token punctuation">,</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/firstServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"firstServlet............"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lee<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletComponentScan<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该注解会扫描当前包和其子包下的 @WebServlet,</span><span class="token comment" spellcheck="true">//并在启动类启动的时候将其实例化</span><span class="token annotation punctuation">@ServletComponentScan</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootApplicationServlet1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootApplicationServlet1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方式二：bean注入"><a href="#方式二：bean注入" class="headerlink" title="方式二：bean注入"></a>方式二：bean注入</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lee<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"secondServlet...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lee<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lee<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>SecondServlet<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootApplicationServlet2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootApplicationServlet2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将scondServlet注册到servletRegistrationBean中</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">secondServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ServletRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setServlet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SecondServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/secondServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><h3 id="方式一：xml注入-1"><a href="#方式一：xml注入-1" class="headerlink" title="方式一：xml注入"></a>方式一：xml注入</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lee<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebFilter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * &lt;filter> *     &lt;filter-name>FirstFilter&lt;/filter-name> *     &lt;filter-class>com.lee.filter.FirstFilter&lt;/filter-class> * &lt;/filter> * &lt;filter-mapping> *     &lt;filter-name>FirstFilter&lt;/filter-name> *     &lt;url-patter>/firstServlet&lt;/url-patter> * &lt;/filter-mapping> */</span><span class="token comment" spellcheck="true">//@WebFilter(filterName = "firstFilter",urlPatterns = {"*.do","*.action"})</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>filterName <span class="token operator">=</span> <span class="token string">"firstFilter"</span><span class="token punctuation">,</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/firstServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" first filter init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"enter first filter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"leave first filter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" first filter destroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lee<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletComponentScan<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该注解会扫描当前包和其子包下的 @WebServlet @WebFilter等,</span><span class="token comment" spellcheck="true">//并在启动类启动的时候将其实例化</span><span class="token annotation punctuation">@ServletComponentScan</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootApplicationFilter1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootApplicationFilter1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方式二：bean注入-1"><a href="#方式二：bean注入-1" class="headerlink" title="方式二：bean注入"></a>方式二：bean注入</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lee<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" second filter init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"enter second filter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"leave second filter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" second filter destroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lee<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lee<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>SecondFilter<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lee<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>SecondServlet<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootApplicationFilter2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootApplicationFilter2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将scondServlet注册到servletRegistrationBean中</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">secondServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ServletRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setServlet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SecondServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/secondServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">secondFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        FilterRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SecondFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/secondServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="interceptor"><a href="#interceptor" class="headerlink" title="interceptor"></a>interceptor</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object o<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{}:在请求处理之前进行调用（Controller方法调用之前）"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只有返回true才会继续向下执行，返回false取消当前请求</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object o<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{}:请求处理之后进行调用，但是在视图被渲染之前（Controller方法调用之后）"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object o<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{}:在整个请求结束之后被调用，也就是在DispatcherServlet 渲染了对应的视图之后执行（主要是用于进行资源清理工作）"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span><span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于添加拦截规则</span>        <span class="token comment" spellcheck="true">// 多个拦截器组成一个拦截器链</span>        <span class="token comment" spellcheck="true">// excludePathPatterns 用户排除拦截</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/17/qt-bian-cheng/"/>
      <url>/2022/06/17/qt-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="QT教程"><a href="#QT教程" class="headerlink" title="QT教程"></a>QT教程</h1><h2 id="QT框架——C-语言"><a href="#QT框架——C-语言" class="headerlink" title="QT框架——C++语言"></a>QT框架——C++语言</h2><pre class="line-numbers language-c++"><code class="language-c++">#include<stdio.h>#include<QLabel>int main(int argc,char *argv[]){    QApplication app(argc,argv);    //添加程序    return app.exec();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>QObject：所有能够处理Signal、slot和事件的Qt对象的基类</li><li>QApplication：对于一个应用程序是必类实体化是必须的，是QObject的子类</li><li>QWidget：是所有用户接口对象的基类，它继承了QObject类的属性。用户接口对象也称组件——QDialog、QMainWindow、QFrame直接继承QWidget类</li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220618002737772.png" alt="image-20220618002737772"></p><blockquote><p>Qt中采用信号和槽来实现通信</p></blockquote><h2 id="QT创建工程"><a href="#QT创建工程" class="headerlink" title="QT创建工程"></a>QT创建工程</h2><ul><li>Empty Qt4 Project<ul><li>只创建“工程名.pro”的工程文件</li><li>需要手动创建，编辑输入纯源码程序</li></ul></li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220618004242541.png" alt="image-20220618004242541"></p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220618004258306.png" alt="image-20220618004258306"></p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220618004320611.png" alt="image-20220618004320611"></p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220618011942298.png" alt="image-20220618011942298"></p><ul><li>Qt4 Gui Application（Qt Gui应用)<ul><li>自动创建“工程名.pro”文件</li><li>自动创建“类名.cpp“</li><li>自动创建”类名.h“</li><li>自动创建“main.cpp”</li><li>自动创建“类名.ui”，编译后生成“ui_类名.h”</li></ul></li></ul><h2 id="QtGui创建"><a href="#QtGui创建" class="headerlink" title="QtGui创建"></a>QtGui创建</h2><ul><li>QMainWindow类提供一个有菜单条、锚接窗口（工具条）、状态条的主应用程序窗口</li><li>QDialog类是对话框窗口的基类。最普通的顶级窗口</li><li>Qwidget类是所有用户界面对象的基类<ul><li>QMainWindow、QDialog、QFrame直接继承Qwidget类</li></ul></li></ul><h2 id="QT创建多窗口应用"><a href="#QT创建多窗口应用" class="headerlink" title="QT创建多窗口应用"></a>QT创建多窗口应用</h2><h3 id="1、创建第一个窗口nGui"><a href="#1、创建第一个窗口nGui" class="headerlink" title="1、创建第一个窗口nGui"></a>1、创建第一个窗口nGui</h3><h3 id="2、右键nGUI-—-add-new"><a href="#2、右键nGUI-—-add-new" class="headerlink" title="2、右键nGUI — add new"></a>2、右键nGUI — add new</h3><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220617231729597.png" alt="image-20220617231729597"></p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220617231748343.png" alt="image-20220617231748343"></p><h3 id="3、编辑第一个dialog页面"><a href="#3、编辑第一个dialog页面" class="headerlink" title="3、编辑第一个dialog页面"></a>3、编辑第一个dialog页面</h3><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220617233426941.png" alt="image-20220617233426941"></p><h3 id="4、添加槽函数"><a href="#4、添加槽函数" class="headerlink" title="4、添加槽函数"></a>4、添加槽函数</h3><ul><li>F4拖拽添加</li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220618012531686.png" alt="image-20220618012531686"></p><ul><li>利用+添加——但是如果要自定义槽函数，此种方法不可行</li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220617233903319.png" alt="image-20220617233903319"></p><ul><li>右键Go to Slot</li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220617235328548.png" alt="image-20220617235328548"></p><blockquote><p>要实现的功能：单击按钮使对话框关闭并发出Accepted信号功能</p></blockquote><h3 id="5、在主函数中编写逻辑"><a href="#5、在主函数中编写逻辑" class="headerlink" title="5、在主函数中编写逻辑"></a>5、在主函数中编写逻辑</h3><pre class="line-numbers language-c++"><code class="language-c++">#include "ngui.h"#include "mydlg.h"#include <QApplication>int main(int argc, char *argv[]){    QApplication a(argc, argv);    nGui w;    myDlg my1;    if(my1.exec()==QDialog::Accepted){        w.show();        return a.exec();    }    else{        return 0;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果ui界面出现灰色，使用F3启用编辑</p></blockquote><h3 id="6、编写第二个widget界面"><a href="#6、编写第二个widget界面" class="headerlink" title="6、编写第二个widget界面"></a>6、编写第二个widget界面</h3><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220618000836404.png" alt="image-20220618000836404"></p><h3 id="7、在widget-h中声明dialog的实体类"><a href="#7、在widget-h中声明dialog的实体类" class="headerlink" title="7、在widget.h中声明dialog的实体类"></a>7、在widget.h中声明dialog的实体类</h3><pre class="line-numbers language-c++"><code class="language-c++">myDlg my2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8、在widget-cpp中的槽函数中展示实体类"><a href="#8、在widget-cpp中的槽函数中展示实体类" class="headerlink" title="8、在widget.cpp中的槽函数中展示实体类"></a>8、在widget.cpp中的槽函数中展示实体类</h3><pre class="line-numbers language-c++"><code class="language-c++">my2.show()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9、页面效果展示"><a href="#9、页面效果展示" class="headerlink" title="9、页面效果展示"></a>9、页面效果展示</h3><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220618001329016.png" alt="image-20220618001329016"></p><h2 id="QT实现登录对话框——无链接数据库"><a href="#QT实现登录对话框——无链接数据库" class="headerlink" title="QT实现登录对话框——无链接数据库"></a>QT实现登录对话框——无链接数据库</h2><h3 id="1、创建登录窗口ui界面"><a href="#1、创建登录窗口ui界面" class="headerlink" title="1、创建登录窗口ui界面"></a>1、创建登录窗口ui界面</h3><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220618015332545.png" alt="image-20220618015332545"></p><h3 id="2、建立对应的槽函数"><a href="#2、建立对应的槽函数" class="headerlink" title="2、建立对应的槽函数"></a>2、建立对应的槽函数</h3><ul><li><p>退出</p></li><li><p>登录</p></li></ul><pre class="line-numbers language-c++"><code class="language-c++">void LoDlg::on_login_clicked(){    //判断账户密码正确，trimmed用来防止输入用户名出现空格干扰    if(ui->user->text().trimmed()=="qt"&&ui->pwd->text()=="123456"){        accept();    }    else{        QMessageBox::warning(this,"WARNING","username or password Error!",QMessageBox::Yes);        //如果密码和账户输入错误，则清空输入框并聚焦于第一个输入框        ui->user->clear();        ui->pwd->clear();        ui->user->setFocus();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、编写主函数"><a href="#3、编写主函数" class="headerlink" title="3、编写主函数"></a>3、编写主函数</h3><pre class="line-numbers language-c++"><code class="language-c++">#include "login.h"#include "lodlg.h"#include <QApplication>int main(int argc, char *argv[]){    QApplication a(argc, argv);    login w;    LoDlg login;    //先弹出登录，登录成功跳转到主页面    if(login.exec()==QDialog::Accepted)    {        w.show();        return a.exec();    }    else    {        return 0;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、编写主页面ui界面"><a href="#4、编写主页面ui界面" class="headerlink" title="4、编写主页面ui界面"></a>4、编写主页面ui界面</h3><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220618015745043.png" alt="image-20220618015745043"></p><h3 id="5、运行结果"><a href="#5、运行结果" class="headerlink" title="5、运行结果"></a>5、运行结果</h3><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220618015836464.png" alt="image-20220618015836464"></p><h2 id="QT操作sqlite数据库实现Slider"><a href="#QT操作sqlite数据库实现Slider" class="headerlink" title="QT操作sqlite数据库实现Slider"></a>QT操作sqlite数据库实现Slider</h2><h3 id="1、设计ui界面"><a href="#1、设计ui界面" class="headerlink" title="1、设计ui界面"></a>1、设计ui界面</h3><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220618020045677.png" alt="image-20220618020045677"></p><h3 id="2、在pro工程文件中添加sql"><a href="#2、在pro工程文件中添加sql" class="headerlink" title="2、在pro工程文件中添加sql"></a>2、在pro工程文件中添加sql</h3><pre class="line-numbers language-c++"><code class="language-c++">QT       += sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、创建头文件连接数据库、创建数据库——connection-h"><a href="#3、创建头文件连接数据库、创建数据库——connection-h" class="headerlink" title="3、创建头文件连接数据库、创建数据库——connection.h"></a>3、创建头文件连接数据库、创建数据库——connection.h</h3><pre class="line-numbers language-c++"><code class="language-c++">#ifndef CONNECT_H#define CONNECT_H#include<QSqlDatabase>#include<QSqlQuery>static bool createConnection(){    //type of db    :Qsqlite    QSqlDatabase db = QSqlDatabase::addDatabase("QSQLITE");    //name of db    :test    db.setDatabaseName("test.db");    //db can not open    if(!db.open()){        return false;    }    //create a class named 'query'    QSqlQuery query;    //create a table named 'record'    query.exec("create table record(id integer primary key autoincreament,temperature integer)");    //insert data    query.exec("insert into record values(1,1)");    return true;}#endif // CONNECT_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、申明页面对应的槽函数——slider-h"><a href="#4、申明页面对应的槽函数——slider-h" class="headerlink" title="4、申明页面对应的槽函数——slider.h"></a>4、申明页面对应的槽函数——slider.h</h3><pre class="line-numbers language-c++"><code class="language-c++">#ifndef SLIDER_H#define SLIDER_H#include <QMainWindow>QT_BEGIN_NAMESPACEnamespace Ui { class slider; }QT_END_NAMESPACEclass slider : public QMainWindow{    Q_OBJECTpublic:    slider(QWidget *parent = nullptr);    ~slider();private slots:    void on_pushButton_clicked();    void on_verticalSlider_valueChanged(int value);private:    Ui::slider *ui;};#endif // SLIDER_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、编写槽函数逻辑和初始化代码——slider-cpp"><a href="#5、编写槽函数逻辑和初始化代码——slider-cpp" class="headerlink" title="5、编写槽函数逻辑和初始化代码——slider.cpp"></a>5、编写槽函数逻辑和初始化代码——slider.cpp</h3><pre class="line-numbers language-c++"><code class="language-c++">#include "slider.h"#include "ui_slider.h"#include "connect.h"QString lastvalue;slider::slider(QWidget *parent)    : QMainWindow(parent)    , ui(new Ui::slider){    ui->setupUi(this);    QSqlQuery query;    //select DESC    query.exec("select * from record order by id DESC");    //first record will be writen down,and then move until last one    query.next();    //transform the type of 'temperature' into Integer    int c = query.value(1).toInt();    //set initialized location about slider    ui->verticalSlider->setValue(c);}slider::~slider(){    delete ui;}void slider::on_verticalSlider_valueChanged(int value){    QString v = QString::number(value);    ui->label->setText(v);    lastvalue = v;}void slider::on_pushButton_clicked(){    QSqlQuery query;    QString sql = "insert into record(temperature) values("+lastvalue +")";    query.exec(sql);    qApp->quit();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、完善主函数逻辑——main-cpp"><a href="#6、完善主函数逻辑——main-cpp" class="headerlink" title="6、完善主函数逻辑——main.cpp"></a>6、完善主函数逻辑——main.cpp</h3><pre class="line-numbers language-c++"><code class="language-c++">#include "slider.h"#include "connect.h"#include <QApplication>int main(int argc, char *argv[]){    QApplication a(argc, argv);    if(!createConnection){        return 1;    }    slider w;    w.show();    return a.exec();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="QT实现登录对话框——链接数据库"><a href="#QT实现登录对话框——链接数据库" class="headerlink" title="QT实现登录对话框——链接数据库"></a>QT实现登录对话框——链接数据库</h2><h3 id="1、设计页面——登录注册-LCD显示主页面"><a href="#1、设计页面——登录注册-LCD显示主页面" class="headerlink" title="1、设计页面——登录注册+LCD显示主页面"></a>1、设计页面——登录注册+LCD显示主页面</h3><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220618022417557.png" alt="image-20220618022417557"></p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220618022443561.png" alt="image-20220618022443561"></p><h3 id="2、在pro工程文件中添加sql-1"><a href="#2、在pro工程文件中添加sql-1" class="headerlink" title="2、在pro工程文件中添加sql"></a>2、在pro工程文件中添加sql</h3><h3 id="3、创建数据库头文件——connection-h"><a href="#3、创建数据库头文件——connection-h" class="headerlink" title="3、创建数据库头文件——connection.h"></a>3、创建数据库头文件——connection.h</h3><pre class="line-numbers language-c++"><code class="language-c++">#ifndef CONNECT_H#define CONNECT_H#include <QSqlDatabase>#include <QSqlQuery>#include <QMessageBox>#include <QDebug>static bool createConnection(){    QSqlDatabase db = QSqlDatabase::addDatabase("QSQLITE");    db.setDatabaseName("data.db");    if(!db.open())    {        QMessageBox box;        box.setText("open database failure!");        box.exec();        return false;    }    QSqlQuery query;    QString s="create table login(name varchar(10) primary key, passwd varchar(20))";    qDebug()<<s;    query.exec(s);    QString p="create table lcd(id integer primary key autoincrement,n integer)";    query.exec(p);    return true;}#endif // CONNECT_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、申明页面对应的槽函数——login-h、mainwindow-h"><a href="#4、申明页面对应的槽函数——login-h、mainwindow-h" class="headerlink" title="4、申明页面对应的槽函数——login.h、mainwindow.h"></a>4、申明页面对应的槽函数——login.h、mainwindow.h</h3><pre class="line-numbers language-c++"><code class="language-c++">#ifndef LOGINDLG_H#define LOGINDLG_H#include <QDialog>#include <QMessageBox>namespace Ui {class loginDlg;}class loginDlg : public QDialog{    Q_OBJECT    public:    explicit loginDlg(QWidget *parent = 0);    ~loginDlg();    private slots:    void on_loginBtn_clicked();    void on_registerBtn_clicked();private:    Ui::loginDlg *ui;    QMessageBox box;};#endif // LOGINDLG_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">#ifndef MAINWINDOW_H#define MAINWINDOW_H#include <QMainWindow>#include <QSqlQueryModel>namespace Ui {class MainWindow;}class MainWindow : public QMainWindow{    Q_OBJECT    public:    explicit MainWindow(QWidget *parent = 0);    ~MainWindow();    private slots:       void on_exitBut_clicked();       void on_dial_valueChanged(int value);private:    Ui::MainWindow *ui;    QSqlQueryModel *querymodel;};#endif // MAINWINDOW_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、完善login-cpp、main-cpp、mainwindow-cpp代码逻辑"><a href="#5、完善login-cpp、main-cpp、mainwindow-cpp代码逻辑" class="headerlink" title="5、完善login.cpp、main.cpp、mainwindow.cpp代码逻辑"></a>5、完善login.cpp、main.cpp、mainwindow.cpp代码逻辑</h3><pre class="line-numbers language-c++"><code class="language-c++">#include "logindlg.h"#include "ui_logindlg.h"#include <QDebug>#include <QSqlQuery>loginDlg::loginDlg(QWidget *parent) :    QDialog(parent),    ui(new Ui::loginDlg){    ui->setupUi(this);    ui-> pwdLineEdit-> setEchoMode(QLineEdit::Password);}loginDlg::~loginDlg(){    delete ui;}//登录void loginDlg::on_loginBtn_clicked(){    QString user = ui->usrLineEdit->text();    QString pass = ui->pwdLineEdit->text();    if(user.isEmpty()||pass.isEmpty())    {        box.setText("user or pass is empty");        box.exec();     }    else    {        QString s=QString("select * from login where name=='%1'").arg(user);        qDebug() << s;        QSqlQuery query;        if(query.exec(s))        {            if(query.first())            {                if(query.value(1).toString()==pass)                {                    box.setText("login success");                    box.exec();                    accept();                }               else                {                    box.setText("passwd is wrong");                    box.exec();                }            }            else            {                box.setText("user is not exist");                box.exec();            }        }    }}//注册void loginDlg::on_registerBtn_clicked(){    QString user = ui->usrLineEdit->text();    QString pass = ui->pwdLineEdit->text();    if(user.isEmpty()||pass.isEmpty())    {        box.setText("user or pass is empty");        box.exec();    }   else    {        QString s = QString("insert into login values('%1','%2')").arg(user).arg(pass);        qDebug()<<s;        QSqlQuery query;        if(query.exec(s))        {            box.setText("success");            box.exec();        }        else        {            box.setText("failure");            box.exec();        }    }    ui->usrLineEdit->clear();//清空用户名输入框    ui->pwdLineEdit->clear();//清空密码输入框    ui->usrLineEdit->setFocus();//将光标转到用户名输入框}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">#include <QtGui/QApplication>#include "mainwindow.h"#include "logindlg.h"#include "connect.h"int main(int argc, char *argv[]){    QApplication a(argc, argv);    if(!createConnection())    {        return false;    }    MainWindow w;    loginDlg login;    if(login.exec()==QDialog::Accepted)    {        w.show();        return a.exec();    }    else return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">#include "mainwindow.h"#include "ui_mainwindow.h"#include <QSqlQuery>#include <QDebug>MainWindow::MainWindow(QWidget *parent) :    QMainWindow(parent),    ui(new Ui::MainWindow){    ui->setupUi(this);    querymodel = new QSqlQueryModel(this);    QString s = "select * from lcd";    querymodel->setQuery(s);    ui->tableView->setModel(querymodel);    QSqlQuery query;    if(query.exec(s))    {        query.last();        int c = query.value(1).toInt();        ui->dial->setValue(c);        ui->lcdNumber->display(c);    }}MainWindow::~MainWindow(){    delete ui;}void MainWindow::on_exitBut_clicked(){    int n = ui->dial->value();    QString s =QString("insert into lcd(n) values(%1)").arg(n);    qDebug()<<s;    QSqlQuery query;    query.exec(s);    qApp->exit();}void MainWindow::on_dial_valueChanged(int value){    ui->lcdNumber->display(value);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/04/qian-ru-shi-kai-fa/"/>
      <url>/2022/06/04/qian-ru-shi-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="嵌入式开发"><a href="#嵌入式开发" class="headerlink" title="嵌入式开发"></a>嵌入式开发</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h3><ul><li>gcc</li><li>g++</li><li>clang</li><li>cmake<ul><li>需要一个CMakeLists.txt</li><li>创建Makefile文件</li><li>make</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/03/shu-ju-jie-gou/"/>
      <url>/2022/06/03/shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="不带头结点单链表"><a href="#不带头结点单链表" class="headerlink" title="不带头结点单链表"></a>不带头结点单链表</h2><ul><li>使用头指针为全局变量</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//假设线性表中数据元素类型为整形</span><span class="token comment" spellcheck="true">//单链表的表示与实现</span><span class="token comment" spellcheck="true">//储存结构</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存储数据</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node Node<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//看似是一句废话，但是如果不写，每次引用结构体都要加一个struct，很繁琐</span><span class="token keyword">struct</span> Node<span class="token operator">*</span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//头指针：在这里声明是使head能够被全局调用，但是一般我们不这样使用</span><span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    Node<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token operator">-></span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//常规做法就是这样，先创建一个结点使其指针next指向NULL</span>    <span class="token comment" spellcheck="true">//1、如果head为空，即temp是链表第一个结点，直接让head = temp即可</span>    <span class="token comment" spellcheck="true">//2、如果head不为空，即temp不是链表第一个结点，根据头插法原则，需要让这个新插入的temp结点先指向head指向的结点，再让head指向自己</span>    <span class="token comment" spellcheck="true">// temp->next = NULL;</span>    <span class="token comment" spellcheck="true">// if (head != NULL)</span>    <span class="token comment" spellcheck="true">// {</span>    <span class="token comment" spellcheck="true">//     temp->next = head;</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">//简化写法，每次都让temp指向head，因为如果你是第一个结点，指向head，即temp->next=NULL,所以过程都是一样的</span>    temp<span class="token operator">-></span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>    head<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Node<span class="token operator">*</span> temp <span class="token operator">=</span>  head<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"List:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>temp<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化头指针        也可以写函数Init，操作相同</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"how many numbers?\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>x<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter your num\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Insert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用头指针为局部变量</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//假设线性表中数据元素类型为整形</span><span class="token comment" spellcheck="true">//单链表的表示与实现</span><span class="token comment" spellcheck="true">//储存结构</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存储数据</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node Node<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//看似是一句废话，但是如果不写，每次引用结构体都要加一个struct，很繁琐</span><span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token operator">*</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里为什么使用**    ： 首先插入元素肯定是要在我定义的链表中进行操作，因此我传入了头指针的地址</span>    <span class="token comment" spellcheck="true">//第一个*，是解析该地址对应的变量——此时的head表示一个指针</span>    <span class="token comment" spellcheck="true">//第二个*，与Node组合表示 —— *head 是一个Node型的指针</span>    Node<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token operator">-></span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//常规做法就是这样，先创建一个结点使其指针next指向NULL</span>    <span class="token comment" spellcheck="true">//1、如果head为空，即temp是链表第一个结点，直接让head = temp即可</span>    <span class="token comment" spellcheck="true">//2、如果head不为空，即temp不是链表第一个结点，根据头插法原则，需要让这个新插入的temp结点先指向head指向的结点，再让head指向自己</span>    <span class="token comment" spellcheck="true">// temp->next = NULL;</span>    <span class="token comment" spellcheck="true">// if (*head != NULL)</span>    <span class="token comment" spellcheck="true">// {</span>    <span class="token comment" spellcheck="true">//     temp->next = *head;</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">//简化写法，每次都让temp指向head，因为如果你是第一个结点，指向head，即temp->next=NULL,所以过程都是一样的</span>    temp<span class="token operator">-></span>next<span class="token operator">=</span><span class="token operator">*</span>head<span class="token punctuation">;</span>    <span class="token operator">*</span>head<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"List:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>head<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Node<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化头指针        也可以写函数Init，操作相同</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"how many numbers?\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>x<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter your num\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Print</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现指定位置插入操作</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//假设线性表中数据元素类型为整形</span><span class="token comment" spellcheck="true">//单链表的表示与实现</span><span class="token comment" spellcheck="true">//储存结构</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存储数据</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node Node<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//看似是一句废话，但是如果不写，每次引用结构体都要加一个struct，很繁琐</span><span class="token keyword">struct</span> Node<span class="token operator">*</span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//头指针：在这里声明是使head能够被全局调用，但是一般我们不这样使用</span><span class="token comment" spellcheck="true">//指定位置插入元素</span><span class="token keyword">void</span> <span class="token function">Insert_Index</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    Node<span class="token operator">*</span> temp1 <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新建插入的结点</span>    temp1<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    temp1<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果是第一个结点</span>    <span class="token punctuation">{</span>        temp1<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> temp1<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp1<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> temp1<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        Node<span class="token operator">*</span> temp2 <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新建一个结点指针用来遍历链表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token number">-2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//要找到插入位置的前一个元素，即n-1，则temp = temp->next需要执行n-2次</span>    <span class="token punctuation">{</span>        temp2 <span class="token operator">=</span> temp2<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp1<span class="token operator">-></span>next <span class="token operator">=</span> temp2<span class="token operator">-></span>next<span class="token punctuation">;</span>    temp2<span class="token operator">-></span>next <span class="token operator">=</span> temp1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Node<span class="token operator">*</span> temp <span class="token operator">=</span>  head<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"List:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>temp<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">Insert_Index</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Insert_Index</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Insert_Index</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Insert_Index</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现指定位置删除操作</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//假设线性表中数据元素类型为整形</span><span class="token comment" spellcheck="true">//单链表的表示与实现</span><span class="token comment" spellcheck="true">//储存结构</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//存储数据</span>    <span class="token keyword">struct</span> Node <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node Node<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//看似是一句废话，但是如果不写，每次引用结构体都要加一个struct，很繁琐</span><span class="token keyword">struct</span> Node <span class="token operator">*</span>head<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头指针：在这里声明是使head能够被全局调用，但是一般我们不这样使用</span><span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里为什么使用**    ： 首先插入元素肯定是要在我定义的链表中进行操作，因此我传入了头指针的地址</span>    <span class="token comment" spellcheck="true">//第一个*，是解析该地址对应的变量——此时的head表示一个指针</span>    <span class="token comment" spellcheck="true">//第二个*，与Node组合表示 —— *head 是一个Node型的指针</span>    Node <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token operator">-></span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//常规做法就是这样，先创建一个结点使其指针next指向NULL</span>    <span class="token comment" spellcheck="true">// 1、如果head为空，即temp是链表第一个结点，直接让head = temp即可</span>    <span class="token comment" spellcheck="true">// 2、如果head不为空，即temp不是链表第一个结点，根据头插法原则，需要让这个新插入的temp结点先指向head指向的结点，再让head指向自己</span>    <span class="token comment" spellcheck="true">// temp->next = NULL;</span>    <span class="token comment" spellcheck="true">// if (head != NULL)</span>    <span class="token comment" spellcheck="true">// {</span>    <span class="token comment" spellcheck="true">//     temp->next = head;</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">//简化写法，每次都让temp指向head，因为如果你是第一个结点，指向head，即temp->next=NULL,所以过程都是一样的</span>    temp<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    head <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//指定位置删除</span><span class="token keyword">void</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    Node <span class="token operator">*</span>temp1 <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        head <span class="token operator">=</span> temp1<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>temp1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            temp1 <span class="token operator">=</span> temp1<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使temp1指向 n-1 这个位置</span>        Node <span class="token operator">*</span>temp2 <span class="token operator">=</span> temp1<span class="token operator">-></span>next<span class="token punctuation">;</span>        temp1<span class="token operator">-></span>next <span class="token operator">=</span> temp2<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>temp2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// C++ 写法： delete temp2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Node <span class="token operator">*</span>temp <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"List:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span> temp<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// List: 2,4,6,5</span>    <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter a position\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Delete</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>逆转单链表</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//假设线性表中数据元素类型为整形</span><span class="token comment" spellcheck="true">//单链表的表示与实现</span><span class="token comment" spellcheck="true">//储存结构</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//存储数据</span>    <span class="token keyword">struct</span> Node <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node Node<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//看似是一句废话，但是如果不写，每次引用结构体都要加一个struct，很繁琐</span><span class="token keyword">struct</span> Node <span class="token operator">*</span>head<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头指针：在这里声明是使head能够被全局调用，但是一般我们不这样使用</span><span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里为什么使用**    ： 首先插入元素肯定是要在我定义的链表中进行操作，因此我传入了头指针的地址</span>    <span class="token comment" spellcheck="true">//第一个*，是解析该地址对应的变量——此时的head表示一个指针</span>    <span class="token comment" spellcheck="true">//第二个*，与Node组合表示 —— *head 是一个Node型的指针</span>    Node <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token operator">-></span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//常规做法就是这样，先创建一个结点使其指针next指向NULL</span>    <span class="token comment" spellcheck="true">// 1、如果head为空，即temp是链表第一个结点，直接让head = temp即可</span>    <span class="token comment" spellcheck="true">// 2、如果head不为空，即temp不是链表第一个结点，根据头插法原则，需要让这个新插入的temp结点先指向head指向的结点，再让head指向自己</span>    <span class="token comment" spellcheck="true">// temp->next = NULL;</span>    <span class="token comment" spellcheck="true">// if (head != NULL)</span>    <span class="token comment" spellcheck="true">// {</span>    <span class="token comment" spellcheck="true">//     temp->next = head;</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">//简化写法，每次都让temp指向head，因为如果你是第一个结点，指向head，即temp->next=NULL,所以过程都是一样的</span>    temp<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    head <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式一：逆转输出序列</span><span class="token keyword">void</span> <span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Node <span class="token operator">*</span>next<span class="token punctuation">,</span><span class="token operator">*</span>prev<span class="token punctuation">,</span><span class="token operator">*</span>current<span class="token punctuation">;</span>    current <span class="token operator">=</span> head<span class="token punctuation">;</span>    prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        next <span class="token operator">=</span> current<span class="token operator">-></span>next<span class="token punctuation">;</span>        current<span class="token operator">-></span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>        prev <span class="token operator">=</span> current<span class="token punctuation">;</span>        current <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    head <span class="token operator">=</span> prev<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//递归打印输出单链表</span><span class="token keyword">void</span> <span class="token function">DPrint</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//先递归再打印的输出顺序和先打印再递归的输出顺序不一样，可以实现逆转输出</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">DPrint</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>head<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//递归逆转单链表</span><span class="token keyword">void</span> <span class="token function">DReverse</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        head <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">DReverse</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    q<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// p->next->next = p;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Node <span class="token operator">*</span>temp <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"List:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span> temp<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// List: 2,4,6,5</span>    <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// DPrint(head);</span>    <span class="token comment" spellcheck="true">// DReverse(head);</span>    <span class="token comment" spellcheck="true">// Print(head);</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> ElemType int</span><span class="token comment" spellcheck="true">//双向链表结点类型定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Dnode<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Dnode <span class="token operator">*</span>prior<span class="token punctuation">,</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span> Dnode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义全局变量：头指针</span><span class="token keyword">struct</span> Dnode <span class="token operator">*</span>head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*知识点：    应用内存板块有：stack(栈)、heap(堆)、global/static(全局静态)    一个函数被调用时，会从栈上分配一些内存供该函数执行，该内存部分称为该函数的栈帧    该函数中所申明的所有局部变量都会存放到栈帧中去，在函数调用结束后，栈帧被回收 —— 栈中该元素的生命周期到此结束    即使我们返回了指向这个栈帧中变量位置的指针，但是栈帧已经不见了，知道位置毫无意义。    问题：为什么申明结点需要用到malloc呢？    回答：malloc函数会在堆中申明一个空间用于存放结点，    重点：堆中申明的变量我们不能直接使用，访问堆中变量的唯一方法是通过指针，如果指针丢失，则该节点逻辑上也丢失了    因此我返回指向这个堆中变量位置的指针，可以通过该指针指向的位置来访问这个结点，逻辑上这个结点就申明成功了*/</span><span class="token comment" spellcheck="true">//此函数动态的在heap(堆)中申明了一个node，执行完之后将指向node的指针返回，在heap中的变量，不会在函数执行后释放</span>Dnode <span class="token operator">*</span><span class="token function">GetNewNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    Dnode <span class="token operator">*</span>newNode <span class="token operator">=</span> <span class="token punctuation">(</span>Dnode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Dnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>newNode<span class="token punctuation">)</span><span class="token punctuation">.</span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>    newNode<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    newNode<span class="token operator">-></span>prior <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newNode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第二种写法是错误的，因为在函数体里面申明的变量存储到栈中的栈帧里，执行完函数堆栈会释放，其存储的变量也会相应释放</span><span class="token comment" spellcheck="true">// Dnode* GetNewNode(int x)</span><span class="token comment" spellcheck="true">// {</span><span class="token comment" spellcheck="true">//     Dnode newNode;</span><span class="token comment" spellcheck="true">//     newNode.data = x;</span><span class="token comment" spellcheck="true">//     newNode.next = NULL;</span><span class="token comment" spellcheck="true">//     newNode.prior = NULL;</span><span class="token comment" spellcheck="true">//     return &amp;newNode;</span><span class="token comment" spellcheck="true">// }</span><span class="token keyword">void</span> <span class="token function">InsertAtHead</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    Dnode <span class="token operator">*</span>newNode <span class="token operator">=</span> <span class="token function">GetNewNode</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    head<span class="token operator">-></span>prior <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    newNode<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    head <span class="token operator">=</span> newNode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Dnode<span class="token operator">*</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"遍历："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> temp<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ReversePrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Dnode<span class="token operator">*</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp <span class="token operator">=</span> temp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"遍历："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> temp<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp<span class="token operator">-></span>prior<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">InsertAtHead</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ReversePrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InsertAtHead</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ReversePrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InsertAtHead</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ReversePrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAX_SIZE 101</span><span class="token keyword">int</span> A<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stack is full\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    top<span class="token operator">++</span><span class="token punctuation">;</span>    A<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stack is empty\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    top<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> A<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stack: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> top<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单链表实现"><a href="#单链表实现" class="headerlink" title="单链表实现"></a>单链表实现</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> link<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node Node<span class="token punctuation">;</span>Node<span class="token operator">*</span> top <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    Node<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token operator">-></span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>    temp<span class="token operator">-></span>link <span class="token operator">=</span> top<span class="token punctuation">;</span>    top <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Node<span class="token operator">*</span> temp<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> top<span class="token punctuation">;</span>    top <span class="token operator">=</span> top<span class="token operator">-></span>link<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> top<span class="token operator">-></span>data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stack:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Node<span class="token operator">*</span> p <span class="token operator">=</span> top<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>link<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> A <span class="token operator">=</span> <span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="栈表逆置-C"><a href="#栈表逆置-C" class="headerlink" title="栈表逆置(C++)"></a>栈表逆置(C++)</h2><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>#include<stack> //stack标准库#include<string.h>#include<stdlib.h>using namespace std;// class Stack// {// private://     char A[101];//     int top;// public://     void Push(int x);//     void Pop();//     int Top();//     bool IsEmpty();// };typedef struct Node {    int data;    Node* next;}Node;Node* head=NULL;void Push_Num(int x){    Node* temp = (Node*)malloc(sizeof(Node));    temp->data = x;    temp->next = head;    head = temp;}void Reverse(char C[],int n){   //C++中数组C[] 也可以写为 *C    stack<char> S;    //压栈    for (int i = 0; i < n; i++)    {        S.push(C[i]);    }        //弹栈    for (int i = 0; i < n; i++)    {        C[i] = S.top();        S.pop();    }}void Reverse(){    if (head == NULL)    {        return;    }    stack<Node*> S;    Node* temp = head;    while (temp != NULL)    {        S.push(temp);        temp = temp->next;    }    temp = S.top();    head = temp;    //头指针指向栈顶元素，即原栈的栈底元素    S.pop();    while (!S.empty())    {        temp->next=S.top();     //上一个栈顶元素 指向 弹出后的 下一个栈顶元素        S.pop();        temp=temp->next;    }    temp->next = NULL;}void Print(){    printf("Stack:\n");    Node* p = head;    while (p != NULL)    {        printf("%d ",p->data);        p = p->next;    }    printf("\n");}int main(){    // char C[51];    // printf("Enter a String:\n");    // gets(C);    // Reverse(C,strlen(C));    // printf("OutPut = %s",C);    Push_Num(2);   Print();    Push_Num(5);    Print();    Push_Num(10);  Print();    Push_Num(12);   Print();    Reverse();  Print();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/31/docker/"/>
      <url>/2022/05/31/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker实用篇"><a href="#Docker实用篇" class="headerlink" title="Docker实用篇"></a>Docker实用篇</h1><h1 id="1-初识Docker"><a href="#1-初识Docker" class="headerlink" title="1.初识Docker"></a>1.初识Docker</h1><h2 id="1-1-什么是Docker"><a href="#1-1-什么是Docker" class="headerlink" title="1.1.什么是Docker"></a>1.1.什么是Docker</h2><p>微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。</p><ul><li>分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。</li><li>在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题</li></ul><h3 id="1-1-1-应用部署的环境问题"><a href="#1-1-1-应用部署的环境问题" class="headerlink" title="1.1.1.应用部署的环境问题"></a>1.1.1.应用部署的环境问题</h3><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p><ul><li><p>依赖关系复杂，容易出现兼容性问题</p></li><li><p>开发、测试、生产环境有差异</p></li></ul><p>例如一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。</p><h3 id="1-1-2-Docker解决依赖兼容问题"><a href="#1-1-2-Docker解决依赖兼容问题" class="headerlink" title="1.1.2.Docker解决依赖兼容问题"></a>1.1.2.Docker解决依赖兼容问题</h3><p>而Docker确巧妙的解决了这些问题，Docker是如何实现的呢？</p><p>Docker为了解决依赖的兼容问题的，采用了两个手段：</p><ul><li><p>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</p></li><li><p>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</p></li></ul><p>这样打包好的应用包中，既包含应用本身，也保护应用所需要的Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。</p><p>虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？</p><h3 id="1-1-3-Docker解决操作系统环境差异"><a href="#1-1-3-Docker解决操作系统环境差异" class="headerlink" title="1.1.3.Docker解决操作系统环境差异"></a>1.1.3.Docker解决操作系统环境差异</h3><p>结构包括：</p><ul><li>计算机硬件：例如CPU、内存、磁盘等</li><li>系统内核：所有Linux发行版的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供<strong>内核指令</strong>，用于操作计算机硬件。</li><li>系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。</li></ul><p>应用于计算机交互的流程如下：</p><p>1）应用调用操作系统应用（函数库），实现各种功能</p><p>2）系统函数库是对内核指令集的封装，会调用内核指令</p><p>3）内核指令操作计算机硬件</p><p>Docker如何解决不同系统环境的问题？</p><ul><li>Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li><li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行</li></ul><h3 id="1-1-4-小结"><a href="#1-1-4-小结" class="headerlink" title="1.1.4.小结"></a>1.1.4.小结</h3><p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p><ul><li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li><li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li></ul><p>Docker如何解决开发、测试、生产环境有差异的问题？</p><ul><li>Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li></ul><p>Docker是一个快速交付应用、运行应用的技术，具备下列优势：</p><ul><li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</li><li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li><li>启动、移除都可以通过一行命令完成，方便快捷</li></ul><h2 id="1-2-Docker和虚拟机的区别"><a href="#1-2-Docker和虚拟机的区别" class="headerlink" title="1.2.Docker和虚拟机的区别"></a>1.2.Docker和虚拟机的区别</h2><p>Docker可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。</p><p>两者有什么差异呢？</p><p><strong>虚拟机</strong>（virtual machine）是在操作系统中<strong>模拟</strong>硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。</p><p><strong>Docker</strong>仅仅是封装函数库，并没有模拟完整的操作系统</p><p>小结：</p><p>Docker和虚拟机的差异：</p><ul><li><p>docker是一个系统进程；虚拟机是在操作系统中的操作系统</p></li><li><p>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</p></li></ul><h2 id="1-3-Docker架构"><a href="#1-3-Docker架构" class="headerlink" title="1.3.Docker架构"></a>1.3.Docker架构</h2><h3 id="1-3-1-镜像和容器"><a href="#1-3-1-镜像和容器" class="headerlink" title="1.3.1.镜像和容器"></a>1.3.1.镜像和容器</h3><p>Docker中有几个重要的概念：</p><p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p><p><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。</p><p>一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的<strong>文件</strong>。只有运行时，才会加载到内存，形成进程。</p><p>而<strong>镜像</strong>，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。</p><p><strong>容器</strong>呢，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。</p><p>例如你下载了一个QQ，如果我们将QQ在磁盘上的运行<strong>文件</strong>及其运行的操作系统依赖打包，形成QQ镜像。然后你可以启动多次，双开、甚至三开QQ，跟多个妹子聊天。</p><h3 id="1-3-2-DockerHub"><a href="#1-3-2-DockerHub" class="headerlink" title="1.3.2.DockerHub"></a>1.3.2.DockerHub</h3><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如Redis、MySQL镜像放到网络上，共享使用，就像GitHub的代码共享一样。</p><ul><li><p>DockerHub：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为Docker Registry。</p></li><li><p>国内也有类似于DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像库</a>等。</p></li></ul><p>我们一方面可以将自己的镜像共享到DockerHub，另一方面也可以从DockerHub拉取镜像</p><h3 id="1-3-3-Docker架构"><a href="#1-3-3-Docker架构" class="headerlink" title="1.3.3.Docker架构"></a>1.3.3.Docker架构</h3><p>我们要使用Docker来操作镜像、容器，就必须要安装Docker。</p><p>Docker是一个CS架构的程序，由两部分组成：</p><ul><li><p>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</p></li><li><p>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</p></li></ul><h3 id="1-3-4-小结"><a href="#1-3-4-小结" class="headerlink" title="1.3.4.小结"></a>1.3.4.小结</h3><p>镜像：</p><ul><li>将应用程序及其依赖、环境、配置打包在一起</li></ul><p>容器：</p><ul><li>镜像运行起来就是容器，一个镜像可以运行多个容器</li></ul><p>Docker结构：</p><ul><li><p>服务端：接收命令或远程请求，操作镜像或容器</p></li><li><p>客户端：发送命令或者请求到Docker服务端</p></li></ul><p>DockerHub：</p><ul><li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry</li></ul><h2 id="1-4-安装Docker"><a href="#1-4-安装Docker" class="headerlink" title="1.4.安装Docker"></a>1.4.安装Docker</h2><h3 id="1-4-1-卸载之前的Docker"><a href="#1-4-1-卸载之前的Docker" class="headerlink" title="1.4.1 卸载之前的Docker"></a>1.4.1 卸载之前的Docker</h3><pre class="line-numbers language-yaml"><code class="language-yaml">yum remove docker \    docker<span class="token punctuation">-</span>client \    docker<span class="token punctuation">-</span>client<span class="token punctuation">-</span>latest \    docker<span class="token punctuation">-</span>common \    docker<span class="token punctuation">-</span>latest \    docker<span class="token punctuation">-</span>latest<span class="token punctuation">-</span>logrotate \    docker<span class="token punctuation">-</span>logrotate \    docker<span class="token punctuation">-</span>selinux \    docker<span class="token punctuation">-</span>engine<span class="token punctuation">-</span>selinux \    docker<span class="token punctuation">-</span>engine \    docker<span class="token punctuation">-</span>ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-2-安装Docker"><a href="#1-4-2-安装Docker" class="headerlink" title="1.4.2 安装Docker"></a>1.4.2 安装Docker</h3><p>安装yum工具</p><pre class="line-numbers language-yaml"><code class="language-yaml">yum install <span class="token punctuation">-</span>y yum<span class="token punctuation">-</span>utils \    device<span class="token punctuation">-</span>mapper<span class="token punctuation">-</span>persistent<span class="token punctuation">-</span>data \    lvm2 <span class="token punctuation">-</span><span class="token punctuation">-</span>skip<span class="token punctuation">-</span>broken<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更新本地镜像源</p><pre class="line-numbers language-shell"><code class="language-shell">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装命令</p><pre class="line-numbers language-shell"><code class="language-shell">yum -y install docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-4-3-启动Docker"><a href="#1-4-3-启动Docker" class="headerlink" title="1.4.3 启动Docker"></a>1.4.3 启动Docker</h3><pre class="line-numbers language-shell"><code class="language-shell">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Docker应用需要用到许多的端口，逐一设置防火墙，很麻烦，建议直接关闭（企业中是不允许的）</p><pre class="line-numbers language-shell"><code class="language-shell"># 关闭systemctl stop firewalld#禁止开机自启systemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-4-配置加速镜像"><a href="#1-4-4-配置加速镜像" class="headerlink" title="1.4.4 配置加速镜像"></a>1.4.4 配置加速镜像</h3><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><h1 id="2-Docker的基本操作"><a href="#2-Docker的基本操作" class="headerlink" title="2.Docker的基本操作"></a>2.Docker的基本操作</h1><h2 id="2-1-镜像操作"><a href="#2-1-镜像操作" class="headerlink" title="2.1.镜像操作"></a>2.1.镜像操作</h2><h3 id="2-1-1-镜像名称"><a href="#2-1-1-镜像名称" class="headerlink" title="2.1.1.镜像名称"></a>2.1.1.镜像名称</h3><p>首先来看下镜像的名称组成：</p><ul><li><p>镜名称一般分两部分组成：[repository]:[tag]。</p></li><li><p>在没有指定tag时，默认是latest，代表最新版本的镜像</p></li></ul><h3 id="2-1-2-镜像命令"><a href="#2-1-2-镜像命令" class="headerlink" title="2.1.2.镜像命令"></a>2.1.2.镜像命令</h3><p>常见的镜像操作命令如图：</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220528201854465.png" alt="image-20220528201854465"></p><h3 id="2-1-3-案例1-拉取、查看镜像"><a href="#2-1-3-案例1-拉取、查看镜像" class="headerlink" title="2.1.3.案例1-拉取、查看镜像"></a>2.1.3.案例1-拉取、查看镜像</h3><p>需求：从DockerHub中拉取一个nginx镜像并查看</p><p>1）首先去镜像仓库搜索nginx镜像，比如<a href="https://hub.docker.com/">DockerHub</a>:</p><p>2）根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx</p><p>3）通过命令：docker images 查看拉取到的镜像</p><h3 id="2-1-4-案例2-保存、导入镜像"><a href="#2-1-4-案例2-保存、导入镜像" class="headerlink" title="2.1.4.案例2-保存、导入镜像"></a>2.1.4.案例2-保存、导入镜像</h3><p>需求：利用docker save将nginx镜像导出磁盘，然后再通过load加载回来</p><p>1）利用docker xx –help命令查看docker save和docker load的语法</p><p>例如，查看save命令用法，可以输入命令：</p><pre class="line-numbers language-sh"><code class="language-sh">docker save --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令格式：</p><pre class="line-numbers language-shell"><code class="language-shell">docker save -o [保存的目标文件名称] [镜像名称]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）使用docker save导出镜像到磁盘 </p><p>运行命令：</p><pre class="line-numbers language-sh"><code class="language-sh">docker save -o nginx.tar nginx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3）使用docker load加载镜像</p><p>先删除本地的nginx镜像：</p><pre class="line-numbers language-sh"><code class="language-sh">docker rmi nginx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后运行命令，加载本地文件：</p><pre class="line-numbers language-sh"><code class="language-sh">docker load -i nginx.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-2-容器操作"><a href="#2-2-容器操作" class="headerlink" title="2.2.容器操作"></a>2.2.容器操作</h2><h3 id="2-2-1-容器相关命令"><a href="#2-2-1-容器相关命令" class="headerlink" title="2.2.1.容器相关命令"></a>2.2.1.容器相关命令</h3><p>容器操作的命令如图：</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220528202532913.png" alt="image-20220528202532913"></p><p>容器保护三个状态：</p><ul><li>运行：进程正常运行</li><li>暂停：进程暂停，CPU不再运行，并不释放内存</li><li>停止：进程终止，回收进程占用的内存、CPU等资源</li></ul><p>其中：</p><ul><li>docker run：创建并运行一个容器，处于运行状态</li><li>docker pause：让一个运行的容器暂停</li><li>docker unpause：让一个容器从暂停状态恢复运行</li><li>docker stop：停止一个运行的容器</li><li>docker start：让一个停止的容器再次运行</li><li>docker rm：删除一个容器</li><li>docer ps：查看所有运行的容器及状态</li><li>docker logs：查看容器日志</li><li>docker exec：进入容器执行命令</li></ul><h3 id="2-2-2-案例-创建并运行一个容器"><a href="#2-2-2-案例-创建并运行一个容器" class="headerlink" title="2.2.2.案例-创建并运行一个容器"></a>2.2.2.案例-创建并运行一个容器</h3><p>创建并运行nginx容器的命令：</p><pre class="line-numbers language-sh"><code class="language-sh">docker run --name containerName -p 80:80 -d nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令解读：</p><ul><li>docker run ：创建并运行一个容器</li><li>–name : 给容器起一个名字，比如叫做mn</li><li>-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li><li>-d：后台运行容器</li><li>nginx：镜像名称，例如nginx</li></ul><p>这里的<code>-p</code>参数，是将容器端口映射到宿主机端口。</p><p>默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器中的nginx。</p><p>现在，将容器的80与宿主机的80关联起来，当我们访问宿主机的80端口时，就会被映射到容器的80，这样就能访问到nginx了：</p><p><img src="assets/image-20210731163255863.png" alt="image-20210731163255863"></p><h3 id="2-2-3-案例-进入容器，修改文件"><a href="#2-2-3-案例-进入容器，修改文件" class="headerlink" title="2.2.3.案例-进入容器，修改文件"></a>2.2.3.案例-进入容器，修改文件</h3><p><strong>需求</strong>：进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”</p><p><strong>提示</strong>：进入容器要用到docker exec命令。</p><p><strong>步骤</strong>：</p><p>1）进入容器。进入我们刚刚创建的nginx容器的命令为：</p><pre class="line-numbers language-sh"><code class="language-sh">docker exec -it mn bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令解读：</p><ul><li><p>docker exec ：进入容器内部，执行一个命令</p></li><li><p>-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</p></li><li><p>mn ：要进入的容器的名称</p></li><li><p>bash：进入容器后执行的命令，bash是一个linux终端交互命令</p></li></ul><p>2）进入nginx的HTML所在目录 /usr/share/nginx/html</p><p>容器内部会模拟一个独立的Linux文件系统，看起来如同一个linux服务器一样：</p><p><img src="assets/image-20210731164159811.png" alt="image-20210731164159811"></p><p>nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的html文件。</p><p>查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在<code>/usr/share/nginx/html</code></p><p>我们执行命令，进入该目录：</p><pre class="line-numbers language-sh"><code class="language-sh">cd /usr/share/nginx/html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 查看目录下文件：</p><p><img src="assets/image-20210731164455818.png" alt="image-20210731164455818"></p><p>3）修改index.html的内容</p><p>容器内没有vi命令，无法直接修改，我们用下面的命令来修改：</p><pre class="line-numbers language-sh"><code class="language-sh">sed -i -e 's#Welcome to nginx#传智教育欢迎您#g' -e 's#<head>#<head><meta charset="utf-8">#g' index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在浏览器访问自己的虚拟机地址，例如我的是：<a href="http://192.168.150.101，即可看到结果：">http://192.168.150.101，即可看到结果：</a></p><p><img src="assets/image-20210731164717604.png" alt="image-20210731164717604"></p><h3 id="2-2-4-小结"><a href="#2-2-4-小结" class="headerlink" title="2.2.4.小结"></a>2.2.4.小结</h3><p>docker run命令的常见参数有哪些？</p><ul><li>–name：指定容器名称</li><li>-p：指定端口映射</li><li>-d：让容器后台运行</li></ul><p>查看容器日志的命令：</p><ul><li>docker logs</li><li>添加 -f 参数可以持续查看日志</li></ul><p>查看容器状态：</p><ul><li>docker ps</li><li>docker ps -a 查看所有容器，包括已经停止的</li></ul><h2 id="2-3-数据卷（容器数据管理）"><a href="#2-3-数据卷（容器数据管理）" class="headerlink" title="2.3.数据卷（容器数据管理）"></a>2.3.数据卷（容器数据管理）</h2><p>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编辑器，修改文件也很麻烦。</p><p>这就是因为容器与数据（容器内文件）耦合带来的后果。</p><p><img src="assets/image-20210731172440275.png" alt="image-20210731172440275"></p><p>要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。</p><h3 id="2-3-1-什么是数据卷"><a href="#2-3-1-什么是数据卷" class="headerlink" title="2.3.1.什么是数据卷"></a>2.3.1.什么是数据卷</h3><p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录。</p><p><img src="assets/image-20210731173541846.png" alt="image-20210731173541846"></p><p>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。</p><p>这样，我们操作宿主机的/var/lib/docker/volumes/html目录，就等于操作容器内的/usr/share/nginx/html目录了</p><h3 id="2-3-2-数据集操作命令"><a href="#2-3-2-数据集操作命令" class="headerlink" title="2.3.2.数据集操作命令"></a>2.3.2.数据集操作命令</h3><p>数据卷操作的基本语法如下：</p><pre class="line-numbers language-sh"><code class="language-sh">docker volume [COMMAND]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p><ul><li>create 创建一个volume</li><li>inspect 显示一个或多个volume的信息</li><li>ls 列出所有的volume</li><li>prune 删除未使用的volume</li><li>rm 删除一个或多个指定的volume</li></ul><h3 id="2-3-3-创建和查看数据卷"><a href="#2-3-3-创建和查看数据卷" class="headerlink" title="2.3.3.创建和查看数据卷"></a>2.3.3.创建和查看数据卷</h3><p><strong>需求</strong>：创建一个数据卷，并查看数据卷在宿主机的目录位置</p><p>① 创建数据卷</p><pre class="line-numbers language-sh"><code class="language-sh">docker volume create html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>② 查看所有数据</p><pre class="line-numbers language-sh"><code class="language-sh">docker volume ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：</p><p><img src="assets/image-20210731173746910.png" alt="image-20210731173746910"></p><p>③ 查看数据卷详细信息卷</p><pre class="line-numbers language-sh"><code class="language-sh">docker volume inspect html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：</p><p><img src="assets/image-20210731173809877.png" alt="image-20210731173809877"></p><p>可以看到，我们创建的html这个数据卷关联的宿主机目录为<code>/var/lib/docker/volumes/html/_data</code>目录。</p><p><strong>小结</strong>：</p><p>数据卷的作用：</p><ul><li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li></ul><p>数据卷操作：</p><ul><li>docker volume create：创建数据卷</li><li>docker volume ls：查看所有数据卷</li><li>docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置</li><li>docker volume rm：删除指定数据卷</li><li>docker volume prune：删除所有未使用的数据卷</li></ul><h3 id="2-3-4-挂载数据卷"><a href="#2-3-4-挂载数据卷" class="headerlink" title="2.3.4.挂载数据卷"></a>2.3.4.挂载数据卷</h3><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p><pre class="line-numbers language-sh"><code class="language-sh">docker run \  --name mn \  -v html:/root/html \  -p 8080:80  nginx \<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的-v就是挂载数据卷的命令：</p><ul><li><code>-v html:/root/htm</code> ：把html数据卷挂载到容器内的/root/html这个目录中</li></ul><h3 id="2-3-5-案例-给nginx挂载数据卷"><a href="#2-3-5-案例-给nginx挂载数据卷" class="headerlink" title="2.3.5.案例-给nginx挂载数据卷"></a>2.3.5.案例-给nginx挂载数据卷</h3><p><strong>需求</strong>：创建一个nginx容器，修改容器内的html目录内的index.html内容</p><p><strong>分析</strong>：上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置/usr/share/nginx/html ，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容。</p><p><strong>提示</strong>：运行容器时使用 -v 参数挂载数据卷</p><p>步骤：</p><p>① 创建容器并挂载数据卷到容器内的HTML目录</p><pre class="line-numbers language-sh"><code class="language-sh">docker run --name mn -v html:/usr/share/nginx/html -p 80:80 -d nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>② 进入html数据卷所在位置，并修改HTML内容</p><pre class="line-numbers language-sh"><code class="language-sh"># 查看html数据卷的位置docker volume inspect html# 进入该目录cd /var/lib/docker/volumes/html/_data# 修改文件vi index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-6-案例-给MySQL挂载本地目录"><a href="#2-3-6-案例-给MySQL挂载本地目录" class="headerlink" title="2.3.6.案例-给MySQL挂载本地目录"></a>2.3.6.案例-给MySQL挂载本地目录</h3><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p><ul><li>带数据卷模式：宿主机目录 –&gt; 数据卷 —&gt; 容器内目录</li><li>直接挂载模式：宿主机目录 —&gt; 容器内目录</li></ul><p>如图：</p><p><img src="assets/image-20210731175155453.png" alt="image-20210731175155453"></p><p><strong>语法</strong>：</p><p>目录挂载与数据卷挂载的语法是类似的：</p><ul><li>-v [宿主机目录]:[容器内目录]</li><li>-v [宿主机文件]:[容器内文件]</li></ul><p><strong>需求</strong>：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</p><p>实现思路如下：</p><p>1）在将课前资料中的mysql.tar文件上传到虚拟机，通过load命令加载为镜像</p><p>2）创建目录/tmp/mysql/data</p><p>3）创建目录/tmp/mysql/conf，将课前资料提供的hmy.cnf文件上传到/tmp/mysql/conf</p><p>4）去DockerHub查阅资料，创建并运行MySQL容器，要求：</p><p>① 挂载/tmp/mysql/data到mysql容器内数据存储目录</p><p>② 挂载/tmp/mysql/conf/hmy.cnf到mysql容器的配置文件</p><p>③ 设置MySQL密码</p><h3 id="2-3-7-小结"><a href="#2-3-7-小结" class="headerlink" title="2.3.7.小结"></a>2.3.7.小结</h3><p>docker run的命令中通过 -v 参数挂载文件或目录到容器中：</p><ul><li>-v volume名称:容器内目录</li><li>-v 宿主机文件:容器内文</li><li>-v 宿主机目录:容器内目录</li></ul><p>数据卷挂载与目录直接挂载的</p><ul><li>数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找</li><li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li></ul><h1 id="3-Dockerfile自定义镜像"><a href="#3-Dockerfile自定义镜像" class="headerlink" title="3.Dockerfile自定义镜像"></a>3.Dockerfile自定义镜像</h1><p>常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须自己构建镜像了。</p><p>而要自定义镜像，就必须先了解镜像的结构才行。</p><h2 id="3-1-镜像结构"><a href="#3-1-镜像结构" class="headerlink" title="3.1.镜像结构"></a>3.1.镜像结构</h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p><p>我们以MySQL为例，来看看镜像的组成结构：</p><p><img src="assets/image-20210731175806273.png" alt="image-20210731175806273"></p><p>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p><p>我们要构建镜像，其实就是实现上述打包的过程。</p><h2 id="3-2-Dockerfile语法"><a href="#3-2-Dockerfile语法" class="headerlink" title="3.2.Dockerfile语法"></a>3.2.Dockerfile语法</h2><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。</p><p>我们只需要告诉Docker，我们的镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。</p><p>而描述上述信息的文件就是Dockerfile文件。</p><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的**指令(Instruction)**，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p><p><img src="assets/image-20210731180321133.png" alt="image-20210731180321133"></p><p>更新详细语法说明，请参考官网文档： <a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p><h2 id="3-3-构建Java项目"><a href="#3-3-构建Java项目" class="headerlink" title="3.3.构建Java项目"></a>3.3.构建Java项目</h2><h3 id="3-3-1-基于Ubuntu构建Java项目"><a href="#3-3-1-基于Ubuntu构建Java项目" class="headerlink" title="3.3.1.基于Ubuntu构建Java项目"></a>3.3.1.基于Ubuntu构建Java项目</h3><p>需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目</p><ul><li><p>步骤1：新建一个空文件夹docker-demo</p><p><img src="assets/image-20210801101207444.png" alt="image-20210801101207444"></p></li><li><p>步骤2：拷贝课前资料中的docker-demo.jar文件到docker-demo这个目录</p><p><img src="assets/image-20210801101314816.png" alt="image-20210801101314816"></p></li><li><p>步骤3：拷贝课前资料中的jdk8.tar.gz文件到docker-demo这个目录</p><p><img src="assets/image-20210801101410200.png" alt="image-20210801101410200"></p></li><li><p>步骤4：拷贝课前资料提供的Dockerfile到docker-demo这个目录</p><p><img src="assets/image-20210801101455590.png" alt="image-20210801101455590"></p><p>其中的内容如下：</p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile"># 指定基础镜像FROM ubuntu:16.04# 配置环境变量，JDK的安装目录ENV JAVA_DIR=/usr/local# 拷贝jdk和java项目的包COPY ./jdk8.tar.gz $JAVA_DIR/COPY ./docker-demo.jar /tmp/app.jar# 安装JDKRUN cd $JAVA_DIR \ && tar -xf ./jdk8.tar.gz \ && mv ./jdk1.8.0_144 ./java8# 配置环境变量ENV JAVA_HOME=$JAVA_DIR/java8ENV PATH=$PATH:$JAVA_HOME/bin# 暴露端口EXPOSE 8090# 入口，java项目的启动命令ENTRYPOINT java -jar /tmp/app.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>步骤5：进入docker-demo</p><p>将准备好的docker-demo上传到虚拟机任意目录，然后进入docker-demo目录下</p></li><li><p>步骤6：运行命令：</p><pre class="line-numbers language-sh"><code class="language-sh">docker build -t javaweb:1.0 .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>最后访问 <a href="http://192.168.150.101:8090/hello/count%EF%BC%8C%E5%85%B6%E4%B8%AD%E7%9A%84ip%E6%94%B9%E6%88%90%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAip">http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip</a></p><h3 id="3-3-2-基于java8构建Java项目"><a href="#3-3-2-基于java8构建Java项目" class="headerlink" title="3.3.2.基于java8构建Java项目"></a>3.3.2.基于java8构建Java项目</h3><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</p><p>例如，构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。</p><p>需求：基于java:8-alpine镜像，将一个Java项目构建为镜像</p><p>实现思路如下：</p><ul><li><p>① 新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile</p></li><li><p>② 拷贝课前资料提供的docker-demo.jar到这个目录中</p></li><li><p>③ 编写Dockerfile文件：</p><ul><li><p>a ）基于java:8-alpine作为基础镜像</p></li><li><p>b ）将app.jar拷贝到镜像中</p></li><li><p>c ）暴露端口</p></li><li><p>d ）编写入口ENTRYPOINT</p><p>内容如下：</p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">FROM java:8-alpineCOPY ./app.jar /tmp/app.jarEXPOSE 8090ENTRYPOINT java -jar /tmp/app.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>④ 使用docker build命令构建镜像</p></li><li><p>⑤ 使用docker run创建容器并运行</p></li></ul><h2 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4.小结"></a>3.4.小结</h2><p>小结：</p><ol><li><p>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</p></li><li><p>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</p></li><li><p>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</p></li></ol><h1 id="4-Docker-Compose"><a href="#4-Docker-Compose" class="headerlink" title="4.Docker-Compose"></a>4.Docker-Compose</h1><p>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p><p><img src="assets/image-20210731180921742.png" alt="image-20210731180921742"></p><h2 id="4-1-初识DockerCompose"><a href="#4-1-初识DockerCompose" class="headerlink" title="4.1.初识DockerCompose"></a>4.1.初识DockerCompose</h2><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：</p><pre class="line-numbers language-json"><code class="language-json">version<span class="token operator">:</span>&amp;nbsp<span class="token punctuation">;</span><span class="token string">"3.8"</span> services<span class="token operator">:</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>mysql<span class="token operator">:</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>image<span class="token operator">:</span>&amp;nbsp<span class="token punctuation">;</span>mysql<span class="token operator">:</span><span class="token number">5.7</span>.<span class="token number">25</span>    environment<span class="token operator">:</span>     MYSQL_ROOT_PASSWORD<span class="token operator">:</span> <span class="token number">123</span> &amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>volumes<span class="token operator">:</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>-&amp;nbsp<span class="token punctuation">;</span><span class="token string">"/tmp/mysql/data:/var/lib/mysql"</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>-&amp;nbsp<span class="token punctuation">;</span><span class="token string">"/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf"</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>web<span class="token operator">:</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>build<span class="token operator">:</span>&amp;nbsp<span class="token punctuation">;</span>.&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>ports<span class="token operator">:</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>&amp;nbsp<span class="token punctuation">;</span>- <span class="token string">"8090:8090"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的Compose文件就描述一个项目，其中包含两个容器：</p><ul><li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li><li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时8090</li></ul><p>DockerCompose的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p><p>其实DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异。</p><h2 id="4-2-安装DockerCompose"><a href="#4-2-安装DockerCompose" class="headerlink" title="4.2.安装DockerCompose"></a>4.2.安装DockerCompose</h2><p>参考课前资料</p><h2 id="4-3-部署微服务集群"><a href="#4-3-部署微服务集群" class="headerlink" title="4.3.部署微服务集群"></a>4.3.部署微服务集群</h2><p><strong>需求</strong>：将之前学习的cloud-demo微服务集群利用DockerCompose部署</p><p><strong>实现思路</strong>：</p><p>① 查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件</p><p>② 修改自己的cloud-demo项目，将数据库、nacos地址都命名为docker-compose中的服务名</p><p>③ 使用maven打包工具，将项目中的每个微服务都打包为app.jar</p><p>④ 将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中</p><p>⑤ 将cloud-demo上传至虚拟机，利用 docker-compose up -d 来部署</p><h3 id="4-3-1-compose文件"><a href="#4-3-1-compose文件" class="headerlink" title="4.3.1.compose文件"></a>4.3.1.compose文件</h3><p>查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件，而且每个微服务都准备了一个独立的目录：</p><p><img src="assets/image-20210731181341330.png" alt="image-20210731181341330"></p><p>内容如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.2"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">nacos</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nacos/nacos<span class="token punctuation">-</span>server    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">MODE</span><span class="token punctuation">:</span> standalone    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8848:8848"</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>5.7.25    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"$PWD/mysql/data:/var/lib/mysql"</span>      <span class="token punctuation">-</span> <span class="token string">"$PWD/mysql/conf:/etc/mysql/conf.d/"</span>  <span class="token key atrule">userservice</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./user<span class="token punctuation">-</span>service  <span class="token key atrule">orderservice</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./order<span class="token punctuation">-</span>service  <span class="token key atrule">gateway</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./gateway    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"10010:10010"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，其中包含5个service服务：</p><ul><li><code>nacos</code>：作为注册中心和配置中心<ul><li><code>image: nacos/nacos-server</code>： 基于nacos/nacos-server镜像构建</li><li><code>environment</code>：环境变量<ul><li><code>MODE: standalone</code>：单点模式启动</li></ul></li><li><code>ports</code>：端口映射，这里暴露了8848端口</li></ul></li><li><code>mysql</code>：数据库<ul><li><code>image: mysql:5.7.25</code>：镜像版本是mysql:5.7.25</li><li><code>environment</code>：环境变量<ul><li><code>MYSQL_ROOT_PASSWORD: 123</code>：设置数据库root账户的密码为123</li></ul></li><li><code>volumes</code>：数据卷挂载，这里挂载了mysql的data、conf目录，其中有我提前准备好的数据</li></ul></li><li><code>userservice</code>、<code>orderservice</code>、<code>gateway</code>：都是基于Dockerfile临时构建的</li></ul><p>查看mysql目录，可以看到其中已经准备好了cloud_order、cloud_user表：</p><p><img src="assets/image-20210801095205034.png" alt="image-20210801095205034"></p><p>查看微服务目录，可以看到都包含Dockerfile文件：</p><p><img src="assets/image-20210801095320586.png" alt="image-20210801095320586"></p><p>内容如下：</p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">FROM java:8-alpineCOPY ./app.jar /tmp/app.jarENTRYPOINT java -jar /tmp/app.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-3-2-修改微服务配置"><a href="#4-3-2-修改微服务配置" class="headerlink" title="4.3.2.修改微服务配置"></a>4.3.2.修改微服务配置</h3><p>因为微服务将来要部署为docker容器，而容器之间互联不是通过IP地址，而是通过容器名。这里我们将order-service、user-service、gateway服务的mysql、nacos地址都修改为基于容器名的访问。</p><p>如下所示：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//mysql<span class="token punctuation">:</span>3306/cloud_order<span class="token punctuation">?</span>useSSL=false    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> orderservice  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> nacos<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true"># nacos服务地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-3-打包"><a href="#4-3-3-打包" class="headerlink" title="4.3.3.打包"></a>4.3.3.打包</h3><p>接下来需要将我们的每个微服务都打包。因为之前查看到Dockerfile中的jar包名称都是app.jar，因此我们的每个微服务都需要用这个名称。</p><p>可以通过修改pom.xml中的打包名称来实现，每个微服务都需要修改：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 服务打包的最终名称 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打包后：</p><p><img src="assets/image-20210801095951030.png" alt="image-20210801095951030"></p><h3 id="4-3-4-拷贝jar包到部署目录"><a href="#4-3-4-拷贝jar包到部署目录" class="headerlink" title="4.3.4.拷贝jar包到部署目录"></a>4.3.4.拷贝jar包到部署目录</h3><p>编译打包好的app.jar文件，需要放到Dockerfile的同级目录中。注意：每个微服务的app.jar放到与服务名称对应的目录，别搞错了。</p><p>user-service：</p><p><img src="assets/image-20210801100201253.png" alt="image-20210801100201253"></p><p>order-service：</p><p><img src="assets/image-20210801100231495.png" alt="image-20210801100231495"></p><p>gateway：</p><p><img src="assets/image-20210801100308102.png" alt="image-20210801100308102"></p><h3 id="4-3-5-部署"><a href="#4-3-5-部署" class="headerlink" title="4.3.5.部署"></a>4.3.5.部署</h3><p>最后，我们需要将文件整个cloud-demo文件夹上传到虚拟机中，理由DockerCompose部署。</p><p>上传到任意目录：</p><p><img src="assets/image-20210801100955653.png" alt="image-20210801100955653"></p><p>部署：</p><p>进入cloud-demo目录，然后运行下面的命令：</p><pre class="line-numbers language-sh"><code class="language-sh">docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="5-Docker镜像仓库"><a href="#5-Docker镜像仓库" class="headerlink" title="5.Docker镜像仓库"></a>5.Docker镜像仓库</h1><h2 id="5-1-搭建私有镜像仓库"><a href="#5-1-搭建私有镜像仓库" class="headerlink" title="5.1.搭建私有镜像仓库"></a>5.1.搭建私有镜像仓库</h2><p>参考课前资料《CentOS7安装Docker.md》</p><h2 id="5-2-推送、拉取镜像"><a href="#5-2-推送、拉取镜像" class="headerlink" title="5.2.推送、拉取镜像"></a>5.2.推送、拉取镜像</h2><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p><p>① 重新tag本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080/</p><pre class="line-numbers language-sh"><code class="language-sh">docker tag nginx:latest 192.168.150.101:8080/nginx:1.0 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>② 推送镜像</p><pre class="line-numbers language-sh"><code class="language-sh">docker push 192.168.150.101:8080/nginx:1.0 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>③ 拉取镜像</p><pre class="line-numbers language-sh"><code class="language-sh">docker pull 192.168.150.101:8080/nginx:1.0 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/15/ren-gong-zhi-neng/"/>
      <url>/2022/05/15/ren-gong-zhi-neng/</url>
      
        <content type="html"><![CDATA[<h1 id="CV基础入门"><a href="#CV基础入门" class="headerlink" title="CV基础入门"></a>CV基础入门</h1><h2 id="1、读取图片"><a href="#1、读取图片" class="headerlink" title="1、读取图片"></a>1、读取图片</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#导入模块</span><span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token comment" spellcheck="true">#读取图片</span>img<span class="token operator">=</span>cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'lena.jpg'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#路径中不能有中文，否则加载图片失败</span><span class="token comment" spellcheck="true">#显示图片</span>cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'read_img'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#等待键盘输入 单位毫秒  传入0 则就是无限等待</span>cv<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#释放内存  由于OpenCV底层是C++编写的</span>cv<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、灰度转化"><a href="#2、灰度转化" class="headerlink" title="2、灰度转化"></a>2、灰度转化</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cvimg<span class="token operator">=</span>cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'lena.jpg'</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'BGR_img'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将图片灰度转换</span>gray_img<span class="token operator">=</span>cv<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'gray_img'</span><span class="token punctuation">,</span>gray_img<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#保存图片</span>cv<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'gray_lena.jpg'</span><span class="token punctuation">,</span>gray_img<span class="token punctuation">)</span>cv<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、修改图片尺寸"><a href="#3、修改图片尺寸" class="headerlink" title="3、修改图片尺寸"></a>3、修改图片尺寸</h2><pre class="line-numbers language-python"><code class="language-python">pyimport cv2 <span class="token keyword">as</span> cvimg<span class="token operator">=</span>cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'lena.jpg'</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'原来图片的形状'</span><span class="token punctuation">,</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># resize_img=cv.resize(img,dsize=(200,240))</span>resize_img<span class="token operator">=</span>cv<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img<span class="token punctuation">,</span>dsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">560</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'修改后图片的形状：'</span><span class="token punctuation">,</span>resize_img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'resize_img'</span><span class="token punctuation">,</span>resize_img<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># cv.waitKey(0)</span><span class="token comment" spellcheck="true">#只有输入q时候，退出</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> ord<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token operator">==</span>cv<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>cv<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、绘制选取框——矩形、圆"><a href="#4、绘制选取框——矩形、圆" class="headerlink" title="4、绘制选取框——矩形、圆"></a>4、绘制选取框——矩形、圆</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cvimg<span class="token operator">=</span>cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'lena.jpg'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#左上角的坐标是(x,y) 矩形的宽度和高度(w,h)</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>w<span class="token punctuation">,</span>h<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span>cv<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>thickness<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#BGR</span><span class="token comment" spellcheck="true">#绘制圆center元组指圆点的坐标  radius：半径</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span>cv<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>img<span class="token punctuation">,</span>center<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>radius<span class="token operator">=</span>r<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>thickness<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#显示图片</span>cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'rectangle_img'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>cv<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、检测图片中的人脸"><a href="#5、检测图片中的人脸" class="headerlink" title="5、检测图片中的人脸"></a>5、检测图片中的人脸</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">def</span> <span class="token function">face_detect_demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#将图片灰度</span>    gray<span class="token operator">=</span>cv<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#加载特征数据</span>    face_detector <span class="token operator">=</span> cv<span class="token punctuation">.</span>CascadeClassifier<span class="token punctuation">(</span>        <span class="token string">'E:/code_set/face_demo/facecode/haarcascade_frontalface_default.xml'</span><span class="token punctuation">)</span>    faces <span class="token operator">=</span> face_detector<span class="token punctuation">.</span>detectMultiScale<span class="token punctuation">(</span>gray<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 绘制选取框</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>w<span class="token punctuation">,</span>h <span class="token keyword">in</span> faces<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>w<span class="token punctuation">,</span>h<span class="token punctuation">)</span>        cv<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>thickness<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        cv<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>img<span class="token punctuation">,</span>center<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">+</span>w<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>radius<span class="token operator">=</span>w<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>thickness<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#显示图片</span>    cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#加载图片</span>img<span class="token operator">=</span>cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'face3.jpg'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用人脸检测方法</span>face_detect_demo<span class="token punctuation">(</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、检测视频中的人脸"><a href="#6、检测视频中的人脸" class="headerlink" title="6、检测视频中的人脸"></a>6、检测视频中的人脸</h2><pre class="line-numbers language-python"><code class="language-python">pyimport cv2 <span class="token keyword">as</span> cv<span class="token keyword">def</span> <span class="token function">face_detect_demo</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#将图片灰度</span>    gray<span class="token operator">=</span>cv<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#加载特征数据</span>    face_detector <span class="token operator">=</span> cv<span class="token punctuation">.</span>CascadeClassifier<span class="token punctuation">(</span>        <span class="token string">'E:/soft/opencv/opencv/sources/data/haarcascades/haarcascade_frontalface_default.xml'</span><span class="token punctuation">)</span>    faces <span class="token operator">=</span> face_detector<span class="token punctuation">.</span>detectMultiScale<span class="token punctuation">(</span>gray<span class="token punctuation">)</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>w<span class="token punctuation">,</span>h <span class="token keyword">in</span> faces<span class="token punctuation">:</span>        cv<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>thickness<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        cv<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>img<span class="token punctuation">,</span>center<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">+</span>w<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>radius<span class="token operator">=</span><span class="token punctuation">(</span>w<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>thickness<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#读取视频</span>cap <span class="token operator">=</span> cv<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token string">'video.mp4'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    flag<span class="token punctuation">,</span>frame<span class="token operator">=</span>cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag:'</span><span class="token punctuation">,</span>flag<span class="token punctuation">,</span><span class="token string">'frame.shape:'</span><span class="token punctuation">,</span>frame<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> flag<span class="token punctuation">:</span>        <span class="token keyword">break</span>    face_detect_demo<span class="token punctuation">(</span>frame<span class="token punctuation">)</span>    <span class="token keyword">if</span> ord<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span> <span class="token operator">==</span> cv<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>cv<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>cap<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、训练数据"><a href="#7、训练数据" class="headerlink" title="7、训练数据"></a>7、训练数据</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> cv2<span class="token keyword">import</span> sys<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">getImageAndLabels</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    facesSamples<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    ids<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    imagePaths<span class="token operator">=</span><span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span>f<span class="token punctuation">)</span> <span class="token keyword">for</span> f <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#检测人脸</span>    face_detector <span class="token operator">=</span> cv2<span class="token punctuation">.</span>CascadeClassifier<span class="token punctuation">(</span>        <span class="token string">'E:/code_set/face_demo/facecode/haarcascade_frontalface_default.xml'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#遍历列表中的图片</span>    <span class="token keyword">for</span> imagePath <span class="token keyword">in</span> imagePaths<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#打开图片</span>        PIL_img<span class="token operator">=</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>imagePath<span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#将图像转换为数组</span>        img_numpy<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>PIL_img<span class="token punctuation">,</span><span class="token string">'uint8'</span><span class="token punctuation">)</span>        faces <span class="token operator">=</span> face_detector<span class="token punctuation">.</span>detectMultiScale<span class="token punctuation">(</span>img_numpy<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#获取每张图片的id</span>        id<span class="token operator">=</span>int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>imagePath<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>w<span class="token punctuation">,</span>h <span class="token keyword">in</span> faces<span class="token punctuation">:</span>            facesSamples<span class="token punctuation">.</span>append<span class="token punctuation">(</span>img_numpy<span class="token punctuation">[</span>y<span class="token punctuation">:</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span>x<span class="token punctuation">:</span>x<span class="token operator">+</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span>            ids<span class="token punctuation">.</span>append<span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token keyword">return</span> facesSamples<span class="token punctuation">,</span>ids<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#图片路径</span>    path<span class="token operator">=</span><span class="token string">'./data/jm/'</span>    <span class="token comment" spellcheck="true">#获取图像数组和id标签数组</span>    faces<span class="token punctuation">,</span>ids <span class="token operator">=</span> getImageAndLabels<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取训练对象</span>    recognizer<span class="token operator">=</span>cv2<span class="token punctuation">.</span>face<span class="token punctuation">.</span>LBPHFaceRecognizer_create<span class="token punctuation">(</span><span class="token punctuation">)</span>    recognizer<span class="token punctuation">.</span>train<span class="token punctuation">(</span>faces<span class="token punctuation">,</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#保存文件</span>    recognizer<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'trainer/trainer.yml'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、人脸识别"><a href="#8、人脸识别" class="headerlink" title="8、人脸识别"></a>8、人脸识别</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> os<span class="token comment" spellcheck="true">#加载训练数据集文件</span>recogizer<span class="token operator">=</span>cv2<span class="token punctuation">.</span>face<span class="token punctuation">.</span>LBPHFaceRecognizer_create<span class="token punctuation">(</span><span class="token punctuation">)</span>recogizer<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">'trainer/trainer.yml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#准备识别的图片</span>img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'30.jpg'</span><span class="token punctuation">)</span>gray<span class="token operator">=</span>cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>face_detector <span class="token operator">=</span> cv2<span class="token punctuation">.</span>CascadeClassifier<span class="token punctuation">(</span>    <span class="token string">'E:/code_set/face_demo/facecode/haarcascade_frontalface_default.xml'</span><span class="token punctuation">)</span>faces <span class="token operator">=</span> face_detector<span class="token punctuation">.</span>detectMultiScale<span class="token punctuation">(</span>gray<span class="token punctuation">)</span><span class="token keyword">for</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>w<span class="token punctuation">,</span>h <span class="token keyword">in</span> faces<span class="token punctuation">:</span>    cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#人脸识别</span>    id<span class="token punctuation">,</span>confidence<span class="token operator">=</span>recogizer<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>gray<span class="token punctuation">[</span>y<span class="token punctuation">:</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span>x<span class="token punctuation">:</span>x<span class="token operator">+</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'标签id:'</span><span class="token punctuation">,</span>id<span class="token punctuation">,</span><span class="token string">'置信评分：'</span><span class="token punctuation">,</span>confidence<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/07/c-yu-yan-ji-chu/"/>
      <url>/2022/05/07/c-yu-yan-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言基础"><a href="#C语言基础" class="headerlink" title="C语言基础"></a>C语言基础</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220506164716666.png" alt="image-20220506164716666"></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><ul><li><p>putchar     输出函数</p></li><li><p>getchar     输入函数</p></li><li><p>printf        格式输出函数</p></li><li><p>scanf        格式输入函数</p></li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220506165305348.png" alt="image-20220506165305348"></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><blockquote><p> 所谓的“目”是指这个运算符参与运算的对象个数</p></blockquote><ul><li><p>单目运算符 ：自增++和 自减–</p></li><li><p>双目运算符 ：加法+、 减法-、 乘法*、 除法/、 求模%</p></li><li><p>长度(求字节)运算符 ： sizeof</p></li><li><p>逻辑运算符 ：逻辑与&amp;&amp;（双目）、逻辑或||（双目）、逻辑非！（单目）</p></li><li><p>三目运算符 ：表达式1?表达式2:表达式3</p></li><li><p>关系运算符 ：大于&gt;、小于&lt;、大于或等于&gt;=、小于或等于&lt;=、是否等于==、是否不等于!= </p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/03/27/tkmapper-zheng-he-shi-yong/"/>
      <url>/2022/03/27/tkmapper-zheng-he-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="一、tkMapper"><a href="#一、tkMapper" class="headerlink" title="一、tkMapper"></a>一、tkMapper</h1><blockquote><p>实体类与数据表存在对应关系，并且是有规律的一一只要知道了数据表的结构，就能够生成实体类;<br>所有实体的DAO接口中定义的方法也是有规律的，不同点就是实体类型不同 </p></blockquote><ul><li>UserDAO</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDAO</span> <span class="token keyword">extends</span> <span class="token class-name">GeneralDAO</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>GoodsDAO</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GoodsDAO</span> <span class="token keyword">extends</span> <span class="token class-name">GeneralDAO</span><span class="token operator">&lt;</span>Goods<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>GeneralDAO</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GeneralDAO</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通用方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> T <span class="token function">queryOneByPrimarykey</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对于GeneralDAO接口定义的数据库操作方法因为使用了泛型，无需映射文件；对于UserDAO和GoodsDAO需要<br>映射文件，所有DAO的相同操作的映射文件也是有规律可循的</li><li>UserMapper</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>insert id<span class="token operator">=</span><span class="token string">"insert"</span><span class="token operator">></span>    insert into <span class="token function">users</span><span class="token punctuation">(</span>user_id<span class="token punctuation">,</span>username<span class="token punctuation">)</span> <span class="token function">values</span><span class="token punctuation">(</span>#<span class="token punctuation">{</span>userId<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>username<span class="token punctuation">}</span>）<span class="token operator">&lt;</span><span class="token operator">/</span>insert<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>       <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> GoodsMapper</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>insert id<span class="token operator">=</span><span class="token string">"insert"</span><span class="token operator">></span>    insert into <span class="token function">goods</span><span class="token punctuation">(</span>goods_id<span class="token punctuation">,</span>goodsrname<span class="token punctuation">)</span> <span class="token function">values</span><span class="token punctuation">(</span>#<span class="token punctuation">{</span>goodsId<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>goodsname<span class="token punctuation">}</span>）<span class="token operator">&lt;</span><span class="token operator">/</span>insert<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span><span class="token string">"product"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>       <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span><span class="token string">"goods_id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span><span class="token string">"goodsname"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、tkMapper"><a href="#二、tkMapper" class="headerlink" title="二、tkMapper"></a>二、tkMapper</h1><blockquote><p>基于MyBatis提供了很多第三方插件，这些插件通常可以完成数据操作方法的封装（GeneralDAO）、数据库逆向工程工作(根据数据表生成实体类、生成映射文件)</p><ul><li>MyBatis-plus</li><li>tkMapper</li></ul></blockquote><p>tkMapper就是一个MyBatis插件，是在MyBatis的基础上提供了很多工具，让开发变得简单，提高开发效率。</p><ul><li>提供了针对单表通用的数据库操作方法</li><li> 逆向工程（根据数据表生成实体类、dao接口、映射文件）</li></ul><h1 id="三、tkMapper整合"><a href="#三、tkMapper整合" class="headerlink" title="三、tkMapper整合"></a>三、tkMapper整合</h1><h2 id="3-1-基于SpringBoot完成MyBatis的整合"><a href="#3-1-基于SpringBoot完成MyBatis的整合" class="headerlink" title="3.1 基于SpringBoot完成MyBatis的整合"></a>3.1 基于SpringBoot完成MyBatis的整合</h2><h2 id="3-2整合tkMapper"><a href="#3-2整合tkMapper" class="headerlink" title="3.2整合tkMapper"></a>3.2整合tkMapper</h2><h3 id="3-2-1添加tkMapper的依赖"><a href="#3-2-1添加tkMapper的依赖" class="headerlink" title="3.2.1添加tkMapper的依赖"></a>3.2.1添加tkMapper的依赖</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>tk.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-2修改启动类的-MapperScan-注解的包"><a href="#3-2-2修改启动类的-MapperScan-注解的包" class="headerlink" title="3.2.2修改启动类的@MapperScan 注解的包"></a>3.2.2修改启动类的@MapperScan 注解的包</h3><ul><li>为 tk .mybatis .spring.annotation.MapperScan</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MapperScan<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.qfedu.tkmapperdemo.dao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TkmapperDemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>TkmapperDemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、tkMapper使用"><a href="#四、tkMapper使用" class="headerlink" title="四、tkMapper使用"></a>四、tkMapper使用</h1><h2 id="4-1-创建DAO接口"><a href="#4-1-创建DAO接口" class="headerlink" title="4.1 创建DAO接口"></a>4.1 创建DAO接口</h2><blockquote><p>tkMapper已经完成了对单表的通用操作的封装，封装在Mapper接口和MySqlMapper接口；因此如果我们要完成对单表的操作，只需自定义DAO接口继承Mapper接口和MySqIMapper接口</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDAO</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">,</span> MySqlMapper<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-2-tkMapper提供的方法"><a href="#4-2-tkMapper提供的方法" class="headerlink" title="4.2 tkMapper提供的方法"></a>4.2 tkMapper提供的方法</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> TkmapperDemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CategoryDAOTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CategoryDAO categoryDAO<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> vold <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Category category <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Category</span><span class="token punctuation">(</span>日<span class="token punctuation">,</span><span class="token string">"测试类别3"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"03.png"</span><span class="token punctuation">,</span><span class="token string">"xixi"</span><span class="token punctuation">,</span><span class="token string">"aaa.jpg"</span><span class="token punctuation">,</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//int i = categoryDAO.insert(category);</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> categoryDAO<span class="token punctuation">.</span><span class="token function">insertUseGeneratedKeys</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Category category <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Category</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token string">"测试类别4"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"04.png"</span><span class="token punctuation">,</span><span class="token string">"heihei"</span><span class="token punctuation">,</span><span class="token string">"aaa.jpg"</span><span class="token punctuation">,</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> categoryDAO<span class="token punctuation">.</span><span class="token function">updateByPrimaryKey</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据自定义条件修改，Example example就是封装条件的</span>        <span class="token comment" spellcheck="true">// int i1 = categoryDAO.updateByExample( Example example);</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> categoryDAO<span class="token punctuation">.</span><span class="token function">deleteByPrimaryKey</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据条件删除</span>        <span class="token comment" spellcheck="true">//int i1 = categoryDAO.deleteByExample(Example example);</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//查询所有</span>        List<span class="token operator">&lt;</span>Category<span class="token operator">></span> categories <span class="token operator">=</span> categoryDAO<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Category category<span class="token operator">:</span> categories<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据主键查询</span>        Category category <span class="token operator">=</span> categoryDAO<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//分页查询</span>        <span class="token keyword">int</span> pageNum <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pageSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token punctuation">(</span>pageNum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>pageSize<span class="token punctuation">;</span>                RowBounds rowBounds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>                List<span class="token operator">&lt;</span>Category<span class="token operator">></span> categories <span class="token operator">=</span> categoryDAO<span class="token punctuation">.</span><span class="token function">selectByRowBounds</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Category</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Category category<span class="token operator">:</span> categories<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//查询总记录数</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> categoryDAO<span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Category</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//带条件分页</span>        <span class="token comment" spellcheck="true">//条件</span>        Example example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span>Category<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Example<span class="token punctuation">.</span>Criteria criteria <span class="token operator">=</span> example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        criteria<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span><span class="token string">"categoryLevel"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//分页</span>        <span class="token keyword">int</span> pageNum <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pageSize <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token punctuation">(</span>pageNum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>pageSize<span class="token punctuation">;</span>        RowBounds rowBounds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>                List<span class="token operator">&lt;</span>Category<span class="token operator">></span> categories <span class="token operator">=</span> categoryDAO<span class="token punctuation">.</span><span class="token function">selectByExampleAndRowBounds</span><span class="token punctuation">(</span>example<span class="token punctuation">,</span>rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Category category<span class="token operator">:</span> categories<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//查询总记录数（满足条件）</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> categoryDAO<span class="token punctuation">.</span><span class="token function">selectCountByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3-多表关联查询"><a href="#4-3-多表关联查询" class="headerlink" title="4.3 多表关联查询"></a>4.3 多表关联查询</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询用户同时查询订单</span>    Example example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Example<span class="token punctuation">.</span>Criteria criteria <span class="token operator">=</span> example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    criteria<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span> property<span class="token punctuation">.</span><span class="token string">"username"</span><span class="token punctuation">,</span> value<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据用户名查询用户</span>    <span class="token comment" spellcheck="true">//1.先根据用户名查询用户信息</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userDAO<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.再根据用户id到订单表查询订单</span>    Example example1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span>Orders<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Example<span class="token punctuation">.</span>Criteria criteria1 <span class="token operator">=</span> example1<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    criteria1<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span>lproperty<span class="token operator">:</span><span class="token string">"userId"</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Orders<span class="token operator">></span> ordersList <span class="token operator">=</span> orderDAO<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.将查询到订单集合设置到user</span>    user<span class="token punctuation">.</span><span class="token function">setordersList</span><span class="token punctuation">(</span>ordersList<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>也可以自定义sql语句进行关联查询</li></ul><h2 id="4-4-逆向工程——类似代码生成器"><a href="#4-4-逆向工程——类似代码生成器" class="headerlink" title="4.4 逆向工程——类似代码生成器"></a>4.4 逆向工程——类似代码生成器</h2><ul><li>引入插件和依赖</li><li>在resource/gnerator目录下创建generatorConfig.xml</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- mysql的驱动版本要和pom文件中的mysql驱动版本一致 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configurationFile</span><span class="token punctuation">></span></span>${basedir}/src/main/resources/generator/generatorConfig.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configurationFile</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.27<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>tk.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE generatorConfiguration        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入数据库连接配置 --></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;properties resource="jdbc.properties "/>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Mysql<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyBatis3Simple<span class="token punctuation">"</span></span> <span class="token attr-name">defaultModelType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beginningDelimiter<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>`<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>endingDelimiter<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>`<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置 GeneralDAO --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tk.mybatis.mapper.generator.MapperPlugin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mappers<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ly.lymall.general.GeneralDAO<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置数据库连接--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span>            <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span>            <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mall<span class="token punctuation">"</span></span>            <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>            <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- connectionURL属性，防止乱码 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useUnicode<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- connectionURL属性，防止乱码 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- connectionURL属性，防止报时间错误 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>serverTimezone<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- connectionURL属性，防止生成不同数据库同名表的代码 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nullCatalogMeansCurrent<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置实体类存放路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ly.lymall.entity<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置 XML 存放路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/main/resources/mappers<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置 DAO 存放路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span>  <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ly.lymall.dao<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- %代表要生成所有表 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将配置文件设置到逆向工程的maven插件</li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220327234318471.png" alt="image-20220327234318471"></p><ul><li>启动generator</li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220401090955559.png" alt="image-20220401090955559"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/03/26/maven-ju-he-gong-cheng/"/>
      <url>/2022/03/26/maven-ju-he-gong-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven聚合工程"><a href="#Maven聚合工程" class="headerlink" title="Maven聚合工程"></a>Maven聚合工程</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220326234743721.png" alt="image-20220326234743721"></p><ul><li>两个组件之间的互相调用必须要被打包在同一个jar包中</li></ul><h2 id="二、创建聚合工程"><a href="#二、创建聚合工程" class="headerlink" title="二、创建聚合工程"></a>二、创建聚合工程</h2><h3 id="2-1-创建父工程"><a href="#2-1-创建父工程" class="headerlink" title="2.1 创建父工程"></a>2.1 创建父工程</h3><ul><li><p>创建一个maven工程</p></li><li><p>修改父工程的pom.xml文件，设置打包方式为pom</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>Maven-pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>父工程用于管理子工程，不进行业务实现</p></li></ul><h3 id="2-2-创建Module"><a href="#2-2-创建Module" class="headerlink" title="2.2 创建Module"></a>2.2 创建Module</h3><ul><li><p>创建新module子工程</p></li><li><p>子工程继承父工程</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 继承父工程 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>Maven-pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>父工程声明子module</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>Maven-pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子模块组件直接调用</p></li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220327095122365.png" alt="image-20220327095122365"></p><p>易错点：一定要注意打包路径名称不要写错了，不然就会找不到包路径，报unkown的错误</p><h2 id="三、Maven依赖继承"><a href="#三、Maven依赖继承" class="headerlink" title="三、Maven依赖继承"></a>三、Maven依赖继承</h2><h3 id="3-1-依赖继承"><a href="#3-1-依赖继承" class="headerlink" title="3.1 依赖继承"></a>3.1 依赖继承</h3><ul><li>在父工程pom中添加的依赖都会被子工程继承</li><li>子工程pom中单独添加的依赖，父工程无法引用</li></ul><h3 id="3-2-依赖版本管理"><a href="#3-2-依赖版本管理" class="headerlink" title="3.2 依赖版本管理"></a>3.2 依赖版本管理</h3><ul><li>父工程pom中的dependencyManagement中定义的依赖，子工程若想使用，必须在pom中再次定义，但是不需要添加版本，版本默认被父工程的dependencyManagement管理</li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220327102640675.png" alt="image-20220327102640675"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/03/26/qian-hou-fen-chi-xiang-mu-shang-cheng/"/>
      <url>/2022/03/26/qian-hou-fen-chi-xiang-mu-shang-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="一、架构的演变"><a href="#一、架构的演变" class="headerlink" title="一、架构的演变"></a>一、架构的演变</h1><h2 id="1-1-前后端分离"><a href="#1-1-前后端分离" class="headerlink" title="1.1 前后端分离"></a>1.1 前后端分离</h2><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220326224659391.png" alt="image-20220326224659391"></p><ul><li>优点： 将对静态资源的访问和对接口的访问分离，Tomcat只负责数据的访问，可以支持更多的并发访问</li></ul><h2 id="1-2-集群"><a href="#1-2-集群" class="headerlink" title="1.2 集群"></a>1.2 集群</h2><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220326225502758.png" alt="image-20220326225502758"></p><ul><li>负载均衡：将对集群的并发请求按需分配到不同的服务器节点上</li></ul><h2 id="1-3-分布式"><a href="#1-3-分布式" class="headerlink" title="1.3 分布式"></a>1.3 分布式</h2><ul><li><p>基于redis实现分布式锁</p></li><li><p>分布式数据库mycat</p></li><li><p>redis集群</p></li><li><p>数据库中间件 ElasticSearch</p></li><li><p>消息中间件 RabbitMQ</p></li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220326231333607.png" alt="#"></p><h2 id="1-4-微服务"><a href="#1-4-微服务" class="headerlink" title="1.4 微服务"></a>1.4 微服务</h2><ul><li>原理：将原来一个应用中开发的多个模块进行拆分，单独开发和部署</li><li>保证可用性和性能</li></ul><h1 id="二、商城项目"><a href="#二、商城项目" class="headerlink" title="二、商城项目"></a>二、商城项目</h1><h2 id="2-1-技术储备"><a href="#2-1-技术储备" class="headerlink" title="2.1 技术储备"></a>2.1 技术储备</h2><ul><li>（√）SpringBoot：进行SSM的整合</li><li>（√）Maven聚合工程：实现模块的复用</li></ul><h2 id="2-2-Maven聚合工程"><a href="#2-2-Maven聚合工程" class="headerlink" title="2.2 Maven聚合工程"></a>2.2 Maven聚合工程</h2><h3 id="2-2-1-创建父工程lymall"><a href="#2-2-1-创建父工程lymall" class="headerlink" title="2.2.1 创建父工程lymall"></a>2.2.1 创建父工程lymall</h3><ul><li>创建一个maven工程，设置packing为pom</li><li>父工程继承 spring-boot-starter-parent</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.ly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lymall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>mapper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-2-创建common工程"><a href="#2-2-2-创建common工程" class="headerlink" title="2.2.2 创建common工程"></a>2.2.2 创建common工程</h3><ul><li>新建new module（Maven工程）</li><li>修改pom.xml，设置package为jar</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lymall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.ly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-3-创建beans工程"><a href="#2-2-3-创建beans工程" class="headerlink" title="2.2.3 创建beans工程"></a>2.2.3 创建beans工程</h3><ul><li>新建new module（Maven工程）</li><li>修改pom.xml，设置package为jar</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lymall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.ly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-4-创建mapper工程"><a href="#2-2-4-创建mapper工程" class="headerlink" title="2.2.4 创建mapper工程"></a>2.2.4 创建mapper工程</h3><ul><li>新建new module（Maven工程）</li><li>修改pom.xml，设置package为jar</li><li>在pom中依赖beans</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.ly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-5-创建service工程"><a href="#2-2-5-创建service工程" class="headerlink" title="2.2.5 创建service工程"></a>2.2.5 创建service工程</h3><ul><li>新建new module（Maven工程）</li><li>修改pom.xml，设置package为jar</li><li>在pom中依赖mapper、common</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.ly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.ly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-6-创建api工程"><a href="#2-2-6-创建api工程" class="headerlink" title="2.2.6 创建api工程"></a>2.2.6 创建api工程</h3><ul><li>新建new module（Spring Boot工程）</li><li>修改pom.xml，继承lymall</li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lymall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.ly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>删除自己的groupId和version</p></li><li><p>将spring boot的依赖定义到父工程中</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在父工程的modules中添加api</li><li>在api中依赖service</li></ul><pre class="line-numbers language-xm;l"><code class="language-xm;l"><dependencies>    <dependency>        <groupId>com.ly</groupId>        <artifactId>service</artifactId>        <version>2.0.1</version>    </dependency></dependencies><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220327112618548.png" alt="image-20220327112618548"></p><h2 id="2-3-依赖继承分析"><a href="#2-3-依赖继承分析" class="headerlink" title="2.3 依赖继承分析"></a>2.3 依赖继承分析</h2><blockquote><p>如果将依赖添加到父工程的pom中，根据依赖的继承关系，所有的子工程都会继承父工程的依赖：</p><ul><li>好处：当多个子工程都需要此种依赖时，无需重复引入</li><li>缺点：如果子工程不需要这个依赖，根据继承关系，将会被强制继承</li></ul></blockquote><h2 id="2-4-依赖配置"><a href="#2-4-依赖配置" class="headerlink" title="2.4 依赖配置"></a>2.4 依赖配置</h2><h3 id="2-4-1-common子工程"><a href="#2-4-1-common子工程" class="headerlink" title="2.4.1 common子工程"></a>2.4.1 common子工程</h3><ul><li>lombok</li></ul><h3 id="2-4-2-beans子工程"><a href="#2-4-2-beans子工程" class="headerlink" title="2.4.2 beans子工程"></a>2.4.2 beans子工程</h3><ul><li>Lombok</li></ul><h3 id="2-4-3-mapper子工程——MyBatis整合"><a href="#2-4-3-mapper子工程——MyBatis整合" class="headerlink" title="2.4.3 mapper子工程——MyBatis整合"></a>2.4.3 mapper子工程——MyBatis整合</h3><ul><li>在pom中新增Mybatis依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--mysql驱动--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.27<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--springboot-starter--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--mybatis-starter--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在mapper工程下创建application.yml</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/vueblog<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;characterEncoding</span>=utf8<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mappers/<span class="token important">*Mapper</span>.xml  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.ly.lymall.entity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在api工程中的启动类通过 @MapperScan 声明dao包的路径</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MapperScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.ly.lymall.dao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ApiApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-基于Springboot单元测试"><a href="#2-5-基于Springboot单元测试" class="headerlink" title="2.5 基于Springboot单元测试"></a>2.5 基于Springboot单元测试</h2><h3 id="2-5-1-引入依赖"><a href="#2-5-1-引入依赖" class="headerlink" title="2.5.1 引入依赖"></a>2.5.1 引入依赖</h3><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-2-单元测试"><a href="#2-5-2-单元测试" class="headerlink" title="2.5.2 单元测试"></a>2.5.2 单元测试</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>ApiApplication<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringRunner<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author ly * @create 2022-03-27 12:22 */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> ApiApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> UserDao userDAO<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryUserByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> userDAO<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span><span class="token string">"Lucy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-6-整合Druid"><a href="#2-6-整合Druid" class="headerlink" title="2.6 整合Druid"></a>2.6 整合Druid</h2><h3 id="2-6-1-添加依赖"><a href="#2-6-1-添加依赖" class="headerlink" title="2.6.1 添加依赖"></a>2.6.1 添加依赖</h3><ul><li>mapper工程中添加Druid的springboot-starter</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-2-配置Druid"><a href="#2-6-2-配置Druid" class="headerlink" title="2.6.2 配置Druid"></a>2.6.2 配置Druid</h3><ul><li>修改数据源配置application.yml</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/vueblog<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;characterEncoding</span>=utf8<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mappers/<span class="token important">*Mapper</span>.xml  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.ly.lymall.entity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-7-易错难点"><a href="#2-7-易错难点" class="headerlink" title="2.7 易错难点"></a>2.7 易错难点</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>该配置不应该被放置于parent工程中，这会导致子工程打包出现错误</li><li><strong>这个插件的 repackage 目标会处理 jar 包，导致依赖它的模块无法使用它。在 parent 项目中使用它会导致每个子项目都执行了该目标，进而出现编译失败。</strong></li></ul><h1 id="三、商城数据库设计"><a href="#三、商城数据库设计" class="headerlink" title="三、商城数据库设计"></a>三、商城数据库设计</h1><h2 id="3-1-数据库设计流程"><a href="#3-1-数据库设计流程" class="headerlink" title="3.1 数据库设计流程"></a>3.1 数据库设计流程</h2><ul><li>根据项目功能分析数据实体（数据实体，就是应用系统中要存储的数据对象）<ul><li>商品、订单、购物车、用户、评价、地址…</li></ul></li><li>提取数据实体的数据项（数据对象的属性）<ul><li>商品(商品id、商品名称、商品描述，特征)</li><li>地址(姓名、地址、电话…)</li></ul></li><li>使用数据库设计三范式检查数据项是否合理</li><li>分析实体关系：E-R图</li><li>数据库建模（三线图）、建模工具</li><li>建库建表-SQL</li></ul><h2 id="3-2-数据库设计分析"><a href="#3-2-数据库设计分析" class="headerlink" title="3.2 数据库设计分析"></a>3.2 数据库设计分析</h2><h3 id="3-2-1-利用PDMan数据库建模"><a href="#3-2-1-利用PDMan数据库建模" class="headerlink" title="3.2.1 利用PDMan数据库建模"></a>3.2.1 利用PDMan数据库建模</h3><ul><li>可视化创建数据表（数据表）</li><li>视图显示数据表之间的关系（关系图）</li><li>导出SQL指令（导出DDL脚本）</li><li>记录数据设计的版本（数据库模型版本的管理）</li><li>同步数据库模型到数据库（建立数据库链接即可）</li></ul><h3 id="3-2-2-SKU和SPU"><a href="#3-2-2-SKU和SPU" class="headerlink" title="3.2.2 SKU和SPU"></a>3.2.2 SKU和SPU</h3><ul><li><p>SPU，是 standard product unit，标准化产品单元，是商品信息聚合的最小单位，属性值、特性相同的商品就可以成为一个SPU。</p></li><li><p>SKU，全称 stock keeping unit，库存量单位。SKU 是用来定价和管理库存的。同款不同尺码不同色都是独立的 SKU，需要有独立的条形码和库存管理</p></li></ul><h1 id="四、商城业务流程设计"><a href="#四、商城业务流程设计" class="headerlink" title="四、商城业务流程设计"></a>四、商城业务流程设计</h1><blockquote><p>在企业项目开发中，当完成项目的需求分析、功能分析、数据库分析与设计之后，项目组按照项目中的功能进行开发任务的分配</p><p>编程接口，简称API（Application Programming Interface），就是软件系统不同组成部分衔接的约定</p></blockquote><h2 id="4-1-登录业务"><a href="#4-1-登录业务" class="headerlink" title="4.1 登录业务"></a>4.1 登录业务</h2><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220327170316247.png" alt="image-20220327170316247"></p><h3 id="4-1-1-用户登录（示例）"><a href="#4-1-1-用户登录（示例）" class="headerlink" title="4.1.1 用户登录（示例）"></a>4.1.1 用户登录（示例）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> ResultVO <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span>                      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"111111"</span><span class="token punctuation">)</span> String pwd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">checkLogin</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接口说明：接收账号并进行校验，返回校验结果</li><li>请求URL：<a href="http://localhost:8080/user/login">http://localhost:8080/user/login</a></li><li>请求方式：GET</li><li>请求参数：</li></ul><table><thead><tr><th>key</th><th>类型</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>username</td><td>String</td><td>是</td><td>用户登录的账号</td></tr><tr><td>password</td><td>String</td><td>否</td><td>用户登录的密码，有默认值</td></tr></tbody></table><ul><li>响应结果：</li></ul><table><thead><tr><th>key</th><th>响应</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>响应状态码</td><td>1000 表示成功，1001表示失败</td></tr><tr><td>msg</td><td>响应提示信息</td><td>提示信息</td></tr><tr><td>data</td><td>响应数据</td><td>登录成功响应user信息，失败响应null</td></tr></tbody></table><h2 id="4-2-Swagger"><a href="#4-2-Swagger" class="headerlink" title="4.2 Swagger"></a>4.2 Swagger</h2><blockquote><p> 前后端分离开发，后端需要编写接口说明文档，会耗费比较多的时间<br>swagger是一个用于生成服务器接口的规范性文档、并且能够对接口进行测试的工具</p></blockquote><h3 id="4-2-1-作用"><a href="#4-2-1-作用" class="headerlink" title="4.2.1 作用"></a>4.2.1 作用</h3><ul><li><p>生成接口说明文档</p></li><li><p>对接口进行测试</p></li></ul><h3 id="4-2-2-整合"><a href="#4-2-2-整合" class="headerlink" title="4.2.2 整合"></a>4.2.2 整合</h3><ul><li>添加依赖（Swagger2\Swagger ul)</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在工程中创建SwaggerConfig</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>ApiInfoBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>PathSelectors<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>RequestHandlerSelectors<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>ApiInfo<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>Contact<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>DocumentationType<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>Docket<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>EnableSwagger2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author ly * @create 2022-03-27 18:44 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*Docket 封装接口文档信息*/</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">getDocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApiInfoBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"《小一商城》后端接口文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"此文档详细说明了api接口规范"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"v 2.0.1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"小李"</span><span class="token punctuation">,</span><span class="token string">"www.lycode.com"</span><span class="token punctuation">,</span><span class="token string">"2396446252@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ApiInfo apiInfo <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Docket docket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//指定文档风格</span>                        <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span>apiInfo<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//指定生成的文档中的封面信息：文档标题、版本、作者</span>                        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.ly.lymall.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//指定响应控制器生成接口文档</span>                        <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> docket<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>解决整合Swagger2 启动类报错</li></ul><pre class="line-numbers language-java"><code class="language-java">在启动类上添加 <span class="token annotation punctuation">@EnableWebMvc</span> 注解<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>解决Swagger2 404问题</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>converter<span class="token punctuation">.</span>HttpMessageConverter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResourceHandlerRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author ly * @create 2022-03-27 19:47 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/statics/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/statics/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解决 SWAGGER 404报错</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/swagger-ui.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>访问swagger页面<ul><li><a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></li></ul></li></ul><h3 id="4-2-3-Swagger中的实用注解"><a href="#4-2-3-Swagger中的实用注解" class="headerlink" title="4.2.3 Swagger中的实用注解"></a>4.2.3 Swagger中的实用注解</h3><ul><li>@Api</li><li>@ApiOperation</li><li>@ApiImplicitParams 、 @ApiImplicitParam</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"提供用户的登录和注册接口"</span><span class="token punctuation">,</span>tags <span class="token operator">=</span> <span class="token string">"用户管理"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"用户登录接口"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"用户登录账号"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"用户登录密码"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"111111"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图：</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220327200600413.png" alt="image-20220327200600413"></p><ul><li><p>@ApiModel、@ApiModelProperty    为接口参数对象添加注释</p></li><li><p>@ApiIgnore 添加此注解的方法将不能显示在swagger页面上</p></li></ul><h3 id="4-2-4-swagger-ui-插件"><a href="#4-2-4-swagger-ui-插件" class="headerlink" title="4.2.4 swagger-ui 插件"></a>4.2.4 swagger-ui 插件</h3><ul><li>导入插件依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger-bootstrap-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>文档访问</li></ul><p><a href="http://ip:port/doc.html">http://ip:port/doc.html</a></p><ul><li>被404 拦截——在WebConfig配置</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 解决 doc 404报错</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"doc.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-3-RESTful规范"><a href="#4-3-RESTful规范" class="headerlink" title="4.3 RESTful规范"></a>4.3 RESTful规范</h2><blockquote><p> 前后端分离开发的项目中，前后端之间是接口进行请求和响应，后端向前端提供请求时就要对外暴露一个URL；URL的设计不能是随意的，需要遵从一定的设计规范——RESTful</p></blockquote><p>RESTful是一种Web api的标准，也就是一种url设计风格/规范</p><ul><li>每个URL请求路径代表服务器上的唯一资源</li></ul><pre class="line-numbers language-xml"><code class="language-xml">传统的URL设计：    http://localhost:8080/goods/delete？goodsId=1 商品1    http://localhost:8080/goods/delete7goodsId=2 商品2RESTful设计：    http://localhost:8088/goods/delete/1 商品1    http://localhost:8080/goods/delete/2 商品2@RequestMapping("/delete/{gid}")public ResultVO deleteGoods(@PathVariable("gid") int goodsId){    return new ResultVO(10800,"delete success",null);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>使用不同的请求方式表示不同的操作</p><ul><li>post   （添加）</li><li>put     （修改）</li><li>get     （查询）</li><li>delete（删除）</li><li>option（预检）</li></ul></li><li><p>接口响应的资源的表现形式采用JSON（或者XML）</p><ul><li>在控制类或者每个接口方法添加@ResponseBody 注解将返回的对象格式为json</li><li> 或者直接在控制器类使用@RestController 注解声明控制器</li></ul></li><li><p>前端（Android\ios\pc）通过无状态的HTTP协议与后端接口进行交互</p></li></ul><h1 id="五、商城设计及实现——用户管理"><a href="#五、商城设计及实现——用户管理" class="headerlink" title="五、商城设计及实现——用户管理"></a>五、商城设计及实现——用户管理</h1><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220327205305415.png" alt="image-20220327205305415"></p><h2 id="创建Mapper、entity、mapperxml"><a href="#创建Mapper、entity、mapperxml" class="headerlink" title="创建Mapper、entity、mapperxml"></a>创建Mapper、entity、mapperxml</h2><ul><li>创建实体类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> String nickname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String realname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userImg<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userMobile<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userEmail<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userSex<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date userBirth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date userRegtime<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date userModtime<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建DAO接口、定义操作方法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//用户注册</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据用户名查询</span>    <span class="token keyword">public</span> User <span class="token function">queryUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建DAO接口的mapper文件并完成配置</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ly.lymall.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into Users(username,password,user_regtime,user_modtime)        values(#{username},#{password},#{user_regtime},#{user_modtime})   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>realname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>realname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_img<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userImg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_mobile<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMobile<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userEmail<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userSex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_birth<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userBirth<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_regtime<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userRegtime<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_modtime<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userModtime<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryUserByName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select user_id,username,password,nickname,realname,user_img,user_mobile,user_email,user_sex,user_birth,user_regtime,user_modtime            from users            where username=#{name}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整合tkMapper——多表生成"><a href="#整合tkMapper——多表生成" class="headerlink" title="整合tkMapper——多表生成"></a>整合tkMapper——多表生成</h2><h2 id="Service服务"><a href="#Service服务" class="headerlink" title="Service服务"></a>Service服务</h2><ul><li>创建service接口</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//用户登录</span>    <span class="token keyword">public</span> ResultVO <span class="token function">checkLogin</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用户注册</span>    <span class="token keyword">public</span> ResultVO <span class="token function">UserResgit</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现service功能</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>UserDao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>MD5Utils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>ResultVO<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Scope<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Transactional<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author ly * @create 2022-03-27 14:52 */</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ResultVO <span class="token function">checkLogin</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据账号查询用户信息</span>        User user <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//用户名不存在</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"用户名不存在"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//对输入的pwd进行加密：md5</span>            String md5Pwd <span class="token operator">=</span> MD5Utils<span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使用加密后的密码 和 user中的密码进行匹配</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>md5Pwd<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//验证成功</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">"登录成功"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//密码错误</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">"密码错误"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> ResultVO <span class="token function">UserResgit</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//线程锁，注册这个过程不能同时进行，会产生冲突</span>            <span class="token comment" spellcheck="true">//1.根据用户名查找，这个用户有没有被注册</span>            User user <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.如果没有被注册则进行保存操作</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String md5Pwd <span class="token operator">=</span> MD5Utils<span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>md5Pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setUserModtime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setUserRegtime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token string">"注册成功！"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">10002</span><span class="token punctuation">,</span><span class="token string">"注册失败！"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span><span class="token string">"用户名已经被注册"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="contoller视图层"><a href="#contoller视图层" class="headerlink" title="contoller视图层"></a>contoller视图层</h2><ul><li>创建controller</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>ResultVO<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author ly * @create 2022-03-27 15:11 */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"提供用户的登录和注册接口"</span><span class="token punctuation">,</span>tags <span class="token operator">=</span> <span class="token string">"用户管理"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"用户登录接口"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"用户登录账号"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"用户登录密码"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResultVO <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span>                          <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span> String pwd<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">checkLogin</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"用户注册接口"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"用户注册账号"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"用户注册密码"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/regist"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResultVO <span class="token function">regist</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">UserResgit</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><ul><li>基于swagger2进行测试</li></ul><h1 id="六、前端功能实现"><a href="#六、前端功能实现" class="headerlink" title="六、前端功能实现"></a>六、前端功能实现</h1><h2 id="6-1-跨域问题"><a href="#6-1-跨域问题" class="headerlink" title="6.1 跨域问题"></a>6.1 跨域问题</h2><ul><li>后端使用@CrossOrigin —— 设置响应头允许跨域访问</li><li>前端使用JSONP设置</li></ul><h2 id="6-2-前端页面间传值"><a href="#6-2-前端页面间传值" class="headerlink" title="6.2 前端页面间传值"></a>6.2 前端页面间传值</h2><ul><li>cookie</li><li>localStorage</li></ul><h1 id="七、前后端分离开发——用户认证"><a href="#七、前后端分离开发——用户认证" class="headerlink" title="七、前后端分离开发——用户认证"></a>七、前后端分离开发——用户认证</h1><h2 id="7-1-单体开发"><a href="#7-1-单体开发" class="headerlink" title="7.1 单体开发"></a>7.1 单体开发</h2><h3 id="session校验"><a href="#session校验" class="headerlink" title="session校验"></a>session校验</h3><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220408081930311.png" alt="image-20220408081930311"></p><blockquote><p>在单体项目中，视图资源（页面）和接口（控制器）都在同一台服务器，用户的多次请求都是基于同一个会话（session），因此可以借助session来进行用户认证判断：</p><p>1.当用户登录成功之后，将用户信息存放到session</p><p>2.当用户再次访问受限资源时，验证session中是否存在用户信息，可以根据session有无用户信息来判断用户<br>是否登录</p></blockquote><h2 id="7-2-前后端开发"><a href="#7-2-前后端开发" class="headerlink" title="7.2 前后端开发"></a>7.2 前后端开发</h2><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220408082213671.png" alt="image-20220408082213671"></p><h3 id="7-2-1-token校验"><a href="#7-2-1-token校验" class="headerlink" title="7.2.1 token校验"></a>7.2.1 token校验</h3><ul><li>后端</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//base64 加密 解密 激活邮件的时候 为 邮箱地址 code验证码 进行加密</span><span class="token comment" spellcheck="true">//当 回传回来后 进行邮箱地址 和 code 的解密</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base64Utils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//加密</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">encode</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//解密</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">decode</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Base64Utils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>ResStauts<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>ResultVO<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Api<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiImplicitParam<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiImplicitParams<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>CrossOrigin<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/shopcar"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"提供购物车功能呢接口"</span><span class="token punctuation">,</span>tags <span class="token operator">=</span> <span class="token string">"购物车管理"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShopcarController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>dataType <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"token"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"校验令牌"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResultVO <span class="token function">listcar</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取token，校验token</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span>ResStauts<span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"请先登录！"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            String decode <span class="token operator">=</span> Base64Utils<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>decode<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"Ly666"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//token校验成功</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span>ResStauts<span class="token punctuation">.</span>OK<span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span>ResStauts<span class="token punctuation">.</span>NO<span class="token punctuation">,</span><span class="token string">"token不合法或已过期！"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//如果登录验证成功，则需要生成令牌token（token就是按照特定规则生成的字符串）</span>String token <span class="token operator">=</span> Base64Utils<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"Ly666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//验证成功</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span>ResStauts<span class="token punctuation">.</span>OK<span class="token punctuation">,</span>token<span class="token punctuation">,</span>users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>前端</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> baseUrl <span class="token operator">=</span> <span class="token string">"http://localhost:8080/"</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#container'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            token<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//进入页面时，需要查询购物车列表（访问购物车列表接口）</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>token <span class="token operator">=</span> <span class="token function">getCookieValue</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"token:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                method<span class="token punctuation">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>                url<span class="token punctuation">:</span> baseUrl <span class="token operator">+</span> <span class="token string">"shopcar/list"</span><span class="token punctuation">,</span>                params<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    token<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>token                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-2-JWT校验"><a href="#7-2-2-JWT校验" class="headerlink" title="7.2.2 JWT校验"></a>7.2.2 JWT校验</h3><blockquote><p>如果按照上述规则生成token:<br>1.简易的token生成规则安全性较差，如果要生成安全性很高的token对加密算法要求较高；</p><p>2.无法完成时效性的校验（登录过期）</p></blockquote><ul><li>JWT:    Json Web Token</li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220408100320673.png" alt="image-20220408100320673"></p><ul><li>依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.18.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>生成token</li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//如果登录验证成功，则需要生成令牌token（token就是按照特定规则生成的字符串）</span><span class="token comment" spellcheck="true">//使用jwt</span>JwtBuilder builder <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String token <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">//主题：token中携带的数据</span>    <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//创建时间</span>    <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//用户id为token的id</span>    <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span>                                     <span class="token comment" spellcheck="true">//map中存放用户的角信息</span>    <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//设置社会过期时间</span>    <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS256<span class="token punctuation">,</span> <span class="token string">"Ly666"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//设置加密方式和密码</span>    <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-3-拦截器"><a href="#7-2-3-拦截器" class="headerlink" title="7.2.3 拦截器"></a>7.2.3 拦截器</h3><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220408122913803.png" alt="image-20220408122913803"></p><ul><li>配置拦截器</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>CheckLoginInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InterceptorRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CheckLoginInterceptor checkLoginInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>checkLoginInterceptor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/shopcar/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/orders/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>拦截器实现</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>interceptor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>ResStauts<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>ResultVO<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>Claims<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>Jws<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>JwtParser<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>Jwts<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author ly * @create 2022-04-08 12:42 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckLoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            ResultVO vo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span>ResStauts<span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"请先登录"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//登录提示</span>            <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>vo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//验证token</span>                JwtParser parser <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                parser<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">"Ly666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果token正确（密码正确，有效期内）正常执行，否则异常</span>                Jws<span class="token operator">&lt;</span>Claims<span class="token operator">></span> claimsJws <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doResponse</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span>ResultVO resultVO<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintWriter out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-3-前端header传值"><a href="#7-3-前端header传值" class="headerlink" title="7.3 前端header传值"></a>7.3 前端header传值</h2><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220415084718060.png" alt="image-20220415084718060"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>interceptor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>ResStauts<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>lymall<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>ResultVO<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>Claims<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>Jws<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>JwtParser<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>Jwts<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author ly * @create 2022-04-08 12:42 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckLoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"OPTIONS"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//前端第一次请求时option，需要放行，TCP三次握手原理</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------"</span><span class="token operator">+</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            ResultVO vo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span>ResStauts<span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"请先登录"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//登录提示</span>            <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>vo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//验证token</span>                JwtParser parser <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                parser<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">"Ly666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果token正确（密码正确，有效期内）正常执行，否则异常</span>                Jws<span class="token operator">&lt;</span>Claims<span class="token operator">></span> claimsJws <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ResultVO vo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultVO</span><span class="token punctuation">(</span>ResStauts<span class="token punctuation">.</span>NO<span class="token punctuation">,</span> <span class="token string">"登录过期"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>vo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doResponse</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span>ResultVO resultVO<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintWriter out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>resultVO<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js">  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      method<span class="token punctuation">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>      url<span class="token punctuation">:</span> baseUrl <span class="token operator">+</span> <span class="token string">"shopcar/list"</span><span class="token punctuation">,</span>      headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//header传值</span>          token<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>token      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/03/18/shiro-kuang-jia/"/>
      <url>/2022/03/18/shiro-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="Shiro框架"><a href="#Shiro框架" class="headerlink" title="Shiro框架"></a>Shiro框架</h1><p>Shiro功能的框架图</p><p><img src="https://pic2.zhimg.com/v2-e72930a8351ccf1590779ea87ac5cb65_r.jpg" alt="preview"></p><p>Authentication（认证）, Authorization（授权）, Session Management（会话管理）, Cryptography（加密）被 Shiro 框架的开发团队称之为应用安全的四大基石。</p><ul><li><strong>Authentication（认证）：</strong>用户身份识别，通常被称为用户“登录”</li><li><strong>Authorization（授权）：</strong>访问控制。比如某个用户是否具有某个操作的使用权限。</li><li><strong>Session Management（会话管理）：</strong>特定于用户的会话管理,甚至在非web 或 EJB 应用程序。</li><li><strong>Cryptography（加密）：</strong>在对数据源使用加密算法加密的同时，保证易于使用。</li></ul><p>Shiro 架构包含三个主要的理念：Subject,SecurityManager和 Realm。</p><p><img src="https://pic3.zhimg.com/80/v2-c0841dfc8cb19a94c322eef635371cf6_720w.jpg" alt="img"></p><ul><li><strong>Subject：</strong>当前用户，Subject 可以是一个人，但也可以是第三方服务、守护进程帐户、时钟守护任务或者其它–当前和软件交互的任何事件。</li><li><strong>SecurityManager：</strong>管理所有Subject，SecurityManager 是 Shiro 架构的核心，配合内部安全组件共同组成安全伞。</li><li><strong>Realms：</strong>用于进行权限信息的验证，需自己实现。Realm 本质上是一个特定的安全 DAO：它封装与数据源连接的细节，得到Shiro 所需的相关的数据。在配置 Shiro 的时候，你必须指定至少一个Realm 来实现认证（authentication）和/或授权（authorization）。</li></ul><p>我们需要实现Realms的Authentication 和 Authorization。其中 Authentication 是用来验证用户身份，Authorization 是授权访问控制，用于对用户进行的操作授权，证明该用户是否允许进行当前操作，如访问某个链接，某个资源文件等。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/03/18/qian-hou-duan-fen-chi-xiang-mu-ge-ren-bo-ke/"/>
      <url>/2022/03/18/qian-hou-duan-fen-chi-xiang-mu-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>前后端分离项目</p><blockquote><p>原作者：吕一明</p><p>项目代码：<a href="https://github.com/MarkerHub/vueblog">https://github.com/MarkerHub/vueblog</a></p><p>项目视频：<a href="https://www.bilibili.com/video/BV1PQ4y1P7hZ/">https://www.bilibili.com/video/BV1PQ4y1P7hZ/</a></p></blockquote><h2 id="Java后端接口开发"><a href="#Java后端接口开发" class="headerlink" title="Java后端接口开发"></a>Java后端接口开发</h2><h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p>技术栈：</p><ul><li>SpringBoot</li><li>mybatis plus</li><li>shiro</li><li>lombok</li><li>redis</li><li>hibernate validatior</li><li>jwt</li></ul><p>导图：</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220318171945608.png" alt="image-20220318171945608"></p><h3 id="2、新建Springboot项目"><a href="#2、新建Springboot项目" class="headerlink" title="2、新建Springboot项目"></a>2、新建Springboot项目</h3><p>开发工具与环境：</p><ul><li><p>idea</p></li><li><p>mysql</p></li><li><p>jdk 8</p></li><li><p>maven3.3.9</p></li><li><p>devtools：项目的热加载重启插件</p></li><li><p>lombok：简化代码的工具</p></li></ul><h3 id="3、整合mybatis-plus"><a href="#3、整合mybatis-plus" class="headerlink" title="3、整合mybatis plus"></a>3、整合mybatis plus</h3><p><strong>第一步：导入jar包</strong></p><p>pom中导入mybatis plus的jar包，因为后面会涉及到代码生成，所以我们还需要导入页面模板引擎，这里我们用的是freemarker。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--mp--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--mp代码生成器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二步：然后去写配置文件</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># DataSource Config</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/vueblog<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;characterEncoding</span>=utf8<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> admin<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath*<span class="token punctuation">:</span>/mapper/*<span class="token important">*Mapper</span>.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面除了配置数据库的信息，还配置了myabtis plus的mapper的xml文件的扫描路径，这一步不要忘记了。<br><strong>第三步：开启mapper接口扫描，添加分页插件</strong></p><p>新建一个包：通过<a href="https://github.com/mapperScan">@mapperScan</a>注解指定要变成实现类的接口所在的包，然后包下面的所有接口在编译之后都会生成相应的实现类。PaginationInterceptor是一个分页插件。</p><ul><li>com.markerhub.config.MybatisPlusConfig</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.markerhub.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        PaginationInterceptor paginationInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> paginationInterceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第四步：代码生成</strong></p><p>如果你没再用其他插件，那么现在就已经可以使用mybatis plus了，官方给我们提供了一个代码生成器，然后我写上自己的参数之后，就可以直接根据数据库表信息生成entity、service、mapper等接口和实现类。</p><ul><li>com.markerhub.CodeGenerator</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>MybatisPlusException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>toolkit<span class="token punctuation">.</span>StringPool<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>toolkit<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>AutoGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>InjectionConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>po<span class="token punctuation">.</span>TableInfo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>NamingStrategy<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>FreemarkerTemplateEngine<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeGenerator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">scanner</span><span class="token punctuation">(</span>String tip<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        help<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"请输入"</span> <span class="token operator">+</span> tip <span class="token operator">+</span> <span class="token string">"："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>help<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String ipt <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>ipt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> ipt<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusException</span><span class="token punctuation">(</span><span class="token string">"请输入正确的"</span> <span class="token operator">+</span> tip <span class="token operator">+</span> <span class="token string">"！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 代码生成器</span>        AutoGenerator mpg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 全局配置</span>        GlobalConfig gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String projectPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span>projectPath <span class="token operator">+</span> <span class="token string">"/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        gc.setOutputDir("D:\\test");</span>        gc<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"ly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// gc.setSwagger2(true); 实体属性 Swagger2 注解</span>        gc<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>gc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数据源配置</span>        DataSourceConfig dsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/vueblog?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=UTC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// dsc.setSchemaName("public");</span>        dsc<span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 包配置</span>        PackageConfig pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setModuleName</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token string">"com.ly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自定义配置</span>        InjectionConfig cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InjectionConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// to do nothing</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果模板引擎是 freemarker</span>        String templatePath <span class="token operator">=</span> <span class="token string">"/templates/mapper.xml.ftl"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果模板引擎是 velocity</span>        <span class="token comment" spellcheck="true">// String templatePath = "/templates/mapper.xml.vm";</span>        <span class="token comment" spellcheck="true">// 自定义输出配置</span>        List<span class="token operator">&lt;</span>FileOutConfig<span class="token operator">></span> focList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自定义配置会被优先输出</span>        focList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutConfig</span><span class="token punctuation">(</span>templatePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">outputFile</span><span class="token punctuation">(</span>TableInfo tableInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span>                <span class="token keyword">return</span> projectPath <span class="token operator">+</span> <span class="token string">"/src/main/resources/mapper/"</span>                        <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> tableInfo<span class="token punctuation">.</span><span class="token function">getEntityName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Mapper"</span> <span class="token operator">+</span> StringPool<span class="token punctuation">.</span>DOT_XML<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cfg<span class="token punctuation">.</span><span class="token function">setFileOutConfigList</span><span class="token punctuation">(</span>focList<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setCfg</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 配置模板</span>        TemplateConfig templateConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplateConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateConfig<span class="token punctuation">.</span><span class="token function">setXml</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setTemplate</span><span class="token punctuation">(</span>templateConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 策略配置</span>        StrategyConfig strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setColumnNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setRestControllerStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span><span class="token function">scanner</span><span class="token punctuation">(</span><span class="token string">"表名，多个英文逗号分割"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setControllerMappingHyphenStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setTablePrefix</span><span class="token punctuation">(</span><span class="token string">"m_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setTemplateEngine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FreemarkerTemplateEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在数据库中新建了一个user表：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>m_user<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>avatar<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>created<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>last_login<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>UK_USERNAME<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>m_blog<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>description<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>content<span class="token punctuation">`</span> <span class="token keyword">longtext</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>created<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">11</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>vueblog<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>m_user<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>avatar<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>email<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>created<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>last_login<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'markerhub'</span><span class="token punctuation">,</span> 'https:<span class="token comment" spellcheck="true">//image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/5a9f48118166308daba8b6da7e466aab.jpg', NULL, '96e79218965eb72c92a549dd5a330112', '0', '2020-04-20 10:44:01', NULL);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行CodeGenerator的main方法，输入表名：m_user，m_blog表</p><p>在UserController中写个测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、统一结果封装"><a href="#4、统一结果封装" class="headerlink" title="4、统一结果封装"></a>4、统一结果封装</h3><p>这里我们用到了一个Result的类，这个用于我们的异步统一返回的结果封装。一般来说，结果里面有几个要素必要的</p><ul><li>是否成功，可用code表示（如200表示成功，400表示异常）</li><li>结果消息</li><li>结果数据</li></ul><p>所以可得到封装如下：</p><ul><li>com.markerhub.common.lang.Result</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>common<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author ly * 实现序列化，统一封装成result结果返回 * @create 2022-03-18 17:44 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">succ</span><span class="token punctuation">(</span>String code<span class="token punctuation">,</span>String msg<span class="token punctuation">,</span>Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Result m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">fail</span><span class="token punctuation">(</span>String code<span class="token punctuation">,</span>String msg<span class="token punctuation">,</span>Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Result m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">succ</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">succ</span><span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">,</span><span class="token string">"操作成功"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">succ</span><span class="token punctuation">(</span>String mess<span class="token punctuation">,</span> Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">succ</span><span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">,</span>mess<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">fail</span><span class="token punctuation">(</span>String mess<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"400"</span><span class="token punctuation">,</span>mess<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">fail</span><span class="token punctuation">(</span>String mess<span class="token punctuation">,</span> Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"400"</span><span class="token punctuation">,</span>mess<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、整合shiro-jwt，并会话共享"><a href="#5、整合shiro-jwt，并会话共享" class="headerlink" title="5、整合shiro+jwt，并会话共享"></a>5、整合shiro+jwt，并会话共享</h3><p>JSON Web Token（JWT）是一个非常轻巧的规范。利用一定的编码生成 Token，并在 Token 中加入一些非敏感信息，将其传递。</p><pre class="line-numbers language-yaml"><code class="language-yaml">一个完整的 Token：用 . 分隔数据 eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcm9tX3VzZXIiOiJCIiwidGFyZ2V0X3VzZXIiOiJBIn0.rSWamyAYwuHCo7IFAgd1oRpSP7nzL7BF5t7ItqpKViM<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\liyi0\Desktop\1.png" alt="1"></p><p><img src="C:\Users\liyi0\Desktop\2.png" alt="2"></p><p>考虑到后面可能需要做集群、负载均衡等，所以就需要会话共享，而shiro的缓存和会话信息，我们一般考虑使用redis来存储这些数据，所以，我们不仅仅需要整合shiro，同时也需要整合redis。在开源的项目中，我们找到了一个starter可以快速整合shiro-redis，配置简单，这里也推荐大家使用。</p><p>而因为我们需要做的是前后端分离项目的骨架，所以一般我们会采用token或者jwt作为跨域身份验证解决方案。所以整合shiro的过程中，我们需要引入jwt的身份验证过程。</p><p><img src="D:\Chromedownload\1.png" alt="1"></p><p>那么我们就开始整合：</p><p>我们使用一个shiro-redis-spring-boot-starter的jar包，具体教程可以看官方文档：<a href="https://github.com/alexxiyang/shiro-redis/blob/master/docs/README.md#spring-boot-starter">https://github.com/alexxiyang/shiro-redis/blob/master/docs/README.md#spring-boot-starter</a></p><p>第一步：导入shiro-redis的starter包：还有jwt的工具包，以及为了简化开发，我引入了hutool工具包。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.crazycake<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-redis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- hutool工具类--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- jwt --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步：编写配置：</p><h4 id="ShiroConfig"><a href="#ShiroConfig" class="headerlink" title="ShiroConfig"></a>ShiroConfig</h4><ul><li>com.markerhub.config.ShiroConfig</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>AccountRealm<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>JwtFilter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>DefaultSessionStorageEvaluator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>DefaultSubjectDAO<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>SecurityManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>session<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>SessionManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>security<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>AuthorizationAttributeSourceAdvisor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>ShiroFilterFactoryBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>config<span class="token punctuation">.</span>DefaultShiroFilterChainDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ShiroFilterChainDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>web<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>DefaultWebSecurityManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>web<span class="token punctuation">.</span>session<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>DefaultWebSessionManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>crazycake<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>RedisCacheManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>crazycake<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>RedisSessionDAO<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>autoproxy<span class="token punctuation">.</span>DefaultAdvisorAutoProxyCreator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>Filter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedHashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">shiroConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    JwtFilter jwtFilter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SessionManager <span class="token function">sessionManager</span><span class="token punctuation">(</span>RedisSessionDAO redisSessionDAO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultWebSessionManager sessionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSessionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sessionManager<span class="token punctuation">.</span><span class="token function">setSessionDAO</span><span class="token punctuation">(</span>redisSessionDAO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sessionManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DefaultWebSecurityManager <span class="token function">securityManager</span><span class="token punctuation">(</span>AccountRealm accountRealm<span class="token punctuation">,</span>                                                     SessionManager sessionManager<span class="token punctuation">,</span>                                                     RedisCacheManager redisCacheManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultWebSecurityManager securityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span>accountRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>        securityManager<span class="token punctuation">.</span><span class="token function">setSessionManager</span><span class="token punctuation">(</span>sessionManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        securityManager<span class="token punctuation">.</span><span class="token function">setCacheManager</span><span class="token punctuation">(</span>redisCacheManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 关闭shiro自带的session，详情见文档         */</span>        DefaultSubjectDAO subjectDAO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSubjectDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DefaultSessionStorageEvaluator defaultSessionStorageEvaluator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSessionStorageEvaluator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultSessionStorageEvaluator<span class="token punctuation">.</span><span class="token function">setSessionStorageEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subjectDAO<span class="token punctuation">.</span><span class="token function">setSessionStorageEvaluator</span><span class="token punctuation">(</span>defaultSessionStorageEvaluator<span class="token punctuation">)</span><span class="token punctuation">;</span>        securityManager<span class="token punctuation">.</span><span class="token function">setSubjectDAO</span><span class="token punctuation">(</span>subjectDAO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> securityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ShiroFilterChainDefinition <span class="token function">shiroFilterChainDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultShiroFilterChainDefinition chainDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultShiroFilterChainDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> <span class="token string">"jwt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 主要通过注解方式校验权限</span>        chainDefinition<span class="token punctuation">.</span><span class="token function">addPathDefinitions</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chainDefinition<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"shiroFilterFactoryBean"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">shiroFilterFactoryBean</span><span class="token punctuation">(</span>SecurityManager securityManager<span class="token punctuation">,</span>                                                         ShiroFilterChainDefinition shiroFilterChainDefinition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ShiroFilterFactoryBean shiroFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shiroFilter<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Filter<span class="token operator">></span> filters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"jwt"</span><span class="token punctuation">,</span> jwtFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>        shiroFilter<span class="token punctuation">.</span><span class="token function">setFilters</span><span class="token punctuation">(</span>filters<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> filterMap <span class="token operator">=</span> shiroFilterChainDefinition<span class="token punctuation">.</span><span class="token function">getFilterChainMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shiroFilter<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> shiroFilter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 开启注解代理（默认好像已经开启，可以不要）</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="token function">authorizationAttributeSourceAdvisor</span><span class="token punctuation">(</span>SecurityManager securityManager<span class="token punctuation">)</span><span class="token punctuation">{</span>        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthorizationAttributeSourceAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authorizationAttributeSourceAdvisor<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> authorizationAttributeSourceAdvisor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DefaultAdvisorAutoProxyCreator <span class="token function">getDefaultAdvisorAutoProxyCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultAdvisorAutoProxyCreator creator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultAdvisorAutoProxyCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> creator<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面ShiroConfig，我们主要做了几件事情：</p><ol><li>引入RedisSessionDAO和RedisCacheManager，为了解决shiro的权限数据和会话信息能保存到redis中，实现会话共享。</li><li>重写了SessionManager和DefaultWebSecurityManager，同时在DefaultWebSecurityManager中为了关闭shiro自带的session方式，我们需要设置为false，这样用户就不再能通过session方式登录shiro。后面将采用jwt凭证登录。</li><li>在ShiroFilterChainDefinition中，我们不再通过编码形式拦截Controller访问路径，而是所有的路由都需要经过JwtFilter这个过滤器，然后判断请求头中是否含有jwt的信息，有就登录，没有就跳过。跳过之后，有Controller中的shiro注解进行再次拦截，比如<a href="https://github.com/RequiresAuthentication">@RequiresAuthentication</a>，这样控制权限访问。</li></ol><p>那么，接下来，我们聊聊ShiroConfig中出现的AccountRealm，还有JwtFilter。</p><h4 id="AccountRealm"><a href="#AccountRealm" class="headerlink" title="AccountRealm"></a>AccountRealm</h4><p>AccountRealm是shiro进行登录或者权限校验的逻辑所在，算是核心了，我们需要重写3个方法，分别是</p><ul><li>supports：为了让realm支持jwt的凭证校验</li><li>doGetAuthorizationInfo：权限校验</li><li>doGetAuthenticationInfo：登录认证校验</li></ul><p>我们先来总体看看AccountRealm的代码，然后逐个分析：</p><ul><li>com.markerhub.shiro.AccountRealm</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    JwtUtils jwtUtils<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span>AuthenticationToken token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> token <span class="token keyword">instanceof</span> <span class="token class-name">JwtToken</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principals<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken token<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>        JwtToken jwt <span class="token operator">=</span> <span class="token punctuation">(</span>JwtToken<span class="token punctuation">)</span> token<span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"jwt----------------->{}"</span><span class="token punctuation">,</span> jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>        String userId <span class="token operator">=</span> jwtUtils<span class="token punctuation">.</span><span class="token function">getClaimByToken</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> jwt<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnknownAccountException</span><span class="token punctuation">(</span><span class="token string">"账户不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LockedAccountException</span><span class="token punctuation">(</span><span class="token string">"账户已被锁定！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        AccountProfile profile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanUtil<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> profile<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"profile----------------->{}"</span><span class="token punctuation">,</span> profile<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>profile<span class="token punctuation">,</span> jwt<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实主要就是doGetAuthenticationInfo登录认证这个方法，可以看到我们通过jwt获取到用户信息，判断用户的状态，最后异常就抛出对应的异常信息，否者封装成SimpleAuthenticationInfo返回给shiro。<br>接下来我们逐步分析里面出现的新类：</p><p>1、shiro默认supports的是UsernamePasswordToken，而我们现在采用了jwt的方式，所以这里我们自定义一个JwtToken，来完成shiro的supports方法。</p><h4 id="JwtToken"><a href="#JwtToken" class="headerlink" title="JwtToken"></a>JwtToken</h4><ul><li>com.markerhub.shiro.JwtToken</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtToken</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationToken</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String token<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">JwtToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>token <span class="token operator">=</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、JwtUtils是个生成和校验jwt的工具类，其中有些jwt相关的密钥信息是从项目配置文件中配置的：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"markerhub.jwt"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String secret<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> expire<span class="token punctuation">;</span>    <span class="token keyword">private</span> String header<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 生成jwt token     */</span>    <span class="token keyword">public</span> String <span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取jwt的信息</span>    <span class="token keyword">public</span> Claims <span class="token function">getClaimByToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * token是否过期     * @return  true：过期     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isTokenExpired</span><span class="token punctuation">(</span>Date expiration<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> expiration<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、而在AccountRealm我们还用到了AccountProfile，这是为了登录成功之后返回的一个用户信息的载体，</p><h4 id="AccountProfile"><a href="#AccountProfile" class="headerlink" title="AccountProfile"></a>AccountProfile</h4><ul><li>com.markerhub.shiro.AccountProfile</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountProfile</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String avatar<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步，ok，基本的校验的路线完成之后，我们需要少量的基本信息配置：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">shiro-redis</span><span class="token punctuation">:</span>  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">redis-manager</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">6379</span><span class="token key atrule">markerhub</span><span class="token punctuation">:</span>  <span class="token key atrule">jwt</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 加密秘钥</span>    <span class="token key atrule">secret</span><span class="token punctuation">:</span> f4e2e52034348f86b67cde581c0f9eb5    <span class="token comment" spellcheck="true"># token有效时长，7天，单位秒</span>    <span class="token key atrule">expire</span><span class="token punctuation">:</span> <span class="token number">604800</span>    <span class="token key atrule">header</span><span class="token punctuation">:</span> token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第四步：另外，如果你项目有使用spring-boot-devtools，需要添加一个配置文件，在resources目录下新建文件夹META-INF，然后新建文件spring-devtools.properties，这样热重启时候才不会报错。</p><ul><li>resources/META-INF/spring-devtools.properties</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml">restart.include.shiro<span class="token punctuation">-</span>redis=/shiro<span class="token punctuation">-</span><span class="token punctuation">[</span>\\w<span class="token punctuation">-</span>\\.<span class="token punctuation">]</span>+jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="./%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE_files/f227ba4a47614a6ea2f849a56fcb352d.png" alt="图片"></p><h4 id="JwtFilter"><a href="#JwtFilter" class="headerlink" title="JwtFilter"></a>JwtFilter</h4><p>第五步：定义jwt的过滤器JwtFilter。</p><p>这个过滤器是我们的重点，这里我们继承的是Shiro内置的AuthenticatingFilter，一个可以内置了可以自动登录方法的的过滤器，有些同学继承BasicHttpAuthenticationFilter也是可以的。</p><p>我们需要重写几个方法：</p><ol><li>createToken：实现登录，我们需要生成我们自定义支持的JwtToken</li><li>onAccessDenied：拦截校验，当头部没有Authorization时候，我们直接通过，不需要自动登录；当带有的时候，首先我们校验jwt的有效性，没问题我们就直接执行executeLogin方法实现自动登录</li><li>onLoginFailure：登录异常时候进入的方法，我们直接把异常信息封装然后抛出</li><li>preHandle：拦截器的前置拦截，因为我们是前后端分析项目，项目中除了需要跨域全局配置之外，我们再拦截器中也需要提供跨域支持。这样，拦截器才不会在进入Controller之前就被限制了。</li></ol><p>下面我们看看总体的代码：</p><ul><li>com.markerhub.shiro.JwtFilter</li></ul><pre class="line-numbers language-JAVA"><code class="language-JAVA">@Componentpublic class JwtFilter extends AuthenticatingFilter {    @Autowired    JwtUtils jwtUtils;    @Override    protected AuthenticationToken createToken(ServletRequest servletRequest, ServletResponse servletResponse) throws Exception {        // 获取 token        HttpServletRequest request = (HttpServletRequest) servletRequest;        String jwt = request.getHeader("Authorization");        if(StringUtils.isEmpty(jwt)){            return null;        }        return new JwtToken(jwt);    }    @Override    protected boolean onAccessDenied(ServletRequest servletRequest, ServletResponse servletResponse) throws Exception {        HttpServletRequest request = (HttpServletRequest) servletRequest;        String token = request.getHeader("Authorization");        if(StringUtils.isEmpty(token)) {            return true;        } else {            // 判断是否已过期            Claims claim = jwtUtils.getClaimByToken(token);            if(claim == null || jwtUtils.isTokenExpired(claim.getExpiration())) {                throw new ExpiredCredentialsException("token已失效，请重新登录！");            }        }        // 执行自动登录        return executeLogin(servletRequest, servletResponse);    }    @Override    protected boolean onLoginFailure(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response) {        HttpServletResponse httpResponse = (HttpServletResponse) response;        try {            //处理登录失败的异常            Throwable throwable = e.getCause() == null ? e : e.getCause();            Result r = Result.fail(throwable.getMessage());            String json = JSONUtil.toJsonStr(r);            httpResponse.getWriter().print(json);        } catch (IOException e1) {        }        return false;    }    /**     * 对跨域提供支持     */    @Override    protected boolean preHandle(ServletRequest request, ServletResponse response) throws Exception {        HttpServletRequest httpServletRequest = WebUtils.toHttp(request);        HttpServletResponse httpServletResponse = WebUtils.toHttp(response);        httpServletResponse.setHeader("Access-control-Allow-Origin", httpServletRequest.getHeader("Origin"));        httpServletResponse.setHeader("Access-Control-Allow-Methods", "GET,POST,OPTIONS,PUT,DELETE");        httpServletResponse.setHeader("Access-Control-Allow-Headers", httpServletRequest.getHeader("Access-Control-Request-Headers"));        // 跨域时会首先发送一个OPTIONS请求，这里我们给OPTIONS请求直接返回正常状态        if (httpServletRequest.getMethod().equals(RequestMethod.OPTIONS.name())) {            httpServletResponse.setStatus(org.springframework.http.HttpStatus.OK.value());            return false;        }        return super.preHandle(request, response);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么到这里，我们的shiro就已经完成整合进来了，并且使用了jwt进行身份校验。</p><h3 id="6、异常处理"><a href="#6、异常处理" class="headerlink" title="6、异常处理"></a>6、异常处理</h3><p>有时候不可避免服务器报错的情况，如果不配置异常处理机制，就会默认返回tomcat或者nginx的5XX页面，对普通用户来说，不太友好，用户也不懂什么情况。这时候需要我们程序员设计返回一个友好简单的格式给前端。</p><p>处理办法如下：通过使用<a href="https://github.com/ControllerAdvice">@ControllerAdvice</a>来进行统一异常处理，<a href="https://github.com/ExceptionHandler">@ExceptionHandler</a>(value = RuntimeException.class)来指定捕获的Exception各个类型异常 ，这个异常的处理，是全局的，所有类似的异常，都会跑到这个地方处理。</p><ul><li>com.markerhub.common.exception.GlobalExceptionHandler</li></ul><p>步骤二、定义全局异常处理，<a href="https://github.com/ControllerAdvice">@ControllerAdvice</a>表示定义全局控制器异常处理，<a href="https://github.com/ExceptionHandler">@ExceptionHandler</a>表示针对性异常处理，可对每种异常针对性处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 全局异常处理 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExcepitonHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 捕捉shiro的异常</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>UNAUTHORIZED<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>ShiroException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">handle401</span><span class="token punctuation">(</span>ShiroException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理Assert的异常     */</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> IllegalArgumentException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">handler</span><span class="token punctuation">(</span>IllegalArgumentException e<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Assert异常:-------------->{}"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @Validated 校验错误异常处理     */</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> MethodArgumentNotValidException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">handler</span><span class="token punctuation">(</span>MethodArgumentNotValidException e<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"运行时异常:-------------->"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        BindingResult bindingResult <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectError objectError <span class="token operator">=</span> bindingResult<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>objectError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> RuntimeException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">handler</span><span class="token punctuation">(</span>RuntimeException e<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"运行时异常:-------------->"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面我们捕捉了几个异常：</p><ul><li>ShiroException：shiro抛出的异常，比如没有权限，用户登录异常</li><li>IllegalArgumentException：处理Assert的异常</li><li>MethodArgumentNotValidException：处理实体校验的异常</li><li>RuntimeException：捕捉其他异常</li></ul><h3 id="7、实体校验"><a href="#7、实体校验" class="headerlink" title="7、实体校验"></a>7、实体校验</h3><p>当我们表单数据提交的时候，前端的校验我们可以使用一些类似于jQuery Validate等js插件实现，而后端我们可以使用Hibernate validatior来做校验。</p><p>我们使用springboot框架作为基础，那么就已经自动集成了Hibernate validatior。</p><p>那么用起来啥样子的呢？</p><p>第一步：首先在实体的属性上添加对应的校验规则，比如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"m_user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"昵称不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"邮箱不能为空"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"邮箱格式不正确"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步 ：这里我们使用<a href="https://github.com/Validated">@Validated</a>注解方式，如果实体不符合要求，系统会抛出异常，那么我们的异常处理中就捕获到MethodArgumentNotValidException。</p><ul><li>com.markerhub.controller.UserController</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 测试实体校验 * @param user * @return */</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/save"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Object <span class="token function">testUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、跨域问题"><a href="#8、跨域问题" class="headerlink" title="8、跨域问题"></a>8、跨域问题</h3><p>因为是前后端分析，所以跨域问题是避免不了的，我们直接在后台进行全局跨域处理：</p><ul><li>com.markerhub.config.CorsConfig</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>CorsRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 解决跨域问题 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span>CorsRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"HEAD"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ok，因为我们系统开发的接口比较简单，所以我就不集成swagger2啦，也比较简单而已。下面我们就直接进入我们的正题，进行编写登录接口。</p><h3 id="9、登录接口开发"><a href="#9、登录接口开发" class="headerlink" title="9、登录接口开发"></a>9、登录接口开发</h3><p>登录的逻辑其实很简答，只需要接受账号密码，然后把用户的id生成jwt，返回给前段，为了后续的jwt的延期，所以我们把jwt放在header上。具体代码如下：</p><ul><li>com.markerhub.controller.AccountController</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    JwtUtils jwtUtils<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    UserService userService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 默认账号密码：markerhub / 111111     *     */</span>    <span class="token annotation punctuation">@CrossOrigin</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> LoginDto loginDto<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> loginDto<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>SecureUtil<span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span>loginDto<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"密码错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String jwt <span class="token operator">=</span> jwtUtils<span class="token punctuation">.</span><span class="token function">generateToken</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">,</span> jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Expose-Headers"</span><span class="token punctuation">,</span> <span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用户可以另一个接口</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">succ</span><span class="token punctuation">(</span>MapUtil<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAvatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 退出</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequiresAuthentication</span>    <span class="token keyword">public</span> Result <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">succ</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10、博客接口开发"><a href="#10、博客接口开发" class="headerlink" title="10、博客接口开发"></a>10、博客接口开发</h3><p>我们的骨架已经完成，接下来，我们就可以添加我们的业务接口了，下面我以一个简单的博客列表、博客详情页为例子开发：</p><ul><li>com.markerhub.utils.ShiroUtils</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>util<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>AccountProfile<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>SecurityUtils<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> AccountProfile <span class="token function">getProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>AccountProfile<span class="token punctuation">)</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>com.markerhub.controller.BlogController</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>BeanUtil<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Assert<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>IPage<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>pagination<span class="token punctuation">.</span>Page<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>common<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Blog<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>service<span class="token punctuation">.</span>BlogService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ShiroUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authz<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequiresAuthentication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Validated<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    BlogService blogService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/blogs"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">blogs</span><span class="token punctuation">(</span>Integer currentPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentPage <span class="token operator">==</span> null <span class="token operator">||</span> currentPage <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> currentPage <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        Page page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IPage pageData <span class="token operator">=</span> blogService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span>Blog<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"created"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">succ</span><span class="token punctuation">(</span>pageData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/blog/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">detail</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Blog blog <span class="token operator">=</span> blogService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>blog<span class="token punctuation">,</span> <span class="token string">"该博客已删除！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">succ</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequiresAuthentication</span>        <span class="token comment" spellcheck="true">//需要登录之后才能访问的接口，其他需要权限的接口可以添加shiro的相关注解。</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/blog/edit"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">edit</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> Blog blog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blog<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Blog temp <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>blog<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> blogService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>blog<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ShiroUtils<span class="token punctuation">.</span><span class="token function">getProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"没有权限编辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>ShiroUtils<span class="token punctuation">.</span><span class="token function">getProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">setCreated</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BeanUtil<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>blog<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"userId"</span><span class="token punctuation">,</span> <span class="token string">"created"</span><span class="token punctuation">,</span> <span class="token string">"status"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blogService<span class="token punctuation">.</span><span class="token function">saveOrUpdate</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">succ</span><span class="token punctuation">(</span><span class="token string">"操作成功"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue前端页面开发"><a href="#Vue前端页面开发" class="headerlink" title="Vue前端页面开发"></a>Vue前端页面开发</h2><h3 id="1、前言-1"><a href="#1、前言-1" class="headerlink" title="1、前言"></a>1、前言</h3><p>技术栈：</p><ul><li>vue</li><li>element-ui</li><li>axios</li><li>mavon-editor</li><li>markdown-it</li><li>github-markdown-css</li></ul><h3 id="2、环境准备"><a href="#2、环境准备" class="headerlink" title="2、环境准备"></a>2、环境准备</h3><p>1、首先我们上node.js官网(<a href="https://nodejs.org/zh-cn/)%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%9A%84%E9%95%BF%E6%9C%9F%E7%89%88%E6%9C%AC%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%BF%90%E8%A1%8C%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E5%90%8E%E6%A3%80%E6%9F%A5%E4%B8%8B%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF">https://nodejs.org/zh-cn/)，下载最新的长期版本，直接运行安装完成后检查下版本信息</a></p><p>2、接下来，我们安装vue的环境</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 安装淘宝npm</span>npm install <span class="token punctuation">-</span>g cnpm <span class="token punctuation">-</span><span class="token punctuation">-</span>registry=https<span class="token punctuation">:</span>//registry.npm.taobao.org<span class="token comment" spellcheck="true"># vue-cli 安装依赖包</span>cnpm install <span class="token punctuation">-</span><span class="token punctuation">-</span>g vue<span class="token punctuation">-</span>cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、新建项目"><a href="#3、新建项目" class="headerlink" title="3、新建项目"></a>3、新建项目</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 在项目文件夹下，打开cmd</span>vue create vueblog<span class="token punctuation">-</span>vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml"><code class="language-yaml">├── README.md            项目介绍├── index.html           入口页面├── build              构建脚本目录│  ├── build<span class="token punctuation">-</span>server.js         运行本地构建服务器，可以访问构建后的页面│  ├── build.js            生产环境构建脚本│  ├── dev<span class="token punctuation">-</span>client.js          开发服务器热重载脚本，主要用来实现开发阶段的页面自动刷新│  ├── dev<span class="token punctuation">-</span>server.js          运行本地开发服务器│  ├── utils.js            构建相关工具方法│  ├── webpack.base.conf.js      wabpack基础配置│  ├── webpack.dev.conf.js       wabpack开发环境配置│  └── webpack.prod.conf.js      wabpack生产环境配置├── config             项目配置│  ├── dev.env.js           开发环境变量│  ├── index.js            项目配置文件│  ├── prod.env.js           生产环境变量│  └── test.env.js           测试环境变量├── mock              mock数据目录│  └── hello.js├── package.json          npm包配置文件，里面定义了项目的npm脚本，依赖包等信息├── src               源码目录 │  ├── main.js             入口js文件│  ├── app.vue             根组件│  ├── components           公共组件目录│  │  └── title.vue│  ├── assets             资源目录，这里的资源会被wabpack构建│  │  └── images│  │    └── logo.png│  ├── routes             前端路由│  │  └── index.js│  ├── store              应用级数据（state）状态管理│  │  └── index.js│  └── views              页面目录│    ├── hello.vue│    └── notfound.vue├── static             纯静态资源，不会被wabpack构建。└── test              测试文件目录（unit<span class="token important">&amp;e2e</span>）  └── unit              单元测试    ├── index.js            入口脚本    ├── karma.conf.js          karma配置文件    └── specs              单测case目录      └── Hello.spec.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、安装element-ui"><a href="#4、安装element-ui" class="headerlink" title="4、安装element-ui"></a>4、安装element-ui</h3><p>接下来我们引入element-ui组件（<a href="https://element.eleme.cn/#/zh-CN/component/installation">https://element.eleme.cn</a>）</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 切换到项目根目录</span>cd vueblog<span class="token punctuation">-</span>vue<span class="token comment" spellcheck="true"># 安装element-ui</span>cnpm install element<span class="token punctuation">-</span>ui <span class="token punctuation">-</span><span class="token punctuation">-</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们打开项目src目录下的main.js，引入element-ui依赖。</p><pre class="line-numbers language-yaml"><code class="language-yaml">import Element from 'element<span class="token punctuation">-</span>ui'import "element<span class="token punctuation">-</span>ui/lib/theme<span class="token punctuation">-</span>chalk/index.css"Vue.use(Element)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5、安装axios"><a href="#5、安装axios" class="headerlink" title="5、安装axios"></a>5、安装axios</h3><p>接下来，我们来安装axios（<a href="http://www.axios-js.com/%EF%BC%89%EF%BC%8Caxios%E6%98%AF%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E">http://www.axios-js.com/），axios是一个基于</a> promise 的 HTTP 库，这样我们进行前后端对接的时候，使用这个工具可以提高我们的开发效率。</p><pre class="line-numbers language-plain"><code class="language-plain">cnpm install axios --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后同样我们在main.js中全局引入axios。</p><pre class="line-numbers language-plain"><code class="language-plain">import axios from 'axios'Vue.prototype.$axios = axios <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>组件中，我们就可以通过this.$axios.get()来发起我们的请求了哈。</p><h3 id="6、页面路由"><a href="#6、页面路由" class="headerlink" title="6、页面路由"></a>6、页面路由</h3><p>接下来，我们先定义好路由和页面，因为我们只是做一个简单的博客项目，页面比较少，所以我们可以直接先定义好，然后在慢慢开发，这样需要用到链接的地方我们就可以直接可以使用：</p><p>我们在views文件夹下定义几个页面：</p><ul><li>BlogDetail.vue（博客详情页）</li><li>BlogEdit.vue（编辑博客）</li><li>Blogs.vue（博客列表）</li><li>Login.vue（登录页面）</li></ul><p>然后再路由中心配置：</p><ul><li>router\index.js</li></ul><pre class="line-numbers language-plain"><code class="language-plain">import Vue from 'vue'import VueRouter from 'vue-router'import Login from '../views/Login.vue'import BlogDetail from '../views/BlogDetail.vue'import BlogEdit from '../views/BlogEdit.vue'Vue.use(VueRouter)const routes = [  {    path: '/',    name: 'Index',    redirect: { name: 'Blogs' }  },  {    path: '/login',    name: 'Login',    component: Login  },  {    path: '/blogs',    name: 'Blogs',    // 懒加载    component: () => import('../views/Blogs.vue')  },  {    path: '/blog/add', // 注意放在 path: '/blog/:blogId'之前    name: 'BlogAdd',    meta: {      requireAuth: true    },    component: BlogEdit  },  {    path: '/blog/:blogId',    name: 'BlogDetail',    component: BlogDetail  },  {    path: '/blog/:blogId/edit',    name: 'BlogEdit',    meta: {      requireAuth: true    },    component: BlogEdit  }];const router = new VueRouter({  mode: 'history',  base: process.env.BASE_URL,  routes})export default router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们去开发我们的页面。其中，带有meta：requireAuth: true说明是需要登录字后才能访问的受限资源，后面我们路由权限拦截时候会用到。</p><h3 id="7、登录页面"><a href="#7、登录页面" class="headerlink" title="7、登录页面"></a>7、登录页面</h3><ul><li>views/Login.vue</li></ul><pre class="line-numbers language-vue"><code class="language-vue"><template>    <div style="margin: auto;margin-top: 100px;">        <el-container>            <el-header>                <img class="mlogo" src="../assets/logo.png" alt="">            </el-header>            <el-main>                <el-form :model="ruleForm" :rules="rules" ref="ruleForm" label-width="100px" class="demo-ruleForm">                    <el-form-item label="用户名" prop="username">                        <el-input v-model="ruleForm.username"></el-input>                    </el-form-item>                    <el-form-item label="密码" prop="password">                        <el-input type="password" v-model="ruleForm.password"></el-input>                    </el-form-item>                    <el-form-item style="margin-left: 100px">                        <el-button type="primary" @click="submitForm('ruleForm')">登录</el-button>                        <el-button @click="resetForm('ruleForm')">重置</el-button>                    </el-form-item>                </el-form>            </el-main>        </el-container>    </div></template><script>    export default {        name: "Login",        data() {            return {                ruleForm: {                    username: 'markerhub',                    password: '111111'                },                rules: {                    username:                    [                        { required: true, message: '请输入用户名', trigger: 'blur' },                        { min: 3, max: 15, message: '长度在 3 到 15 个字符', trigger: 'blur' }                    ],                    password:                    [                        { required: true, message: '请输入密码', trigger: 'change' }                    ]                }            };        },        methods: {            submitForm(userInfo) {                this.$refs[userInfo].validate((valid) => {                    if (valid) {                        const _this = this                        this.$axios.post('/login', this.ruleForm).then(res => {                            console.log(res.data)                            const jwt = res.headers['authorization']                            const userInfo = res.data.data                            // 把数据共享出去,通过commit提交函数 调用mutation中改变 store存储的变量 的函数                             _this.$store.commit("SET_TOKEN", jwt)                            _this.$store.commit("SET_USERINFO", userInfo)                            // 获取                            console.log(_this.$store.getters.getUser)                            _this.$router.push("/blogs")        //登录之后跳转到首页                        })                    } else {                        console.log('error submit!!');                        return false;                    }                });            },            resetForm(formName) {                this.$refs[formName].resetFields();            }        }    }</script><style scoped>    .el-header, .el-footer .el-aside .el-main{        text-align: center;    }    .el-main {        margin-top: 70px;    }    .mlogo {        height: 100%;        margin-top: 50px;        margin-left: 40px;    }    .demo-ruleForm {        max-width: 500px;        margin: 0 auto;    }</style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="理解VueX作用"><a href="#理解VueX作用" class="headerlink" title="理解VueX作用"></a>理解VueX作用</h4><ul><li><p>一个Vue项目可能会有很多页面和组件需要共享同一个变量，此时VueX中的store就像一个管家将需要共享的变量存储起来</p></li><li><p>通过类似于 get、set方法的回调函数进行变量获取和修改</p></li><li><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation</p></li><li><p>每个 mutation (类似java中set方法的合集) 都有一个字符串的**事件类型 (type)**和一个**回调函数 (handler)**。它会接受 state 作为第一个参数</p></li></ul><h4 id="理解sessionStorage和localStorage"><a href="#理解sessionStorage和localStorage" class="headerlink" title="理解sessionStorage和localStorage"></a>理解sessionStorage和localStorage</h4><ul><li><p>sessionStorage 生命周期仅当前会话下有效，关闭页面或浏览器后被清除。</p></li><li><p>localStorage 生命周期是永久，这意味着除非用户手动清除，否则将永远存在。</p></li><li><p>两者都可以用 <strong>setItem</strong>、<strong>getItem</strong>、<strong>removeItem</strong> 来设置、获取、删除</p></li></ul><h4 id="token的状态同步"><a href="#token的状态同步" class="headerlink" title="token的状态同步"></a>token的状态同步</h4><p>所以在store/index.js中，代码是这样的：</p><pre class="line-numbers language-vue"><code class="language-vue">import Vue from 'vue'import Vuex from 'vuex'Vue.use(Vuex)export default new Vuex.Store({  state: {    token: '',      //token 信息    userInfo: JSON.parse(sessionStorage.getItem("userInfo"))  },  mutations: {    // 类似 java中的 set方法    SET_TOKEN: (state, token) => {      state.token = token      localStorage.setItem("token", token)    },    SET_USERINFO: (state, userInfo) => {      state.userInfo = userInfo      sessionStorage.setItem("userInfo", JSON.stringify(userInfo))    },    REMOVE_INFO: (state) => {      state.token = ''      state.userInfo = {}      localStorage.setItem("token", '')      sessionStorage.setItem("userInfo", JSON.stringify(''))    }  },  getters: {    // 类似 java中的 get方法    getUser: state => {      return state.userInfo    }  },  actions: {  },  modules: {  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存储token，我们用的是localStorage，存储用户信息，我们用的是sessionStorage。毕竟用户信息我们不需要长久保存，保存了token信息，我们随时都可以初始化用户信息。。</p><h4 id="定义全局axios拦截器"><a href="#定义全局axios拦截器" class="headerlink" title="定义全局axios拦截器"></a>定义全局axios拦截器</h4><p>点击登录按钮发起登录请求，成功时候返回了数据，如果是密码错误，我们应该弹窗提示。对axios做个后置拦截器，返回数据的时候，如果结果的code或者status不正常，会有对应的弹窗提示。</p><p>在src目录下创建一个文件axios.js（与main.js同级），定义axios的拦截：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> Element <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">"http://localhost:8081"</span>    <span class="token comment" spellcheck="true">//后端URL</span><span class="token comment" spellcheck="true">// 前置拦截</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> config<span class="token punctuation">}</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回的response的data中携带数据和状态码信息</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> response        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Element<span class="token punctuation">.</span>Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'密码错误'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>duration<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//错误之后结束登录流程，返回错误信息</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//打印错误信息：例如用户名不存在</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            error<span class="token punctuation">.</span>message <span class="token operator">=</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"REMOVE_INFO"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//错误之后，将数据清空，重新登录</span>            router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        Element<span class="token punctuation">.</span>Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">,</span> <span class="token punctuation">{</span>duration<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再main.js中导入axios.js</p><pre class="line-numbers language-plain"><code class="language-plain">import './axios.js' // 请求拦截<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后端因为返回的实体是Result，succ时候code为200，fail时候返回的是400，所以可以根据这里判断结果是否是正常的。另外权限不足时候可以通过请求结果的状态码来判断结果是否正常。这里都做了简单的处理。</p><h3 id="8、博客列表"><a href="#8、博客列表" class="headerlink" title="8、博客列表"></a>8、博客列表</h3><p>登录完成之后直接进入博客列表页面，然后加载博客列表的数据渲染出来。同时页面头部我们需要把用户的信息展示出来，因为很多地方都用到这个模块，所以我们把页面头部的用户信息单独抽取出来作为一个组件。</p><h4 id="头部用户信息"><a href="#头部用户信息" class="headerlink" title="头部用户信息"></a>头部用户信息</h4><p>那么，我们先来完成头部的用户信息，应该包含三部分信息：id，头像、用户名，而这些信息我们是在登录之后就已经存在了sessionStorage。因此，我们可以通过store的getters获取到用户信息。</p><p>看起来不是很复杂，我们贴出代码：</p><ul><li>components\Header.vue</li></ul><pre class="line-numbers language-plain"><code class="language-plain"><template>  <div class="m-content">    <h3>欢迎来到MarkerHub的博客</h3>    <div class="block">      <el-avatar :size="50" :src="user.avatar"></el-avatar>      <div>{{ user.username }}</div>    </div>    <div class="maction">      <el-link href="/blogs">主页</el-link>      <el-divider direction="vertical"></el-divider>      <span>          <el-link type="success" href="/blog/add" :disabled="!hasLogin">发表文章</el-link>        </span>      <el-divider direction="vertical"></el-divider>      <span v-show="!hasLogin">          <el-link type="primary" href="/login">登陆</el-link>        </span>      <span v-show="hasLogin">          <el-link type="danger" @click="logout">退出</el-link>        </span>    </div>  </div></template>  export default {    name: "Header",    data() {      return {        hasLogin: false,        user: {          username: '请先登录',          avatar: "https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png"        },        blogs: {},        currentPage: 1,        total: 0      }    },    methods: {      logout() {        const _this = this        this.$axios.get('http://localhost:8081/logout', {          headers: {            "Authorization": localStorage.getItem("token")          }        }).then((res) => {          _this.$store.commit('REMOVE_INFO')          _this.$router.push('/login')        });      }    },    created() {      if(this.$store.getters.getUser.username) {        this.user.username = this.$store.getters.getUser.username        this.user.avatar = this.$store.getters.getUser.avatar        this.hasLogin = true      }    }  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码created()中初始化用户的信息，通过hasLogin的状态来控制登录和退出按钮的切换，以及发表文章链接的disabled，这样用户的信息就能展示出来了。<br>然后这里有个退出按钮，在methods中有个logout()方法，逻辑比较简单，直接访问/logout，因为之前axios.js中我们已经设置axios请求的baseURL，所以这里我们不再需要链接的前缀了哈。因为是登录之后才能访问的受限资源，所以在header中带上了Authorization。返回结果清楚store中的用户信息和token信息，跳转到登录页面。</p><p>然后需要头部用户信息的页面只需要几个步骤：</p><pre class="line-numbers language-plain"><code class="language-plain">import Header from "@/components/Header";data() {  components: {Header}}# 然后模板中调用组件<Header></Header><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="博客分页"><a href="#博客分页" class="headerlink" title="博客分页"></a>博客分页</h4><p>接下来就是列表页面，需要做分页，列表我们在element-ui中直接使用<strong>时间线</strong>组件来作为我们的列表样式，还是挺好看的。还有我们的分页组件。</p><p>需要几部分信息：</p><ul><li>分页信息</li><li>博客列表内容，包括id、标题、摘要、创建时间</li><li>views\Blogs.vue</li></ul><pre class="line-numbers language-plain"><code class="language-plain"><template>  <div class="m-container">    <Header></Header>    <div class="block">      <el-timeline>        <el-timeline-item v-bind:timestamp="blog.created" placement="top" v-for="blog in blogs">          <el-card>            <h4><router-link :to="{name: 'BlogDetail', params: {blogId: blog.id}}">{{blog.title}}</router-link></h4>            <p>{{blog.description}}</p>          </el-card>        </el-timeline-item>      </el-timeline>    </div>    <el-pagination class="mpage"      background      layout="prev, pager, next"      :current-page=currentPage      :page-size=pageSize      @current-change=page      :total="total">    </el-pagination>  </div></template>  import Header from "@/components/Header";  export default {    name: "Blogs",    components: {Header},    data() {      return {        blogs: {},        currentPage: 1,        total: 0,        pageSize: 5      }    },    methods: {      page(currentPage) {        const _this = this        this.$axios.get('http://localhost:8081/blogs?currentPage=' + currentPage).then((res) => {          console.log(res.data.data.records)          _this.blogs = res.data.data.records          _this.currentPage = res.data.data.current          _this.total = res.data.data.total          _this.pageSize = res.data.data.size        })      }    },    mounted () {      this.page(1);    }  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>data()中直接定义博客列表blogs、以及一些分页信息。methods()中定义分页的调用接口page（currentPage），参数是需要调整的页码currentPage，得到结果之后直接赋值即可。然后初始化时候，直接在mounted()方法中调用第一页this.page(1)。完美。使用element-ui组件就是简单快捷哈哈！<br>注意标题这里我们添加了链接，使用的是<router-link>标签。</router-link></p><h3 id="9、博客编辑（发表）"><a href="#9、博客编辑（发表）" class="headerlink" title="9、博客编辑（发表）"></a>9、博客编辑（发表）</h3><p>我们点击发表博客链接调整到/blog/add页面，这里我们需要用到一个markdown编辑器，在vue组件中，比较好用的是mavon-editor，那么我们直接使用哈。先来安装mavon-editor相关组件：</p><h4 id="安装mavon-editor"><a href="#安装mavon-editor" class="headerlink" title="安装mavon-editor"></a>安装mavon-editor</h4><p>基于Vue的markdown编辑器mavon-editor</p><pre class="line-numbers language-plain"><code class="language-plain">cnpm install mavon-editor --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在main.js中全局注册：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 全局注册</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> mavonEditor <span class="token keyword">from</span> <span class="token string">'mavon-editor'</span><span class="token keyword">import</span> <span class="token string">'mavon-editor/dist/css/index.css'</span><span class="token comment" spellcheck="true">// use</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>mavonEditor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ok，那么我们去定义我们的博客表单：</p><pre class="line-numbers language-plain"><code class="language-plain"><template>  <div class="m-container">    <Header></Header>    <div class="m-content">      <el-form ref="editForm" status-icon :model="editForm" :rules="rules" label-width="80px">        <el-form-item label="标题" prop="title">          <el-input v-model="editForm.title"></el-input>        </el-form-item>        <el-form-item label="摘要" prop="description">          <el-input type="textarea" v-model="editForm.description"></el-input>        </el-form-item>        <el-form-item label="内容" prop="content">          <mavon-editor v-model="editForm.content"/>        </el-form-item>        <el-form-item>          <el-button type="primary" @click="submitForm()">立即创建</el-button>          <el-button>取消</el-button>        </el-form-item>      </el-form>    </div>  </div></template>  import Header from "@/components/Header";  export default {    name: "BlogEdit",    components: {Header},    data() {      return {        editForm: {          id: null,          title: '',          description: '',          content: ''        },        rules: {          title: [            {required: true, message: '请输入标题', trigger: 'blur'},            {min: 3, max: 50, message: '长度在 3 到 50 个字符', trigger: 'blur'}          ],          description: [            {required: true, message: '请输入摘要', trigger: 'blur'}          ]        }      }    },    created() {      const blogId = this.$route.params.blogId      const _this = this      if(blogId) {        this.$axios.get('/blog/' + blogId).then((res) => {          const blog = res.data.data          _this.editForm.id = blog.id          _this.editForm.title = blog.title          _this.editForm.description = blog.description          _this.editForm.content = blog.content        });      }    },    methods: {      submitForm() {        const _this = this        this.$refs.editForm.validate((valid) => {          if (valid) {            this.$axios.post('/blog/edit', this.editForm, {              headers: {                "Authorization": localStorage.getItem("token")              }            }).then((res) => {              _this.$alert('操作成功', '提示', {                confirmButtonText: '确定',                callback: action => {                  _this.$router.push("/blogs")                }              });            });          } else {            console.log('error submit!!');            return false;          }        })      }    }  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逻辑依然简单，校验表单，然后点击按钮提交表单，注意头部加上Authorization信息，返回结果弹窗提示操作成功，然后跳转到博客列表页面。emm，和写ajax没啥区别。熟悉一下vue的一些指令使用即可。<br>然后因为编辑和添加是同一个页面，所以有了create()方法，比如从编辑连接/blog/7/edit中获取blogId为7的这个id。然后回显博客信息。获取方式是const blogId = this.$route.params.blogId。</p><p>对了，mavon-editor因为已经全局注册，所以我们直接使用组件即可：</p><pre class="line-numbers language-plain"><code class="language-plain"><mavon-editor v-model="editForm.content"/><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果如下：<br><img src="./%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE_files/61c514b1b68c4cf1b07a87b51eacd8bf.png" alt="图片"></p><h3 id="10、博客详情"><a href="#10、博客详情" class="headerlink" title="10、博客详情"></a>10、博客详情</h3><p>博客详情中需要回显博客信息，然后有个问题就是，后端传过来的是博客内容是markdown格式的内容，我们需要进行渲染然后显示出来，这里我们使用一个插件markdown-it，用于解析md文档，然后导入github-markdown-c，所谓md的样式。</p><p>方法如下：</p><pre class="line-numbers language-plain"><code class="language-plain"># 用于解析md文档cnpm install markdown-it --save# md样式cnpm install github-markdown-css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以在需要渲染的地方使用：</p><ul><li>views\BlogDetail.vue</li></ul><pre class="line-numbers language-plain"><code class="language-plain"><template>  <div class="m-container">    <Header></Header>    <div class="mblog">      <h2>{{ blog.title }}</h2>      <el-link icon="el-icon-edit" v-if="ownBlog"><router-link :to="{name: 'BlogEdit', params: {blogId: blog.id}}">编辑</router-link></el-link>      <el-divider></el-divider>      <div class="content markdown-body" v-html="blog.content"></div>    </div>  </div></template>  import 'github-markdown-css/github-markdown.css' // 然后添加样式markdown-body  import Header from "@/components/Header";  export default {    name: "BlogDetail",    components: {      Header    },    data() {      return {        blog: {          userId: null,          title: "",          description: "",          content: ""        },        ownBlog: false      }    },    methods: {      getBlog() {        const blogId = this.$route.params.blogId        const _this = this        this.$axios.get('/blog/' + blogId).then((res) => {          console.log(res)          console.log(res.data.data)          _this.blog = res.data.data          var MarkdownIt = require('markdown-it'),            md = new MarkdownIt();          var result = md.render(_this.blog.content);          _this.blog.content = result          // 判断是否是自己的文章，能否编辑          _this.ownBlog =  (_this.blog.userId === _this.$store.getters.getUser.id)        });      }    },    created() {      this.getBlog()    }  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体逻辑还是挺简单，初始化create()方法中调用getBlog()方法，请求博客详情接口，返回的博客详情content通过markdown-it工具进行渲染。</p><p>再导入样式：</p><pre class="line-numbers language-plain"><code class="language-plain">import 'github-markdown.css'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在content的div中添加class为markdown-body即可哈。</p><p>另外标题下添加了个小小的编辑按钮，通过ownBlog （判断博文作者与登录用户是否同一人）来判断按钮是否显示出来。</p><h3 id="11、路由权限拦截"><a href="#11、路由权限拦截" class="headerlink" title="11、路由权限拦截"></a>11、路由权限拦截</h3><p>页面已经开发完毕之后，我们来控制一下哪些页面是需要登录之后才能跳转的，如果未登录访问就直接重定向到登录页面，因此我们在src目录下定义一个js文件：</p><ul><li>src\permission.js</li></ul><pre class="line-numbers language-plain"><code class="language-plain">import router from "./router";// 路由判断登录 根据路由配置文件的参数router.beforeEach((to, from, next) => {  if (to.matched.some(record => record.meta.requireAuth)) { // 判断该路由是否需要登录权限    const token = localStorage.getItem("token")    console.log("------------" + token)    if (token) { // 判断当前的token是否存在 ； 登录存入的token      if (to.path === '/login') {      } else {        next()      }    } else {      next({        path: '/login'      })    }  } else {    next()  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过之前我们再定义页面路由时候的的meta信息，指定requireAuth: true，需要登录才能访问，因此这里我们在每次路由之前（router.beforeEach）判断token的状态，觉得是否需要跳转到登录页面。</p><pre class="line-numbers language-plain"><code class="language-plain">{  path: '/blog/add', // 注意放在 path: '/blog/:blogId'之前  name: 'BlogAdd',  meta: {    requireAuth: true  },  component: BlogEdit}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们再main.js中import我们的permission.js</p><pre class="line-numbers language-plain"><code class="language-plain">import './permission.js' // 路由拦截<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/03/18/qian-hou-duan-fen-chi-xiang-mu-hou-tai-guan-li-xi-tong/"/>
      <url>/2022/03/18/qian-hou-duan-fen-chi-xiang-mu-hou-tai-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="管理系统开发"><a href="#管理系统开发" class="headerlink" title="管理系统开发"></a>管理系统开发</h1><h2 id="搭建后端程序"><a href="#搭建后端程序" class="headerlink" title="搭建后端程序"></a>搭建后端程序</h2><p>1、Spring Initializr 创建后端项目</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220318161426863.png" alt="image-20220318161426863"></p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220318161638925.png" alt="image-20220318161638925"></p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220318161748415.png" alt="image-20220318161748415"></p><p>2、后期引入需要的依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--spring整合mybatis-plus --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Mybatis代码生成器--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--velocity 模板引擎，Mybatis Plus 代码生成器需要（默认模板引擎）--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--hutool--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.7.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-ooxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、对全局配置文件application.yaml进行修改</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /  <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>    <span class="token key atrule">uri-encoding</span><span class="token punctuation">:</span> utf<span class="token punctuation">-</span><span class="token number">8</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/database<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;useJDBCCompliantTimezoneShift</span>=true<span class="token important">&amp;useLegacyDatetimeCode</span>=false<span class="token important">&amp;serverTimezone</span>=UTC    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token comment" spellcheck="true"># 使用druid数据源</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token key atrule">validationQuery</span><span class="token punctuation">:</span> select 'x'    <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">maxOpenPreparedStatements</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token comment" spellcheck="true">## 集群版本</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">pool</span><span class="token punctuation">:</span>      <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">100     </span><span class="token comment" spellcheck="true">#连接池最大连接数（负值表示没有限制）</span>      <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">3000     </span><span class="token comment" spellcheck="true">#连接池最大阻塞等待时间（负值表示没有限制）</span>      <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">200     </span><span class="token comment" spellcheck="true">#连接池最大空闭连接数</span>      <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">50         </span><span class="token comment" spellcheck="true">#连接汉最小空闲连接数</span>      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">600         </span><span class="token comment" spellcheck="true">#连接超时时间（毫秒）</span>    <span class="token key atrule">cluster</span><span class="token punctuation">:</span>      <span class="token key atrule">nodes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> 192.168.75.132<span class="token punctuation">:</span><span class="token number">6380</span>        <span class="token punctuation">-</span> 192.168.75.132<span class="token punctuation">:</span><span class="token number">6381</span>        <span class="token punctuation">-</span> 192.168.75.132<span class="token punctuation">:</span><span class="token number">6382</span>        <span class="token punctuation">-</span> 192.168.75.132<span class="token punctuation">:</span><span class="token number">6383</span>        <span class="token punctuation">-</span> 192.168.75.132<span class="token punctuation">:</span><span class="token number">6384</span>        <span class="token punctuation">-</span> 192.168.75.132<span class="token punctuation">:</span><span class="token number">6385</span>  <span class="token comment" spellcheck="true">## 单机版本</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.75.132    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379  </span>  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">properties</span><span class="token punctuation">:</span>      <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>        <span class="token key atrule">format_sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapping/*.xml  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> cn.felixfang.flog.entity<span class="token comment" spellcheck="true">#mybatis-plus配置</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>    <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mybatis/mappers/*.xml            <span class="token comment" spellcheck="true">#配置Mapper映射文件</span>    <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.yunnuo.server.pojo                <span class="token comment" spellcheck="true"># 配置Mybatis数据返回类型别名（默认别名为类名）</span>    <span class="token key atrule">configuration</span><span class="token punctuation">:</span>        <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">false                        </span><span class="token comment" spellcheck="true"># 自动驼峰命名</span><span class="token comment" spellcheck="true">#配置控制台打印日志Debug</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>    <span class="token key atrule">level</span><span class="token punctuation">:</span>        <span class="token key atrule">com.jd.mapper</span><span class="token punctuation">:</span> debug<span class="token comment" spellcheck="true">#自己也可以配置属性，通过@value、@ConfigurationProperties(prefix="")、@Component注入属性</span><span class="token key atrule">my</span><span class="token punctuation">:</span>  <span class="token key atrule">users</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 大李      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">100</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 小刘      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、利用代码生成器codeGenerator</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>FastAutoGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>OutputFile<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * mp代码生成器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">codeGenerator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        FastAutoGenerator<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/project?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2B8&amp;useSSL=false"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">globalConfig</span><span class="token punctuation">(</span>builder <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"ly"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置作者</span>                            <span class="token punctuation">.</span><span class="token function">enableSwagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 开启 swagger 模式</span>                            <span class="token punctuation">.</span><span class="token function">fileOverride</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 覆盖已生成文件</span>                            <span class="token punctuation">.</span><span class="token function">outputDir</span><span class="token punctuation">(</span><span class="token string">"E:\\code_set\\IdeaProjects\\ly_aftermanage\\src\\main\\java\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指定输出目录</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">packageConfig</span><span class="token punctuation">(</span>builder <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token string">"com.ly"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置父包名</span>                            <span class="token punctuation">.</span><span class="token function">moduleName</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置父包模块名</span>                            <span class="token punctuation">.</span><span class="token function">pathInfo</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span>OutputFile<span class="token punctuation">.</span>mapperXml<span class="token punctuation">,</span> <span class="token string">"E:\\code_set\\IdeaProjects\\ly_aftermanage\\src\\main\\resources\\Mapper\\"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置mapperXml生成路径</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">strategyConfig</span><span class="token punctuation">(</span>builder <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">entityBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enableLombok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    builder<span class="token punctuation">.</span><span class="token function">mapperBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enableMapperAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    builder<span class="token punctuation">.</span><span class="token function">controllerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enableHyphenStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 开启驼峰转连字符</span>                            <span class="token punctuation">.</span><span class="token function">enableRestStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 开启生成@RestController 控制器</span>                    builder<span class="token punctuation">.</span><span class="token function">addInclude</span><span class="token punctuation">(</span><span class="token string">"menu"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 设置需要生成的表名</span>                            <span class="token punctuation">.</span><span class="token function">addTablePrefix</span><span class="token punctuation">(</span><span class="token string">"t_"</span><span class="token punctuation">,</span> <span class="token string">"c_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置过滤表前缀</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//                .templateEngine(new FreemarkerTemplateEngine()) // 使用Freemarker引擎模板，默认的是Velocity引擎模板</span>                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、修改代码生成器模板</p><ul><li>maven仓库内搜索mybatis-plus-generator,打开，复制其中的templates目录至自己项目的resources下</li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220318164019125.png" alt="image-20220318164019125"></p><ul><li>所有的vm都是默认模板，也可以使用别的模板引擎来生成代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> $<span class="token punctuation">{</span><span class="token keyword">package</span><span class="token punctuation">.</span>Controller<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>pagination<span class="token punctuation">.</span>Page<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> $<span class="token punctuation">{</span><span class="token keyword">package</span><span class="token punctuation">.</span>Service<span class="token punctuation">}</span><span class="token punctuation">.</span>$<span class="token punctuation">{</span>table<span class="token punctuation">.</span>serviceName<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">import</span> $<span class="token punctuation">{</span><span class="token keyword">package</span><span class="token punctuation">.</span>Entity<span class="token punctuation">}</span><span class="token punctuation">.</span>$<span class="token punctuation">{</span>entity<span class="token punctuation">}</span><span class="token punctuation">;</span>#<span class="token keyword">if</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>restControllerStyle<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>#<span class="token keyword">else</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>#end#<span class="token keyword">if</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>superControllerClassPackage<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">import</span> $<span class="token punctuation">{</span>superControllerClassPackage<span class="token punctuation">}</span><span class="token punctuation">;</span>#end<span class="token comment" spellcheck="true">/** * @author ${author} * @since ${date} */</span>#<span class="token keyword">if</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>restControllerStyle<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span>#<span class="token keyword">else</span><span class="token annotation punctuation">@Controller</span>#end<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end"</span><span class="token punctuation">)</span>#<span class="token keyword">if</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>kotlin<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">class</span> $<span class="token punctuation">{</span>table<span class="token punctuation">.</span>controllerName<span class="token punctuation">}</span>#<span class="token keyword">if</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>superControllerClass<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">:</span> $<span class="token punctuation">{</span>superControllerClass<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>#end#<span class="token keyword">else</span>#<span class="token keyword">if</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>superControllerClass<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> $<span class="token punctuation">{</span>table<span class="token punctuation">.</span>controllerName<span class="token punctuation">}</span> <span class="token keyword">extends</span> $<span class="token punctuation">{</span>superControllerClass<span class="token punctuation">}</span> <span class="token punctuation">{</span>#<span class="token keyword">else</span><span class="token keyword">public</span> <span class="token keyword">class</span> $<span class="token punctuation">{</span>table<span class="token punctuation">.</span>controllerName<span class="token punctuation">}</span> <span class="token punctuation">{</span>#end    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> $<span class="token punctuation">{</span>table<span class="token punctuation">.</span>serviceName<span class="token punctuation">}</span> $<span class="token punctuation">{</span>table<span class="token punctuation">.</span>entityPath<span class="token punctuation">}</span>Service<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新增或者更新</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> result <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> $<span class="token punctuation">{</span>entity<span class="token punctuation">}</span> $<span class="token punctuation">{</span>table<span class="token punctuation">.</span>entityPath<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>table<span class="token punctuation">.</span>entityPath<span class="token punctuation">}</span>Service<span class="token punctuation">.</span><span class="token function">saveOrUpdate</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>table<span class="token punctuation">.</span>entityPath<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> result <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>table<span class="token punctuation">.</span>entityPath<span class="token punctuation">}</span>Service<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//批量删除</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/del/batch"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//地址记得变更</span>    <span class="token keyword">public</span> result <span class="token function">deleteBatch</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>table<span class="token punctuation">.</span>entityPath<span class="token punctuation">}</span>Service<span class="token punctuation">.</span><span class="token function">removeBatchByIds</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//查询所有</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> result <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>table<span class="token punctuation">.</span>entityPath<span class="token punctuation">}</span>Service<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据id查询</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> result <span class="token function">findOne</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>table<span class="token punctuation">.</span>entityPath<span class="token punctuation">}</span>Service<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//分页查询</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/page"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> result <span class="token function">findPage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> Integer pageNum<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@RequestParam</span> Integer pageSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryWrapper<span class="token operator">&lt;</span>$<span class="token punctuation">{</span>entity<span class="token punctuation">}</span><span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>table<span class="token punctuation">.</span>entityPath<span class="token punctuation">}</span>Service<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">,</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>#end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、搭建数据库database，制作所需要的用户表、系统表、权限表、文件表等等</p><p>7、通过codegenerator生成对应表的对应实体类、mapper、controller、service等</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220318164508336.png" alt="image-20220318164508336"></p><p>8、编写Controller层和Service层业务逻辑代码</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220318164630810.png" alt="image-20220318164630810"></p><p>9、通过Constants类封装状态码，结合Result返回类封装返回参数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Constants</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String CODE_200 <span class="token operator">=</span> <span class="token string">"200"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//成功</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String CODE_500 <span class="token operator">=</span> <span class="token string">"500"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//系统错误</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String CODE_401 <span class="token operator">=</span> <span class="token string">"401"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//权限不足</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String CODE_400 <span class="token operator">=</span> <span class="token string">"400"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//参数错误</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String CODE_600 <span class="token operator">=</span> <span class="token string">"600"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数据错误</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>common<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 接口统一返回包装类 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">result</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> result <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>CODE_200<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> result <span class="token function">success</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>CODE_200<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> result <span class="token function">error</span><span class="token punctuation">(</span>String code<span class="token punctuation">,</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span>msg<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> result <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>CODE_500<span class="token punctuation">,</span><span class="token string">"系统错误"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><ul><li>配置跨域访问的配置类CorsConfig</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>CorsConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>UrlBasedCorsConfigurationSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>CorsFilter<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当前跨域请求最大有效时长。这里默认1天</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> MAX_AGE <span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CorsFilter <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UrlBasedCorsConfigurationSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CorsConfiguration corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 设置访问源地址</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 设置访问源请求头</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3 设置访问源请求方法</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span>MAX_AGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> corsConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4 对接口配置跨域设置</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="登录校验问题"><a href="#登录校验问题" class="headerlink" title="登录校验问题"></a>登录校验问题</h3><ul><li>使用jwt利用token进行登录校验</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>config<span class="token punctuation">.</span>interceptor<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StrUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>JWT<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>JWTVerifier<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>Algorithm<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>JWTDecodeException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>JWTVerificationException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>common<span class="token punctuation">.</span>Constants<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>ServiceException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ly<span class="token punctuation">.</span>service<span class="token punctuation">.</span>IUserService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>method<span class="token punctuation">.</span>HandlerMethod<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> IUserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果不是映射的方法直接通过</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//执行认证</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>CODE_401<span class="token punctuation">,</span><span class="token string">"无token，请重新登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取token中的userid</span>        String userId<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            userId <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAudience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JWTDecodeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>CODE_401<span class="token punctuation">,</span><span class="token string">"token验证失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//根据token中的userid查询数据库</span>        User user <span class="token operator">=</span>  userService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>CODE_401<span class="token punctuation">,</span><span class="token string">"用户不存在，请重新登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//用户密码加签验证token</span>        JWTVerifier jwtVerifier <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>Algorithm<span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            jwtVerifier<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JWTVerificationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>CODE_401<span class="token punctuation">,</span><span class="token string">"token验证失败，请重新登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开发需求"><a href="#开发需求" class="headerlink" title="开发需求"></a>开发需求</h2><h3 id="权限菜单分配"><a href="#权限菜单分配" class="headerlink" title="权限菜单分配"></a>权限菜单分配</h3><h3 id="利用redis缓存"><a href="#利用redis缓存" class="headerlink" title="利用redis缓存"></a>利用redis缓存</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/03/15/wang-luo-an-quan/"/>
      <url>/2022/03/15/wang-luo-an-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="渗透准备知识"><a href="#渗透准备知识" class="headerlink" title="渗透准备知识"></a>渗透准备知识</h1><h2 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h2><h3 id="安全常见漏洞"><a href="#安全常见漏洞" class="headerlink" title="安全常见漏洞"></a>安全常见漏洞</h3><ul><li>不完善的身份验证措施</li><li>不完善的访问控制措施</li><li>SQL注入</li><li>跨站点脚本</li><li>信息泄露</li><li>跨站点请求伪造</li></ul><h3 id="网络攻击图"><a href="#网络攻击图" class="headerlink" title="网络攻击图"></a>网络攻击图</h3><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220314235833200.png" alt="image-20220314235833200"></p><h2 id="WEB应用技术"><a href="#WEB应用技术" class="headerlink" title="WEB应用技术"></a>WEB应用技术</h2><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><ul><li>客户端通过浏览器 —— 获取——服务端数据信息</li><li>客户端通过浏览器——提交——服务端后台程序（数据库服务器 缓存服务器 存储服务）</li></ul><h3 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h3><p>请求报文信息</p><ul><li>请求行</li><li>请求头</li><li>空行</li><li>请求主体</li></ul><p>响应报文信息</p><ul><li>响应行</li><li>响应头</li><li>空行</li><li>响应主体（获取数据信息 文本 图片 视频 音频 代码信息）</li></ul><h4 id="HTTP请求字段名称及作用"><a href="#HTTP请求字段名称及作用" class="headerlink" title="HTTP请求字段名称及作用"></a>HTTP请求字段名称及作用</h4><p>请求报文信息：</p><ul><li>Accept ：识别网站资源</li><li>Referer ：外部链接（访问此网站前是从其他网站跳转过来的，会做一个记录；可以防止盗链，别人盗取网站资源）</li><li>Accept-Language : 支持的语言</li><li>User-Agent ：客户端访问服务端软件信息（例如：Windows上的Chrome浏览器访问；也可显示移动端访问：iPhone、Android）</li><li>Accept-Encoding ：资源压缩请求，利于访问减少带宽占用</li><li>Host ：域名，确定网站访问信息</li><li>Connecting ：Keep-Alive 一般都是长连接 none<ul><li>短链接 ： 一次链接（tcp三次握手）一次请求，请求完断开</li><li>长连接 ： 一次链接（tcp三次握手） 在时间域内多次请求</li></ul></li></ul><p>响应报文信息：</p><ul><li>HTTP/1.1 200 OK ：状态码和协议</li><li>Date ：时期</li><li>Server ：浏览器</li><li>X-Power-By ：框架</li><li>Cache-Control ：缓存控制</li><li>Content-Type ：响应主体信息类型</li><li>Content-Length ：数据字节大小</li></ul><p>请求方法：</p><ul><li><p>请求方法</p><ul><li><p>get ： 从服务器获取资源数据信息    （不会有请求主体）</p></li><li><p>post ：向服务器提交资源数据信息   （字符信息提交）</p></li><li><p>put ：向服务端提交文档附件资源</p></li><li><p>head ：类似get，不返回消息主体</p></li><li><p>trace ：用于诊断</p></li><li><p>options ：要求服务器报告对某一特殊资源有效的HTTP方法</p><ul><li>用法：黑客利用 HTTP请求包（携带OPTIONS）–&gt;    <a href="http://www.xx.com/">www.xx.com</a>  –&gt; 查看是否有安全控制 ，若没有服务器端  –&gt; 返回HTTP响应报文中携带支持访问的方法信息：如GET POST <strong>PUT</strong> MOVE HEAD  ，这些方法会被黑客利用植入木马等病毒程序</li></ul></li><li><p>put ：上传信息</p></li></ul></li></ul><h4 id="URL统一资源定位符"><a href="#URL统一资源定位符" class="headerlink" title="URL统一资源定位符"></a>URL统一资源定位符</h4><p>格式：    protocol://hostname[:port]/[path/Ifile[?Param=valuel</p><ul><li>protocol : http https ftp</li><li>hostname : IP地址 、域名信息</li><li>port : 端口号，例[8002]   nginx、apache、tomcat</li><li> path/Ifile ：资源路径（访问静态资源的时候）</li><li>Param ：参数（动态资源：index.php)</li></ul><h4 id="HTTP消息头"><a href="#HTTP消息头" class="headerlink" title="HTTP消息头"></a>HTTP消息头</h4><ul><li><p>Authorization ：为一种内置HTTP身份验证向服务器提交证书</p></li><li><p>Location ：用于重定向响应（那些状态码以3开头的响应）中说明重定向的目标    <a href="http://www.360buy.com/">www.360buy.com</a> –&gt; <a href="http://www.jd.com/">www.jd.com</a></p></li></ul><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><ul><li>1xx ：提供信息<ul><li>100  客户必须继续发出请求</li><li>101  客户要求服务器根据请求转换HTTP协议版本</li></ul></li><li>2xx ：请求被成功提交<ul><li>200  （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。 </li><li>201  （已创建） 请求成功并且服务器创建了新的资源。</li><li>202  （已接受） 服务器已接受请求，但尚未处理。 </li><li>203  （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。 </li></ul></li><li>3xx ：客户端被重定向到其他资源<ul><li>300  （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。 </li><li>301  （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</li><li>302  （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</li></ul></li><li>4xx ：请求包含某种错误<ul><li>400  （错误请求） 服务器不理解请求的语法。 </li><li>401  （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。 </li><li>403  （禁止） 服务器拒绝请求。</li><li>404  （未找到） 服务器找不到请求的网页。</li></ul></li><li>5xx ：服务器执行请求时遇到错误<ul><li>500  （服务器内部错误） 服务器遇到错误，无法完成请求。</li><li>503  （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</li></ul></li></ul><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>用户访问网站的身份证，用来存储一些用户信息，用于辨别用户身份</p><h4 id="Cookie类型"><a href="#Cookie类型" class="headerlink" title="Cookie类型"></a>Cookie类型</h4><ul><li>会话Cookie<ul><li>用户推出浏览器访问后，即删除</li></ul></li><li>持久Cookie<ul><li>存储到硬盘中，维护用户周期性访问网站</li></ul></li></ul><h4 id="Cookie域"><a href="#Cookie域" class="headerlink" title="Cookie域"></a>Cookie域</h4><ul><li><p>Domain属性</p><ul><li>访问不同的网站会有很多个不同的Cookie，如何辨识Cookie对应哪个网站，我们在Cookie中引入Domain属性</li></ul></li><li><p>Path属性</p><ul><li>一个网站中有无数不同的资源和页面，访问同一个网站的不同页面时也会产生不同的Cookie，所以通过path属性来标识特定文档资源</li></ul></li></ul><h4 id="第三方Cookie"><a href="#第三方Cookie" class="headerlink" title="第三方Cookie"></a>第三方Cookie</h4><p>用来根据用户喜好进行内容推广使用，由于经常使用浏览器访问不同的网站和产品、广告，每次访问时会产生对应的第三方Cookie，等你再次访问其他网站时，它会自动读取，并且给你推荐相关产品</p><h1 id="网站渗透技术"><a href="#网站渗透技术" class="headerlink" title="网站渗透技术"></a>网站渗透技术</h1><h2 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h2><p>1、链路检测扫描</p><ul><li>利用ping命令进行测试扫描检查网络连通性<ul><li>ping命令进行扫描时，会先检查网络的连通性，然后根据测试扫描后的TTL值的输出，判断所扫描的系统类型（windows、linux、交换机）</li></ul></li></ul><p>2、端口检测扫描</p><ul><li>利用telnet命令进行测试扫描检查网络端口<ul><li>telnet命令扫描会进行检查网络的端口是否开放，根据访问输出消息即可进行判断</li></ul></li></ul><p>3、OS检测扫描</p><ul><li><p>OS扫描是黑客进行OS漏洞攻击的前奏,实时检测OS扫描是防止系统遭受OS漏洞攻击的重要手段。</p><ul><li><p>利用nmap命令测试扫描检查网络系统信息，使用TCP/IP协议栈指纹来识别不同的操作系统和设备。</p><p>具体实现方式如下：</p><ul><li>nmap内部包含了2600多已知系统的指纹特征（在文件nmap-os-db文件中记录）。将此指纹数据库作为进行指纹对比的样本库。</li><li>分别挑选一个open和closed的端口，向其发送经过精心设计的TCP/UDP/ICMP数据包，根据返回的数据包生成一份系统指纹。</li><li>将探测生成的指纹与namp-os-db中指纹进行对比，查找匹配的系统。如果无法匹配，以概率形式列举出可能的系统。</li></ul></li></ul></li></ul><p>4、弱口令探测</p><p>尝试安全性差的密码信息，一般的都是采用穷举破解原理 ,或者是利用字典文件加快破解速度 ,对常见的弱口令的收集</p><p>5、漏洞评估检测</p><p>利用漏洞扫描器，针对网络、应用、数据库的已知的漏洞评估，识别和量化环境中的安全漏洞。</p><h2 id="扫描技术"><a href="#扫描技术" class="headerlink" title="扫描技术"></a>扫描技术</h2><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220315142856326.png" alt="image-20220315142856326"></p><h2 id="扫描工具"><a href="#扫描工具" class="headerlink" title="扫描工具"></a>扫描工具</h2><ul><li><p>X-Scan —— 对指定主机或IP地址段进行安全检测</p><p>设置 → 扫描参数 → 检测范围（输入IP地址） → 全局设置 （按照自己的需求设置）→ 查看扫描报告</p></li><li><p>AppScan —— 一个桌面应用程序，进行web应用程序自动化脆弱性评估。<br>先破解 → 文件 → 新建扫描 → 常规扫描 →  AppScan（自动或手动）→ 输入网站IP地址的URL → 扫描网站生成报告</p></li><li><p>AWVS —— 自动化web测试工具</p><p>先激活再使用</p></li></ul><h1 id="Web渗透攻防环境搭建"><a href="#Web渗透攻防环境搭建" class="headerlink" title="Web渗透攻防环境搭建"></a>Web渗透攻防环境搭建</h1><h2 id="部署虚拟主机"><a href="#部署虚拟主机" class="headerlink" title="部署虚拟主机"></a>部署虚拟主机</h2><ul><li>Windows 2003/2008</li><li>Windows 7/10</li><li>Linux kail/centos</li></ul><h2 id="网站服务架构平台"><a href="#网站服务架构平台" class="headerlink" title="网站服务架构平台"></a>网站服务架构平台</h2><p>推荐： Windows 下的LNMP 、LAMP 、LNMT ，利用软件（phpstudy）</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/03/10/xiao-cheng-xu-xiang-mu-kai-fa/"/>
      <url>/2022/03/10/xiao-cheng-xu-xiang-mu-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="小程序项目开发"><a href="#小程序项目开发" class="headerlink" title="小程序项目开发"></a>小程序项目开发</h2><p><a href="https://www.finclip.com/?from=ruanyifeng">FinCilp</a> 小程序开发框架</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git分布式版本控制工具</title>
      <link href="/2022/03/06/git-fen-bu-shi-ban-ben-kong-zhi-gong-ju/"/>
      <url>/2022/03/06/git-fen-bu-shi-ban-ben-kong-zhi-gong-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="Git分布式版本控制工具"><a href="#Git分布式版本控制工具" class="headerlink" title="Git分布式版本控制工具"></a>Git分布式版本控制工具</h2><h2 id="1-、目标"><a href="#1-、目标" class="headerlink" title="1 、目标"></a>1 、目标</h2><ul><li>了解Git基本概念</li><li>能够概述git工作流程</li><li>能够使用Git常用命令</li><li>熟悉Git代码托管服务</li><li>能够使用idea操作git</li></ul><h2 id="2-、概述"><a href="#2-、概述" class="headerlink" title="2 、概述"></a>2 、概述</h2><h3 id="2-1、开发中的实际场景"><a href="#2-1、开发中的实际场景" class="headerlink" title="2.1、开发中的实际场景"></a>2.1、开发中的实际场景</h3><pre class="line-numbers language-yaml"><code class="language-yaml">场景一：备份小明负责的模块就要完成了，就在即将Release之前的一瞬间，电脑突然蓝屏，硬盘光荣牺牲！几个月来的努力付之东流场景二：代码还原这个项目中需要一个很复杂的功能，老王摸索了一个星期终于有眉目了，可是这被改得面目全非的代码已经回不到从前了。什么地方能买到哆啦A梦的时光机啊？场景三：协同开发小刚和小强先后从文件服务器上下载了同一个文件：Analysis.java。小刚在Analysis.java文件中的第 30 行声明了一个方法，叫count()，先保存到了文件服务器上；小强在Analysis.java文件中的第 50 行声明了一个方法，叫sum()，也随后保存到了文件服务器上，于是，count()方法就只存在于小刚的记忆中了 场景四：追溯问题代码的编写人和编写时间！老王是另一位项目经理，每次因为项目进度挨骂之后，他都不知道该扣哪个程序员的工资！就拿这次来说吧，有个Bug调试了 30 多个小时才知道是因为相关属性没有在应用初始化时赋值！可是二胖、王东、刘流和正经牛都不承认是自己干的！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2、版本控制器的方式"><a href="#2-2、版本控制器的方式" class="headerlink" title="2.2、版本控制器的方式"></a>2.2、版本控制器的方式</h3><pre class="line-numbers language-yaml"><code class="language-yaml">a、集中式版本控制工具集中式版本控制工具，版本库是集中存放在中央服务器的，team里每个人work时从中央服务器下载代码，是必须联网才能工作，局域网或互联网。个人修改后然后提交到中央版本库。举例：SVN和CVSb、分布式版本控制工具分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样工作的时候，无需要联网了，因为版本库就在你自己的电脑上。多人协作只需要各自的修改推送给对方，就能互相看到对方的修改了。举例：Git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3、SVN"><a href="#2-3、SVN" class="headerlink" title="2.3、SVN"></a>2.3、SVN</h3><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220306182853761.png" alt="SVN"></p><h3 id="2-4、Git"><a href="#2-4、Git" class="headerlink" title="2.4、Git"></a>2.4、Git</h3><pre class="line-numbers language-yaml"><code class="language-yaml">    Git是分布式的<span class="token punctuation">,</span>Git不需要有中心服务器，我们每台电脑拥有的东西都是一样的。我们使用Git并且有个中心服务器，仅仅是为了方便交换大家的修改，但是这个服务器的地位和我们每个人的PC是一样的。我们可以把它当做一个开发者的pc就可以就是为了大家代码容易交流不关机用的。没有它大家一样可以工作，只不过“交换”修改不方便而已。    git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git是Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（ 1991 － 2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标：    速度    简单的设计    对非线性开发模式的强力支持（允许成千上万个并行开发的分支）    完全分布式    有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220306183304090.png" alt="git"></p><h3 id="2-5、Git工作流程图"><a href="#2-5、Git工作流程图" class="headerlink" title="2.5、Git工作流程图"></a>2.5、Git工作流程图</h3><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220306183454176.png" alt="image-20220306183454176"></p><p>命令如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml">1. clone（克隆）<span class="token punctuation">:</span> 从远程仓库中克隆代码到本地仓库2. checkout（检出）<span class="token punctuation">:</span>从本地仓库中检出一个仓库分支然后进行修订3. add（添加）<span class="token punctuation">:</span> 在提交前先将代码提交到暂存区4. commit（提交）<span class="token punctuation">:</span> 提交到本地仓库。本地仓库中保存修改的各个历史版本5. fetch (抓取) ： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。6. pull (拉取) ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于fetch+merge7. push（推送） <span class="token punctuation">:</span> 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-、Git安装与常用命令"><a href="#3-、Git安装与常用命令" class="headerlink" title="3 、Git安装与常用命令"></a>3 、Git安装与常用命令</h2><p>本教程里的git命令例子都是在Git Bash中演示的，会用到一些基本的linux命令，在此为大家提前列举：</p><pre class="line-numbers language-yaml"><code class="language-yaml">ls/ll         查看当前目录cat         查看文件内容touch         创建文件vi/vi编辑器 （使用vi编辑器是为了方便展示效果，学员可以记事本、editPlus、notPad++等其它编辑器）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1、-Git环境配置"><a href="#3-1、-Git环境配置" class="headerlink" title="3.1、 Git环境配置"></a>3.1、 Git环境配置</h3><p>3.1.1 下载与安装</p><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p>双击下载的安装文件来安装Git。安装完成后在电脑桌面（也可以是其他目录）点击右键，如果能够看<br>到如下两个菜单则说明Git安装成功。</p><p><strong>备注：</strong></p><p>Git GUI：Git提供的图形界面工具</p><p>Git Bash：Git提供的命令行工具</p><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息</p><p><strong>3.1.2基本配置</strong></p><ol><li><p>打开Git Bash</p></li><li><p>设置用户信息</p></li><li><p>查看配置信息</p><pre class="line-numbers language-yaml"><code class="language-yaml">git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global user.name “itcast”git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global user.email “hello@itcast.cn”git config <span class="token punctuation">-</span><span class="token punctuation">-</span>list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>3.1.3 为常用指令配置别名（可选）</strong></p><p>有些常用的指令参数非常多，每次都要输入好多参数，我们可以使用别名。</p><ol><li>打开用户目录，创建.bashrc文件</li></ol><p>部分windows系统不允许用户创建点号开头的文件，可以打开gitBash,执行 touch ~/.bashrc</p><ol start="2"><li><p>在.bashrc文件中输入如下内容：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#用于输出git提交日志</span>alias git<span class="token punctuation">-</span>log='git log <span class="token punctuation">-</span><span class="token punctuation">-</span>pretty=oneline <span class="token punctuation">-</span><span class="token punctuation">-</span>all <span class="token punctuation">-</span><span class="token punctuation">-</span>graph <span class="token punctuation">-</span><span class="token punctuation">-</span>abbrev<span class="token punctuation">-</span>commit'<span class="token comment" spellcheck="true">#用于输出当前目录所有文件及基本信息</span>alias ll='ls <span class="token punctuation">-</span>al'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>打开gitBash，执行source ~/.bashrc</p></li></ol><p><strong>3.1.4 解决GitBash乱码问题</strong></p><ol><li><p>打开GitBash执行下面命令</p><pre class="line-numbers language-yaml"><code class="language-yaml">git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global core.quotepath false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>${git_home}/etc/bash.bashrc 文件最后加入下面两行</p><pre class="line-numbers language-yaml"><code class="language-yaml">export LANG="zh_CN.UTF<span class="token punctuation">-</span>8"export LC_ALL="zh_CN.UTF<span class="token punctuation">-</span>8"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="3-2、获取本地仓库"><a href="#3-2、获取本地仓库" class="headerlink" title="3.2、获取本地仓库"></a>3.2、获取本地仓库</h3><p>要使用Git对我们的代码进行版本控制，首先需要获得本地仓库</p><p>1 ）在电脑的任意位置创建一个空目录（例如test）作为我们的本地Git仓库</p><p>2 ）进入这个目录中，点击右键打开Git bash窗口</p><p>3 ）执行命令git init</p><p>4 ）如果创建成功后可在文件夹下看到隐藏的.git目录。</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220306184335987.png" alt="image-20220306184335987"></p><h3 id="3-3、基础操作指令"><a href="#3-3、基础操作指令" class="headerlink" title="3.3、基础操作指令"></a>3.3、基础操作指令</h3><p>Git工作目录下对于文件的 <strong>修改</strong> (增加、删除、更新)会存在几个状态，这些 <strong>修改</strong> 的状态会随着我们执行Git<br>的命令而发生变化。</p><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220306184514824.png" alt="image-20220306184514824"></p><p><strong>本章节主要讲解如何使用命令来控制这些状态之间的转换：</strong></p><ol><li>git add (工作区 –&gt; 暂存区)</li><li>git commit (暂存区 –&gt; 本地仓库)</li></ol><p><strong>3.3.1、*查看修改的状态（status）</strong></p><ul><li>作用：查看的修改的状态（暂存区、工作区）</li><li>命令形式：git status</li></ul><p><strong>3.3.2、*添加工作区到暂存区(add)</strong></p><ul><li><p>作用：添加工作区一个或多个文件的修改到暂存区</p></li><li><p>命令形式：git add 单个文件名|通配符 将所有修改加入暂存区：</p><pre class="line-numbers language-yaml"><code class="language-yaml">git add .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>3.3.3、*提交暂存区到本地仓库(commit)</strong></p><ul><li>作用：提交暂存区内容到本地仓库的当前分支</li><li>命令形式：git commit -m ‘注释内容’</li></ul><p><img src="C:\Users\liyi0\AppData\Roaming\Typora\typora-user-images\image-20220306185212856.png" alt="image-20220306185212856"></p><p><strong>3.3.4、*查看提交日志(log)</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml">git<span class="token punctuation">-</span>log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>在3.1.3中配置的别名</strong> git <strong>-</strong> log <strong>就包含了这些参数，所以后续可以直接使用指令</strong> git-log</p><ul><li>作用:查看提交记录</li><li>命令形式：git log [option]<ul><li>options<ul><li>–all 显示所有分支</li><li>–pretty=oneline 将提交信息显示为一行</li><li>–abbrev-commit 使得输出的commitId更简短</li><li>–graph 以图的形式显示</li></ul></li></ul></li></ul><p><strong>3.3.5、版本回退</strong></p><ul><li>作用：版本切换</li><li>命令形式：git reset –hard commitID<ul><li>commitID 可以使用git-log或git log指令查看</li></ul></li><li>如何查看已经删除的记录？<ul><li>git reflog</li><li>这个指令可以看到已经删除的提交记录</li></ul></li></ul><p><strong>3.3.6、添加文件至忽略列表</strong></p><p>一般我们总会有些文件无需纳入Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以在工作目录中创建一个名为 .gitignore 的文件（文件名称固定），列出要忽略的文件模式。下面是一个示例：</p><p><strong>练习:基础操作</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># no .a files</span>*.a<span class="token comment" spellcheck="true"># but do track lib.a, even though you're ignoring .a files above</span><span class="token tag">!lib.a</span><span class="token comment" spellcheck="true"># only ignore the TODO file in the current directory, not subdir/TODO</span>/TODO<span class="token comment" spellcheck="true"># ignore all files in the build/ directory</span>build/<span class="token comment" spellcheck="true"># ignore doc/notes.txt, but not doc/server/arch.txt</span>doc/*.txt<span class="token comment" spellcheck="true"># ignore all .pdf files in the doc/ directory</span>doc/**/*.pdf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#####################仓库初始化######################</span><span class="token comment" spellcheck="true"># 创建目录（git_test01）并在目录下打开gitbash</span>略<span class="token comment" spellcheck="true"># 初始化git仓库</span>git init<span class="token comment" spellcheck="true">#####################创建文件并提交#####################</span><span class="token comment" spellcheck="true"># 目录下创建文件 file01.txt</span>略<span class="token comment" spellcheck="true"># 将修改加入暂存区</span>git add .<span class="token comment" spellcheck="true"># 将修改提交到本地仓库，提交记录内容为：commit 001</span>git commit <span class="token punctuation">-</span>m 'commit 001'<span class="token comment" spellcheck="true"># 查看日志</span>git log<span class="token comment" spellcheck="true">####################修改文件并提交######################</span><span class="token comment" spellcheck="true"># 修改file01的内容为：count=</span>略<span class="token comment" spellcheck="true"># 将修改加入暂存区</span>git add.<span class="token comment" spellcheck="true"># # 将修改提交到本地仓库，提交记录内容为：update file</span>git commit <span class="token punctuation">-</span><span class="token punctuation">-</span>m 'update file01'<span class="token comment" spellcheck="true"># 查看日志</span>git log<span class="token comment" spellcheck="true"># 以精简的方式显示提交记录</span>git<span class="token punctuation">-</span>log<span class="token comment" spellcheck="true">####################将最后一次修改还原##################</span><span class="token comment" spellcheck="true"># 查看提交记录</span>git<span class="token punctuation">-</span>log<span class="token comment" spellcheck="true"># 找到倒数第 2 次提交的commitID</span>略<span class="token comment" spellcheck="true"># 版本回退,想要回退哪一步，就找到该步的commitID</span>git reset commitID <span class="token punctuation">-</span><span class="token punctuation">-</span>hard<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4、分支"><a href="#3-4、分支" class="headerlink" title="3.4、分支"></a>3.4、分支</h3><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><p><strong>3.4.1、查看本地分支</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml">命令：git branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3.4.2、创建本地分支</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml">命令：git branch 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3.4.4、*切换分支(checkout)</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml">命令：git checkout 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们还可以直接切换到一个不存在的分支（创建并切换）</p><pre class="line-numbers language-yaml"><code class="language-yaml">命令：git checkout <span class="token punctuation">-</span>b 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3.4.6、*合并分支(merge)</strong></p><p>一个分支上的提交可以合并到另一个分支，首先切换到想要合并的分支上，然后选中被合并的分支</p><p>命令：git merge 分支名称</p><p><strong>3.4.7、删除分支</strong></p><p><strong>不能删除当前分支，只能删除其他分支</strong></p><p>git branch -d b1 删除分支时，需要做各种检查</p><p>git branch -D b1 不做任何检查，强制删除</p><p><strong>3.4.8、解决冲突</strong></p><p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解决冲突，解决冲突步骤如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml">1. 处理文件中冲突的地方2. 将解决完冲突的文件加入暂存区(add)3. 提交到仓库(commit)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>冲突部分的内容处理如下所示：</p><p>1、准备新的<code>feature1</code>分支，继续我们的新分支开发：</p><pre class="line-numbers language-yaml"><code class="language-yaml">$ git switch <span class="token punctuation">-</span>c feature1Switched to a new branch 'feature1'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、修改<code>readme.txt</code>最后一行，改为：</p><pre class="line-numbers language-yaml"><code class="language-yaml">Creating a new branch is quick AND simple.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、在<code>feature1</code>分支上提交：</p><pre class="line-numbers language-yaml"><code class="language-yaml">$ git add readme.txt$ git commit <span class="token punctuation">-</span>m "AND simple"<span class="token punctuation">[</span>feature1 14096d0<span class="token punctuation">]</span> AND simple 1 file changed<span class="token punctuation">,</span> 1 insertion(+)<span class="token punctuation">,</span> 1 deletion(<span class="token punctuation">-</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、切换到<code>master</code>分支：</p><pre class="line-numbers language-yaml"><code class="language-yaml">$ git switch masterSwitched to branch 'master'Your branch is ahead of 'origin/master' by 1 commit.  (use "git push" to publish your local commits)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Git还会自动提示我们当前<code>master</code>分支比远程的<code>master</code>分支要超前1个提交。</p><p>5、在<code>master</code>分支上把<code>readme.txt</code>文件的最后一行改为：</p><pre class="line-numbers language-yaml"><code class="language-yaml">Creating a new branch is quick &amp; simple.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提交：</p><pre class="line-numbers language-yaml"><code class="language-yaml">$ git add readme.txt $ git commit <span class="token punctuation">-</span>m "&amp; simple"<span class="token punctuation">[</span>master 5dc6824<span class="token punctuation">]</span> &amp; simple 1 file changed<span class="token punctuation">,</span> 1 insertion(+)<span class="token punctuation">,</span> 1 deletion(<span class="token punctuation">-</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在，<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交，变成了这样：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919023000423040/0" alt="git-br-feature1"></p><p>6、这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</p><pre class="line-numbers language-yaml"><code class="language-yaml">$ git merge feature1Auto<span class="token punctuation">-</span>merging readme.txtCONFLICT (content)<span class="token punctuation">:</span> Merge conflict in readme.txtAutomatic merge failed; fix conflicts and then commit the result.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>7、果然冲突了！Git告诉我们，<code>readme.txt</code>文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件：</p><pre class="line-numbers language-yaml"><code class="language-yaml">$ git statusOn branch masterYour branch is ahead of 'origin/master' by 2 commits.  (use "git push" to publish your local commits)You have unmerged paths.  (fix conflicts and run "git commit")  (use "git merge <span class="token punctuation">-</span><span class="token punctuation">-</span>abort" to abort the merge)Unmerged paths<span class="token punctuation">:</span>  (use "git add &lt;file<span class="token punctuation">></span><span class="token punctuation">...</span>" to mark resolution)    both modified<span class="token punctuation">:</span>   readme.txtno changes added to commit (use "git add" and/or "git commit <span class="token punctuation">-</span>a")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8、我们可以直接查看readme.txt的内容：</p><pre class="line-numbers language-yaml"><code class="language-yaml">Git is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADCreating a new branch is quick &amp; simple.=======Creating a new branch is quick AND simple.<span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span> feature1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9、Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存：</p><pre class="line-numbers language-yaml"><code class="language-yaml">Creating a new branch is quick and simple.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10、再提交：</p><pre class="line-numbers language-yaml"><code class="language-yaml">$ git add readme.txt $ git commit <span class="token punctuation">-</span>m "conflict fixed"<span class="token punctuation">[</span>master cf810e4<span class="token punctuation">]</span> conflict fixed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919023031831104/0" alt="git-br-conflict-merged"></p><p>11、用带参数的<code>git log</code>也可以看到分支的合并情况：</p><pre class="line-numbers language-yaml"><code class="language-yaml">$ git log <span class="token punctuation">-</span><span class="token punctuation">-</span>graph <span class="token punctuation">-</span><span class="token punctuation">-</span>pretty=oneline <span class="token punctuation">-</span><span class="token punctuation">-</span>abbrev<span class="token punctuation">-</span>commit*   cf810e4 (HEAD <span class="token punctuation">-</span><span class="token punctuation">></span> master) conflict fixed<span class="token punctuation">|</span>\  <span class="token punctuation">|</span> * 14096d0 (feature1) AND simple* <span class="token punctuation">|</span> 5dc6824 &amp; simple<span class="token punctuation">|</span>/  * b17d20e branch test* d46f35e (origin/master) remove test.txt* b84166e add test.txt* 519219b git tracks changes* e43a48b understand how stage works* 1094adb append GPL* e475afc add distributed* eaadf4e wrote a readme file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>12、最后，删除<code>feature1</code>分支：</p><pre class="line-numbers language-yaml"><code class="language-yaml">$ git branch <span class="token punctuation">-</span>d feature1Deleted branch feature1 (was 14096d0).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>3.4.9、开发中分支使用原则与流程</strong></p><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><p>在开发中，一般有如下分支使用原则与流程：</p><pre class="line-numbers language-yaml"><code class="language-yaml">master （生产） 分支线上分支，主分支，中小规模项目作为线上运行的应用对应的分支；develop（开发）分支是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支<span class="token punctuation">,</span>准备上线。feature/xxxx分支从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到develop分支。hotfix/xxxx分支，从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、test、develop分支。还有一些其他分支，在此不再详述，例如test分支（用于代码测试）、pre分支（预上线分支）等等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习:分支操作</strong></p><h2 id="4-、Git远程仓库"><a href="#4-、Git远程仓库" class="headerlink" title="4 、Git远程仓库"></a>4 、Git远程仓库</h2><h3 id="4-1、-常用的托管服务-远程仓库"><a href="#4-1、-常用的托管服务-远程仓库" class="headerlink" title="4.1、 常用的托管服务[远程仓库]"></a>4.1、 常用的托管服务[远程仓库]</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">###########################创建并切换到dev01分支，在dev01分支提交</span><span class="token comment" spellcheck="true"># [master]创建分支dev</span>git branch dev<span class="token comment" spellcheck="true"># [master]切换到dev</span>git checkout dev<span class="token comment" spellcheck="true"># [dev01]创建文件file02.txt</span>略<span class="token comment" spellcheck="true"># [dev01]将修改加入暂存区并提交到仓库,提交记录内容为：add file02 on dev</span>git add.git commit <span class="token punctuation">-</span>m 'add file02 on dev'<span class="token comment" spellcheck="true"># [dev01]以精简的方式显示提交记录</span>git<span class="token punctuation">-</span>log<span class="token comment" spellcheck="true">###########################切换到master分支，将dev01合并到master分支</span><span class="token comment" spellcheck="true"># [dev01]切换到master分支</span>git checkout master<span class="token comment" spellcheck="true"># [master]合并dev01到master分支</span>git merge dev<span class="token comment" spellcheck="true"># [master]以精简的方式显示提交记录</span>git<span class="token punctuation">-</span>log<span class="token comment" spellcheck="true"># [master]查看文件变化(目录下也出现了file02.txt)</span>略<span class="token comment" spellcheck="true">##########################删除dev01分支</span><span class="token comment" spellcheck="true"># [master]删除dev01分支</span>git branch <span class="token punctuation">-</span>d dev<span class="token comment" spellcheck="true"># [master]以精简的方式显示提交记录</span>git<span class="token punctuation">-</span>log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2、-注册码云"><a href="#4-2、-注册码云" class="headerlink" title="4.2、 注册码云"></a>4.2、 注册码云</h3><p>要想使用码云的相关服务，需要注册账号（地址： <a href="https://gitee.com/signup">https://gitee.com/signup</a> ）</p><h3 id="4-3、-创建远程仓库"><a href="#4-3、-创建远程仓库" class="headerlink" title="4.3、 创建远程仓库"></a>4.3、 创建远程仓库</h3><pre class="line-numbers language-yaml"><code class="language-yaml">前面我们已经知道了Git中存在两种类型的仓库，即本地仓库和远程仓库。那么我们如何搭建Git远程仓库呢？我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub、码云、GitLab等。gitHub（ 地址：https<span class="token punctuation">:</span>//github.com/ ）是一个面向开源及私有软件项目的托管平台，因为只支持Git 作为唯一的版本库格式进行托管，故名gitHub码云（地址： https<span class="token punctuation">:</span>//gitee.com/ ）是国内的一个代码托管平台，由于服务器在国内，所以相比于GitHub，码云速度会更快GitLab （地址： https<span class="token punctuation">:</span>//about.gitlab.com/ ）是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务<span class="token punctuation">,</span>一般用于在企业、学校等内部网络搭建git私服。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>仓库创建完成后可以看到仓库地址，如下图所示:</p><h3 id="4-4、配置SSH公钥"><a href="#4-4、配置SSH公钥" class="headerlink" title="4.4、配置SSH公钥"></a>4.4、配置SSH公钥</h3><p>生成SSH公钥</p><pre class="line-numbers language-yaml"><code class="language-yaml">ssh<span class="token punctuation">-</span>keygen <span class="token punctuation">-</span>t rsa不断回车如果公钥已经存在，则自动覆盖Gitee设置账户共公钥获取公钥cat ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证是否配置成功</p><pre class="line-numbers language-yaml"><code class="language-yaml">ssh <span class="token punctuation">-</span>T git@gitee.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-5、操作远程仓库"><a href="#4-5、操作远程仓库" class="headerlink" title="4.5、操作远程仓库"></a>4.5、操作远程仓库</h3><p>4.5.1、添加远程仓库</p><p>此操作是先初始化本地库，然后与已创建的远程库进行对接 。</p><pre class="line-numbers language-yaml"><code class="language-yaml">命令： git remote add &lt;远端名称<span class="token punctuation">></span> &lt;仓库路径<span class="token punctuation">></span>远端名称，默认是origin，取决于远端服务器设置仓库路径，从远端服务器获取此URL<span class="token key atrule">例如</span><span class="token punctuation">:</span> git remote add origin git@gitee.com<span class="token punctuation">:</span>czbk_zhang_meng/git_test.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.5.2、查看远程仓库</p><pre class="line-numbers language-yaml"><code class="language-yaml">命令：git remote<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.5.3、推送到远程仓库</p><pre class="line-numbers language-yaml"><code class="language-yaml">命令：git push <span class="token punctuation">[</span><span class="token punctuation">-</span>f<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">-</span><span class="token punctuation">-</span>set<span class="token punctuation">-</span>upstream<span class="token punctuation">]</span> <span class="token punctuation">[</span>远端名称 <span class="token punctuation">[</span>本地分支名<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>远端分支名<span class="token punctuation">]</span> <span class="token punctuation">]</span>如果远程分支名和本地分支名称相同，则可以只写本地分支git push origin master<span class="token punctuation">-</span>f 表示强制覆盖<span class="token punctuation">-</span><span class="token punctuation">-</span>set<span class="token punctuation">-</span>upstream 推送到远端的同时并且建立起和远端分支的关联关系。git push <span class="token punctuation">-</span><span class="token punctuation">-</span>set<span class="token punctuation">-</span>upstream origin master如果 当前分支已经和远端分支关联 ，则可以省略分支名和远端名。git push 将master分支推送到已关联的远端分支。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询远程仓库</p><p>4.5.4、 本地分支与远程分支的关联关系</p><pre class="line-numbers language-yaml"><code class="language-yaml">查看关联关系我们可以使用 git branch <span class="token punctuation">-</span>vv命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.5.5、从远程仓库克隆</p><p>如果已经有一个远端仓库，我们可以直接clone到本地。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">命令</span><span class="token punctuation">:</span> git clone &lt;仓库路径<span class="token punctuation">></span> <span class="token punctuation">[</span>本地目录<span class="token punctuation">]</span>本地目录可以省略，会自动生成一个目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.5.6、从远程仓库中抓取和拉取</p><p>远程分支和本地的分支一样，我们可以进行merge操作，只是需要先把远端仓库里的更新都下载到本<br>地，再进行操作。</p><pre class="line-numbers language-yaml"><code class="language-yaml">抓取 命令：git fetch <span class="token punctuation">[</span>remote name<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch name<span class="token punctuation">]</span>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果不指定远端名称和分支名，则抓取所有分支。</p><pre class="line-numbers language-yaml"><code class="language-yaml">拉取 命令：git pull <span class="token punctuation">[</span>remote name<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch name<span class="token punctuation">]</span>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge如果不指定远端名称和分支名，则抓取所有并更新当前分支。1. 在test01这个本地仓库进行一次提交并推送到远程仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在另一个仓库将远程提交的代码拉取到本地仓库</li></ol><p>4.5.7、解决合并冲突</p><p>在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。</p><p>A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要推送到远程仓库，此时B用户晚于A用户， 故需要先拉取远程仓库的提交，经过合并后才能推送到远端分支 ,如下图所示。</p><p>在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲突。</p><p>远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同 ，在此不再赘述，需要学员自己练习。</p><p><strong>练习:远程仓库操作</strong></p><h2 id="5-、在Idea中使用Git"><a href="#5-、在Idea中使用Git" class="headerlink" title="5 、在Idea中使用Git"></a>5 、在Idea中使用Git</h2><h3 id="5-1、在Idea中配置Git"><a href="#5-1、在Idea中配置Git" class="headerlink" title="5.1、在Idea中配置Git"></a>5.1、在Idea中配置Git</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">##########################1-将本地仓库推送到远程仓库</span><span class="token comment" spellcheck="true"># 完成4.1、4.2、4.3、4.4的操作</span>略<span class="token comment" spellcheck="true"># [git_test01]添加远程仓库</span>git remote add origin  git@gitee.com/**/**.git<span class="token comment" spellcheck="true"># [git_test01]将master分支推送到远程仓库,并与远程仓库的master分支绑定关联关系</span>git push <span class="token punctuation">-</span><span class="token punctuation">-</span>set<span class="token punctuation">-</span>upstream origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">###########################2-将远程仓库克隆到本地</span><span class="token comment" spellcheck="true"># 将远程仓库克隆到本地git_test02目录下</span>git clone git@gitee.com/**/**.git git_test<span class="token comment" spellcheck="true"># [git_test02]以精简的方式显示提交记录</span>git<span class="token punctuation">-</span>log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">###########################3-将本地修改推送到远程仓库</span><span class="token comment" spellcheck="true"># [git_test01]创建文件file03.txt</span>略<span class="token comment" spellcheck="true"># [git_test01]将修改加入暂存区并提交到仓库,提交记录内容为：add file</span>git add.git commit <span class="token punctuation">-</span>m 'add file03'<span class="token comment" spellcheck="true"># [git_test01]将master分支的修改推送到远程仓库</span>git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">###########################4-将远程仓库的修改更新到本地</span><span class="token comment" spellcheck="true"># [git_test02]将远程仓库修改再拉取到本地</span>git pull<span class="token comment" spellcheck="true"># 以精简的方式显示提交记录</span>git<span class="token punctuation">-</span>log<span class="token comment" spellcheck="true"># 查看文件变化(目录下也出现了file03.txt)</span>略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装好IntelliJ IDEA后，如果Git安装在默认路径下，那么idea会自动找到git的位置，如果更改了Git的安<br>装位置则需要手动配置下Git的路径。选择File→Settings打开设置窗口，找到Version Control下的git选<br>项：</p><p>点击Test按钮,现在执行成功，配置完成</p><h3 id="5-2、在Idea中操作Git"><a href="#5-2、在Idea中操作Git" class="headerlink" title="5.2、在Idea中操作Git"></a>5.2、在Idea中操作Git</h3><p>场景：本地已经有一个项目，但是并不是git项目，我们需要将这个放到码云的仓库里，和其他开发人员<br>继续一起协作开发。</p><p>5.2.1、创建项目远程仓库（参照4.3）</p><p>5.2.2、初始化本地仓库</p><p>5.2.3、设置远程仓库</p><p>5.2.4、提交到本地仓库</p><p>5.2.6、推送到远程仓库</p><p>5.2.7、克隆远程仓库到本地</p><p>5.2.8、创建分支</p><ul><li><p>最常规的方式</p></li><li><p>最强大的的方式</p></li></ul><p>5.2.9、切换分支及其他分支相关操作</p><p>5.2.11、解决冲突</p><ol><li><p>执行merge或pull操作时，可能发生冲突</p><ol start="2"><li>冲突解决后加入暂存区</li><li> 提交到本地仓库</li><li>推送到远程仓库</li></ol></li></ol><h3 id="5-3、IDEA常用GIT操作入口"><a href="#5-3、IDEA常用GIT操作入口" class="headerlink" title="5.3、IDEA常用GIT操作入口"></a>5.3、IDEA常用GIT操作入口</h3><ol><li>第一张图上的快捷入口可以基本满足开发的需求。</li><li>第二张图是更多在IDEA操作git的入口。</li></ol><h3 id="5-4、场景分析"><a href="#5-4、场景分析" class="headerlink" title="5.4、场景分析"></a>5.4、场景分析</h3><p>基于我们后面的实战模式，我们做一个综合练习</p><p>当前的开发环境如下，我们每个人都对这个项目已经开发一段时间，接下来我们要切换成团队开发模式。也就是我们由一个团队来完成这个项目实战的内容。团队有组长和若干组员组成（组长就是开发中的项目经理）。</p><p>所有操作都在idea中完成。</p><p>练习场景如下：</p><p>1 、由组长，基于本项目创建本地仓库；创建远程仓库，推送项目到远程仓库。</p><p>2 、每一位组员从远程仓库克隆项目到idea中,这样每位同学在自己电脑上就有了一个工作副本，可以正式的开始开发了。我们模拟两个组员(组员A、组员B)，克隆两个工作区。</p><p>3 、组员A修改工作区,提交到本地仓库，再推送到远程仓库。组员B可以直接从远程仓库获取最新的代码。</p><p>4 、组员A和组员B修改了同一个文件的同一行，提交到本地没有问题，但是推送到远程仓库时，后一个推送操作就会失败。</p><p>解决方法：需要先获取远程仓库的代码到本地仓库，编辑冲突，提交并推送代码。</p><h2 id="附：几条铁令"><a href="#附：几条铁令" class="headerlink" title="附：几条铁令"></a>附：几条铁令</h2><ol><li><p>切换分支前先提交本地的修改</p></li><li><p>代码及时提交，提交过了就不会丢</p></li><li><p>遇到任何问题都不要删除文件目录，第 1 时间找老师</p></li></ol><h2 id="附：疑难问题解决"><a href="#附：疑难问题解决" class="headerlink" title="附：疑难问题解决"></a>附：疑难问题解决</h2><ol><li><p>windows下看不到隐藏的文件（.bashrc、.gitignore）</p></li><li><p>windows下无法创建.ignore|.bashrc文件</p></li></ol><p>这里以创建.ignore文件为例：</p><pre class="line-numbers language-yaml"><code class="language-yaml">在git目录下打开gitbash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行指令touch .gitignore</p><h2 id="附：IDEA集成GitBash作为Terminal"><a href="#附：IDEA集成GitBash作为Terminal" class="headerlink" title="附：IDEA集成GitBash作为Terminal"></a>附：IDEA集成GitBash作为Terminal</h2>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-matery博客目录结构</title>
      <link href="/2022/03/06/hexo-bo-ke-mu-lu-jie-xi/"/>
      <url>/2022/03/06/hexo-bo-ke-mu-lu-jie-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="目录部分"><a href="#目录部分" class="headerlink" title="目录部分"></a>目录部分</h4><ul><li><code>deploy_git</code>，与<code>git</code>是<strong>git</strong>相关内容，如果无法git到仓库，需要检查git文件夹中配置</li><li><code>scaffolds</code>，存放的是默认生成md文件的配置，其中<code>post.md</code>是默认生成文章的配置</li><li><code>scripts</code>，扩展脚本目录，这里可以自定义一些javascript脚本存放的是页面加载脚本(非默认)</li><li><strong><code>source</code>，hexo源码目录，是核心目录，下面详解</strong></li><li><strong><code>themes</code>，是主题目录，下面详解</strong></li><li><code>packages，</code>是存放看板动画模型的(非默认)</li><li><code>public，</code>是通过hexo g编译出来的最终网页文件，也是部署到github上的文件，输出的静态网页内容目录</li><li><code>node_modules</code>，是hexo的一些库文件</li></ul><h4 id="文件部分"><a href="#文件部分" class="headerlink" title="文件部分"></a>文件部分</h4><ul><li><strong><code>_config.yml</code>，是hexo的全局配置文件(核心配置文件)，一些插件安装后都需在此文件开启</strong></li><li><code>CNAME</code>，可配置个人域名</li><li><code>package.json</code>，应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li><li><code>main.py</code>，个人快速执行脚本(非默认)</li></ul><h3 id="source目录"><a href="#source目录" class="headerlink" title="source目录"></a>source目录</h3><p><strong>hexo的源码目录，写文章的主要目录</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml">├── _data              <span class="token comment" spellcheck="true"># 存放友链的friends.json和相册的json</span>├── _posts             <span class="token comment" spellcheck="true"># 所有文章就在这里</span>├── 404                <span class="token comment" spellcheck="true"># 404相关</span>├── categories         <span class="token comment" spellcheck="true"># 归档页面</span>├── contact            <span class="token comment" spellcheck="true"># 关于页面</span>├── friends            <span class="token comment" spellcheck="true"># 友联页面</span>├── galleries          <span class="token comment" spellcheck="true"># 相册页面</span>├── images             <span class="token comment" spellcheck="true"># 图片页面，其他图，懒加载图存放位置</span>├── media              <span class="token comment" spellcheck="true"># 多媒体</span>├── tags               <span class="token comment" spellcheck="true"># 标签页</span>├── 404.md             <span class="token comment" spellcheck="true"># 404崩溃页面</span>└── CANME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="themes目录"><a href="#themes目录" class="headerlink" title="themes目录"></a>themes目录</h3><blockquote><p>hexo-theme-matery主题为例，**<code>_config.yml</code>是主题配置文件，非常重要**</p></blockquote><pre class="line-numbers language-yaml"><code class="language-yaml">├── languages          <span class="token comment" spellcheck="true"># 多语言</span><span class="token punctuation">|</span>   ├── default.yml    <span class="token comment" spellcheck="true"># 默认语言</span><span class="token punctuation">|</span>   └── zh<span class="token punctuation">-</span>CN.yml      <span class="token comment" spellcheck="true"># 中文语言</span>├── layout             <span class="token comment" spellcheck="true"># 布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span><span class="token punctuation">|</span>   ├── _partial       <span class="token comment" spellcheck="true"># 局部的布局，此目录下的*.ejs是对头尾等局部的控制</span><span class="token punctuation">|</span>   └── _widget        <span class="token comment" spellcheck="true"># 小挂件的布局，页面下方小挂件的控制</span>├── source             <span class="token comment" spellcheck="true"># 源码</span><span class="token punctuation">|</span>   ├── css            <span class="token comment" spellcheck="true"># css源码 </span><span class="token punctuation">|</span>   <span class="token punctuation">|</span>   ├── _base      <span class="token comment" spellcheck="true"># *.styl基础css</span><span class="token punctuation">|</span>   <span class="token punctuation">|</span>   ├── _partial   <span class="token comment" spellcheck="true"># *.styl局部css</span><span class="token punctuation">|</span>   <span class="token punctuation">|</span>   ├── fonts      <span class="token comment" spellcheck="true"># 字体</span><span class="token punctuation">|</span>   <span class="token punctuation">|</span>   ├── images     <span class="token comment" spellcheck="true"># 图片</span><span class="token punctuation">|</span>   <span class="token punctuation">|</span>   └── style.styl <span class="token comment" spellcheck="true"># *.styl引入需要的css源码</span><span class="token punctuation">|</span>   ├── fancybox       <span class="token comment" spellcheck="true"># fancybox效果源码</span><span class="token punctuation">|</span>   └── js             <span class="token comment" spellcheck="true"># javascript源代码</span>├── _config.yml        <span class="token comment" spellcheck="true"># 主题配置文件</span>└── README.md          <span class="token comment" spellcheck="true"># 用GitHub的都知道</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="layout目录"><a href="#layout目录" class="headerlink" title="layout目录"></a>layout目录</h4><p>目录部分</p><ul><li><code>_partial</code>主要修改文件</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml">bg<span class="token punctuation">-</span>cover<span class="token punctuation">-</span>content.ejs       <span class="token comment" spellcheck="true"># 主页背景图相关，banner图切换，打字机效果加字等</span>footer.ejs                  <span class="token comment" spellcheck="true"># 页脚配置</span>social<span class="token punctuation">-</span>link.ejs            <span class="token comment" spellcheck="true"># 修改社交链接，微信，qq，微博等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>文件</p><pre class="line-numbers language-yaml"><code class="language-yaml">404.ejs                 <span class="token comment" spellcheck="true"># 404页面</span>about.ejs               <span class="token comment" spellcheck="true"># 关于我页面，个人简历</span>archive.ejscategories.ejscategory.ejscontact.ejsdouban.ejs                <span class="token comment" spellcheck="true"># 豆瓣插件</span>friends.ejsgalleries.ejs            <span class="token comment" spellcheck="true"># 自定义相册</span>gallery.ejs                <span class="token comment" spellcheck="true"># 自定义相册</span>index.ejslayout.ejs                <span class="token comment" spellcheck="true"># 比较重要，我的天气，动态标签，鼠标点击特效等都在这开启</span>post.ejstag.ejstags.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>重点是这个<strong>layout.ejs</strong>，几乎所有自定义特效都在这个文件开启</p></blockquote><h4 id="source目录-1"><a href="#source目录-1" class="headerlink" title="source目录"></a>source目录</h4><p>存放主题源码</p><pre class="line-numbers language-yaml"><code class="language-yaml">├── css            <span class="token comment" spellcheck="true">#css源码 </span><span class="token punctuation">|</span>   ├── gallery.css      <span class="token comment" spellcheck="true"># 相册css</span><span class="token punctuation">|</span>   ├── gitment.css   <span class="token punctuation">|</span>   ├── matery.css          <span class="token comment" spellcheck="true"># 主页的css相关调整，字体调整，主题色修改</span><span class="token punctuation">|</span>   ├── my<span class="token punctuation">-</span>gitalk.css      <span class="token punctuation">|</span>   └── my.css           <span class="token comment" spellcheck="true"># hexo-filter-github-emojis</span>├── js                       <span class="token comment" spellcheck="true"># javascript源代码，自定义js</span><span class="token punctuation">|</span>   ├── click.js          <span class="token comment" spellcheck="true"># 鼠标点击特效</span><span class="token punctuation">|</span>   ├── crypto<span class="token punctuation">-</span>js.js      <span class="token comment" spellcheck="true"># 加密相关</span><span class="token punctuation">|</span>   ├── cursor.js         <span class="token comment" spellcheck="true"># 雪花背景特效</span><span class="token punctuation">|</span>   ├── fireworks.js    <span class="token comment" spellcheck="true"># 鼠标点击烟花特效</span><span class="token punctuation">|</span>   └── gallery<span class="token punctuation">-</span>encrypt.js          <span class="token comment" spellcheck="true"># 相册加密</span>├── libs         <span class="token comment" spellcheck="true"># 库文件，fancybox效果等插件需在这里打开</span>├── medias       <span class="token comment" spellcheck="true"># 主题内用到的背景图，图标，打赏图等都在这里</span>└── favicon.png            <span class="token comment" spellcheck="true"># 网页标签图</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>js</strong>目录比较重要，所有自定特效，鼠标点击特效，背景特效在这里定义</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客美化-基本配置</title>
      <link href="/2022/03/06/hexo-bo-ke-mei-hua/"/>
      <url>/2022/03/06/hexo-bo-ke-mei-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="主题下载与安装"><a href="#主题下载与安装" class="headerlink" title="主题下载与安装"></a>主题下载与安装</h2><blockquote><p>说明：在之后提到的站点目录即根文件夹，主题目录就是主题文件夹，同理，站点配置文件就是根文件夹的配置文件，如我的：<code>E:\blog\_config.yml</code>，主题配置文件：<code> E:\blog\themes\matery\_config.yml</code></p></blockquote><ol><li>在你的目录文件夹下使用 git clone 命令来下载：直接在站点根目录下执行下面的命令，即可进行主题的下载，主题有两个版本，稳定版本和最新版本(不定期更新优化)，自主选择版本，本文使用的是稳定版。</li></ol><pre class="line-numbers language-yaml"><code class="language-yaml">git clone https<span class="token punctuation">:</span>//gitee.com/yafine66/hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery themes/matery     <span class="token comment" spellcheck="true"># 稳定版</span>git clone <span class="token punctuation">-</span>b develop https<span class="token punctuation">:</span>//gitee.com/yafine66/hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery themes/matery   <span class="token comment" spellcheck="true">#最新版(不定期进行优化更新)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><p>切换主题：</p><p>将站点配置文件中的<code>theme</code>值修改为你下载主题的文件名，此处为<code>matery</code>，即<code>theme: matery</code>。</p><p>还需要修改的一些配置：</p><ul><li>语言选择：如果为中文用户，则在language:后添加值zh-CN，如果不修改，默认为英语；</li><li>网址修改：url:的值为你的网址名，如<a href="http://xxxx.github.io;/">http://xxxx.github.io；</a></li><li>站点配置文件有个per_page属性，建议修改为6的倍数，这样网站在适应设备时，有较好的显示效果。</li></ul></li></ol><h2 id="1-增加功能"><a href="#1-增加功能" class="headerlink" title="1.增加功能"></a>1.增加功能</h2><h3 id="1-1-增加页面"><a href="#1-1-增加页面" class="headerlink" title="1.1 增加页面"></a>1.1 增加页面</h3><blockquote><p>增加页面的步骤都基本相同，创建<code>tags</code>标签页、<code>categories</code>分类页，<code>about</code>关于我页、<code> contact</code>留言板页、<code>friends</code>友情链接页、均可以使用这个步骤</p></blockquote><ol><li>如果在你的博客 source 目录下还没有，就输入以下命令（站点目录打开的命令行）来新建一个：</li></ol><pre class="line-numbers language-yaml"><code class="language-yaml">hexo new page "页面的英文"     <span class="token comment" spellcheck="true"># 如：hexo new page "tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>编辑你刚刚新建的页面文件 /source/tags/index.md，至少需要以下内容：</li></ol><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-06-19 16:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"页面的英文"</span>    <span class="token comment" spellcheck="true"># 如：type: "tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"页面的英文"</span> <span class="token comment" spellcheck="true"># 如：layout: "tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于<code> contact</code>留言板页：<br>留言板功能依赖于第三方评论系统，激活评论系统才有效果，下面会有介绍</p><p>关于<code>friends</code>友情链接页：<br>如果你想增加内容，在你的博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，输入以下内容：</p></blockquote><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token key atrule">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token key atrule">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token key atrule">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token key atrule">"title"</span><span class="token punctuation">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token key atrule">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token key atrule">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token key atrule">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token key atrule">"title"</span><span class="token punctuation">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token key atrule">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token key atrule">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token key atrule">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token key atrule">"title"</span><span class="token punctuation">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-菜单导航配置"><a href="#1-2-菜单导航配置" class="headerlink" title="1.2 菜单导航配置"></a>1.2 菜单导航配置</h3><p><strong>首先声明一下，一定要分清什么是站点配置文件，什么是主题文件，比如我在 F 盘新建我的博客文件夹，名称为 blog，那么站点配置文件的路径为 F:/blog/_config.yml，而你的主题配置文件路径为 F:/blog/themes/matery/_config.yml。</strong></p><blockquote><p>关于导航的配置都在主题配置文件中</p></blockquote><h4 id="1-2-1-配置基本菜单导航的名称、路径url和图标icon"><a href="#1-2-1-配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="1.2.1 配置基本菜单导航的名称、路径url和图标icon"></a>1.2.1 配置基本菜单导航的名称、路径url和图标icon</h4><ul><li>导航名称可以设置成中文/英文</li><li>图标icon可以更换，具体属性值可以在<a href="https://fontawesome.com/icons">fontawesome</a>中查找</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">友人帐</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#可以使用中文，也可以在对应的md中设置title:友人帐</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2-二级菜单配置方法"><a href="#1-2-2-二级菜单配置方法" class="headerlink" title="1.2.2 二级菜单配置方法"></a>1.2.2 二级菜单配置方法</h4><ol><li><p>在需要添加二级菜单的一级菜单下添加children关键字(如:爱好菜单下添加children)，一级菜单不需要增加url属性</p></li><li><p>创建二级页面，步骤与创建页面步骤相同，编辑md时不需要<code>layout</code>属性</p></li></ol><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 追番<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-06-15 15:19:35</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"bangumis"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>给二级菜单增加名称name,路径url和图标icon</p></li><li><p>注意每个二级菜单模块前要加<code> -</code></p></li><li><p>二级菜单要缩进到一级菜单内</p></li></ol><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">爱好</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bicycle    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 追番        <span class="token key atrule">url</span><span class="token punctuation">:</span> /bangumis        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>play<span class="token punctuation">-</span>circle      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 音乐        <span class="token key atrule">url</span><span class="token punctuation">:</span> /musics        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-3修改主题的基本信息"><a href="#1-2-3修改主题的基本信息" class="headerlink" title="1. 2.3修改主题的基本信息"></a>1. 2.3修改主题的基本信息</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#这是根目录下的配置文件信息</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 柠笙   <span class="token comment" spellcheck="true">#这是网站标题</span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span> 柠笙    <span class="token comment" spellcheck="true">#这是网站副标题subtitle</span><span class="token comment" spellcheck="true"># 下面两个description,keywords，需要填上，如果想让搜索引擎收录，这个做SEO优化必不可忽视的两个属性</span><span class="token key atrule">description</span><span class="token punctuation">:</span> 专注于Web<span class="token punctuation">,</span>分享生活<span class="token punctuation">,</span>分享知识  <span class="token comment" spellcheck="true">#网站描述</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>HTML<span class="token punctuation">,</span> CSS<span class="token punctuation">,</span> JavaScript<span class="token punctuation">,</span> JQuery<span class="token punctuation">,</span> React<span class="token punctuation">,</span> Vue.js等<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#网站的关键词</span><span class="token key atrule">author</span><span class="token punctuation">:</span> ly  <span class="token comment" spellcheck="true">#作者，文章版权所显示的</span><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN  <span class="token comment" spellcheck="true">#网站语言，不填写，默认为英文</span><span class="token key atrule">timezone</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#时区，可以不填写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-4-修改主题的-logo-图和-favicon-图标"><a href="#1-2-4-修改主题的-logo-图和-favicon-图标" class="headerlink" title="1.2.4 修改主题的 logo 图和 favicon 图标"></a>1.2.4 修改主题的 logo 图和 favicon 图标</h4><p>打开你的主题配置文件，找到如下的配置，将其更改为你的 logo 和 favicon 路径即可：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 配置网站favicon和网站LOGO</span><span class="token key atrule">favicon</span><span class="token punctuation">:</span> /favicon.png<span class="token key atrule">logo</span><span class="token punctuation">:</span> /favicon.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-2-5-去掉右上角的-github-图标"><a href="#1-2-5-去掉右上角的-github-图标" class="headerlink" title="1.2.5 去掉右上角的 github 图标"></a>1.2.5 去掉右上角的 github 图标</h4><p>打开你的主题配置文件，找到下面的配置:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Whether to display fork me on github icon and link, default true, You can change it to your repo address</span><span class="token comment" spellcheck="true"># 配置是否在 header 中显示 fork me on github 的图标，默认为true，你可以修改为你的仓库地址.</span><span class="token key atrule">githubLink</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/blinkfox/hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery  <span class="token key atrule">title</span><span class="token punctuation">:</span> Fork Me<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 <strong>enable</strong> 的属性值由 <strong>true</strong> 改为 <strong>false</strong> 即可。</p><h4 id="1-2-6-去掉主页的-Github-按钮"><a href="#1-2-6-去掉主页的-Github-按钮" class="headerlink" title="1.2.6 去掉主页的 Github 按钮"></a>1.2.6 去掉主页的 Github 按钮</h4><p>打开主题配置文件，找到下面的配置：</p><pre><code># 首页 banner 中的第二个按钮的配置，包括按钮的显示名称、font awesome图标和按钮的超链接.indexbtn:  enable: true  name: Github  icon: fab fa-github-alt  url: https://github.com/blinkfox/hexo-theme-matery</code></pre><p>将 <strong>enable</strong> 属性值由 <strong>true</strong> 改为 <strong>false</strong> 即可。</p><h4 id="1-2-7-修改社交链接"><a href="#1-2-7-修改社交链接" class="headerlink" title="1.2.7 修改社交链接"></a>1.2.7 修改社交链接</h4><p>主页 banner 图中显示的社交链接与底部的社交链接是同步修改的，打开主题配置文件，将社交链接信息修改为你的信息。修改如下:</p><pre><code># 首页 banner 中的第二行个人信息配置，留空即不启用socialLink:  github:  https://github.com/blinkfox  email: 1181062873@qq.com  facebook: # https://www.facebook.com/xxx  twitter: # https://twitter.com/xxx  qq: 1181062873  weibo: # https://weibo.com/xxx  zhihu: # https://www.zhihu.com/xxx  rss: true # true、false</code></pre><p>如果想添加简书，CSDN，掘金，博客园等等，需要在主题配置文件添加相关配置，如下是我个人的配置：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">socialLink</span><span class="token punctuation">:</span>  <span class="token key atrule">qq</span><span class="token punctuation">:</span> <span class="token number">1035800145</span>  <span class="token key atrule">weixin</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Yafine/Yafine<span class="token punctuation">-</span>imgs/images/wechat.png  <span class="token key atrule">github</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/Yafine  <span class="token key atrule">email</span><span class="token punctuation">:</span> mailto<span class="token punctuation">:</span>1035800145@qq.com  <span class="token key atrule">facebook</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://www.facebook.com/xxx</span>  <span class="token key atrule">twitter</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://twitter.com/xxx</span>  <span class="token key atrule">weibo</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://weibo.com/xxx</span>  <span class="token key atrule">zhihu</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.zhihu.com/people/xuan<span class="token punctuation">-</span>tian<span class="token punctuation">-</span>40<span class="token punctuation">-</span>64/activities  <span class="token key atrule">juejin</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//juejin.im/user/5a902053f265da4e7527ae71/activities  <span class="token key atrule">csdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.csdn.net/victoryxa  <span class="token key atrule">jianshu</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.jianshu.com/u/3b3856869772  <span class="token key atrule">cnblogs</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.cnblogs.com/yafine/  <span class="token key atrule">rss</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># true、false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的 <code>weixin</code> 我是用的图片链接，会跳转到一个新的标签页，之后还需要修改 <code>ejs</code> 文件，文件在主题目录下的 <code>layout</code> 文件夹下的<code>_partial</code> 文件夹，修改 <code>social-link.ejs</code>，添加相关的配置，我个人添加的配置如下：</p><pre><code>javascript&lt;% if (theme.socialLink.jianshu) { %&gt;    &lt;a href="&lt;%= theme.socialLink.jianshu %&gt;" class="tooltipped" target="_blank" data-tooltip="关注我的简书: &lt;%= theme.socialLink.jianshu %&gt;" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-jianshu"&gt;简&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;&lt;% if (theme.socialLink.csdn) { %&gt;    &lt;a href="&lt;%= theme.socialLink.csdn %&gt;" class="tooltipped" target="_blank" data-tooltip="关注我的CSDN: &lt;%= theme.socialLink.csdn %&gt;" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-csdn"&gt;C&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;&lt;% if (theme.socialLink.juejin) { %&gt;    &lt;a href="&lt;%= theme.socialLink.juejin %&gt;" class="tooltipped" target="_blank" data-tooltip="关注我的掘金: &lt;%= theme.socialLink.juejin %&gt;" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-juejin"&gt;掘&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;&lt;% if (theme.socialLink.cnblogs) { %&gt;    &lt;a href="&lt;%= theme.socialLink.cnblogs %&gt;" class="tooltipped" target="_blank" data-tooltip="关注我的博客园: &lt;%= theme.socialLink.cnblogs %&gt;" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-juejin"&gt;博&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;&lt;% if (theme.socialLink.weixin) { %&gt;    &lt;a href="&lt;%= theme.socialLink.weixin %&gt;" class="tooltipped" target="_blank" data-tooltip="微信联系我: &lt;%= theme.socialLink.weixin %&gt;" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-weixin"&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;</code></pre><h4 id="1-2-8-去掉-banner-图的动态滤镜颜色并修改导航栏颜色"><a href="#1-2-8-去掉-banner-图的动态滤镜颜色并修改导航栏颜色" class="headerlink" title="1.2.8 去掉 banner 图的动态滤镜颜色并修改导航栏颜色"></a>1.2.8 去掉 banner 图的动态滤镜颜色并修改导航栏颜色</h4><ol><li>去掉动态滤镜颜色</li></ol><p>打开 <code>themes/matery/source/css/matery.css</code> 文件，查找下面的代码块，然后将其注释即可。如下：</p><pre><code>css.bg-cover:after {    -webkit-animation: rainbow 60s infinite;    animation: rainbow 60s infinite;}</code></pre><p>或者是找到如下代码，将其注释掉即可：</p><pre><code>css/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/@-webkit-keyframes rainbow {   /* 动态切换背景颜色. */}@keyframes rainbow {    /* 动态切换背景颜色. */}</code></pre><p>上面的两段代码是有关联的，将<code>.bg-cover:after</code> 这段代码注释掉，上面的代码就不会起作用了。</p><ol><li>修改导航栏颜色及透明效果</li></ol><p>打开 <code>themes/matery/source/css/matery.css</code> 文件，大约在 250 行，有一个<code>.bg-color</code> 属性，修改其属性值即可，代码如下：</p><pre><code>css.bg-color {    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%); //修改成自己喜欢的颜色值    opacity: 0.8;  //透明效果 值范围 0~1，看情况自己修改}</code></pre><h4 id="1-2-9-修改-banner-图和文章特色图"><a href="#1-2-9-修改-banner-图和文章特色图" class="headerlink" title="1.2.9 修改 banner 图和文章特色图"></a>1.2.9 修改 banner 图和文章特色图</h4><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre><code>javascript$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');</code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><p>如果想改为每小时或者每分钟切换 banner 图的话，需要将 <code>getDay()</code> 改为 <code>getHours()</code> 或者 <code>getMinutes()</code> 即可。</p><p>注意：这个不会自动切换 banner 图，需要刷新页面才可以，更换为每分钟或每小时可能会出现问题，如图片显示不出来，具体的解决办法，自己研究吧😂，可能是图片数量不足，或者是图片命名规范的问题。</p><h4 id="1-2-10-添加首页动态打字效果副标题"><a href="#1-2-10-添加首页动态打字效果副标题" class="headerlink" title="1.2.10 添加首页动态打字效果副标题"></a>1.2.10 添加首页动态打字效果副标题</h4><p>在主题配置文件中，找到下面的配置：</p><pre><code>yml# 网站副标题，打字效果# 如果有符号 ‘ ，请在 ’ 前面加上 \subtitle:   enable: true  loop: true # 是否循环  showCursor: true # 是否显示光标  startDelay: 300 # 开始延迟  typeSpeed: 100 # 打字速度  backSpeed: 50 # 删除速度  sub1: 志之所向，金石为开，谁能御之？  sub2: 花开不是为了花落，而是为了开的更加灿烂。  sub3: 没有伞的孩子必须努力奔跑！  sub4: 欲望以提升热忱，毅力以磨平高山。  sub5: 如果放弃太早，你永远都不知道自己会错过什么。  sub6: 没有礁石，就没有美丽的浪花；没有挫折，就没有壮丽的人生。</code></pre><p><strong>注意：</strong></p><p>网站打字效果副标题默认有两个，即 <code>sub1</code> 和 <code>sub2</code>，如果想写多个，则需要修改两处地方，首先修改配置文件，如上面所示，在 <code>sub1</code> 和 <code>sub2</code> 后面继续添加即可，然后在去主题目录下的 <code>layout</code> 文件夹下的<code>_partial</code> 文件夹，修改 <code>bg-cover-content.ejs</code> 文件，大约在 12 行左右，如下面所示：</p><pre><code>javascript &lt;div class="description center-align"&gt;     &lt;% if (theme.subtitle.enable) { %&gt;         &lt;span id="subtitle"&gt;&lt;/span&gt;         &lt;script src="https://cdn.jsdelivr.net/npm/typed.js@2.0.11"&gt;&lt;/script&gt;        &lt;script&gt;            var typed = new Typed("#subtitle", {                strings: ['&lt;%= theme.subtitle.sub1 %&gt;',                          '&lt;%= theme.subtitle.sub2 %&gt;',                          '&lt;%= theme.subtitle.sub3 %&gt;',                          '&lt;%= theme.subtitle.sub4 %&gt;',                          '&lt;%= theme.subtitle.sub5 %&gt;',                          '&lt;%= theme.subtitle.sub6 %&gt;'],                 startDelay: &lt;%= theme.subtitle.startDelay %&gt;,                 typeSpeed: &lt;%= theme.subtitle.typeSpeed %&gt;,                 loop: &lt;%= theme.subtitle.loop %&gt;,                    backSpeed: &lt;%= theme.subtitle.backSpeed %&gt;,                 showCursor: &lt;%= theme.subtitle.showCursor %&gt;              });          &lt;/script&gt;      &lt;% } else { %&gt;            &lt;%= config.description %&gt;      &lt;% } %&gt;&lt;/div&gt;</code></pre><h4 id="1-2-11-动态标题"><a href="#1-2-11-动态标题" class="headerlink" title="1.2.11 动态标题"></a>1.2.11 动态标题</h4><p>实现方法，引入 js 文件，在主题文件下的 <code>/source/js/</code> 下新建 <code>FunnyTitle.js</code>，然后在添加到 <code>themes/matery/layout/layout.ejs</code> 或者添加到 <code>themes/matery/layout/_partial/head.ejs</code>，其代码如下：</p><pre><code>javascript&lt;!--浏览器搞笑标题--&gt; var OriginTitle = document.title; var titleTime; document.addEventListener('visibilitychange', function () {     if (document.hidden) {         $('[rel="icon"]').attr('href', "https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/favicon.png");         document.title = 'ヽ(●-`Д´-)ノ你要玩捉迷藏嘛';         clearTimeout(titleTime);     }     else {         $('[rel="icon"]').attr('href', "https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/favicon.png");         document.title = 'ヾ(Ő∀Ő3)ノ好哦！' + OriginTitle;         titleTime = setTimeout(function () {             document.title = OriginTitle;         }, 2000);     } });</code></pre><p>或者直接在 <code>themes/matery/layout/layout.ejs</code> 文件中添加如下代码：</p><pre><code>javascript&lt;script type="text/javascript"&gt;    var OriginTitile=document.title,st;    document.addEventListener("visibilitychange",function(){        document.hidden?(document.title="ヽ(●-`Д´-)ノ你要玩捉迷藏嘛",clearTimeout(st)):(document.title="(Ő∀Ő3)ノ好哦！",st=setTimeout(function(){document.title=OriginTitile},3e3))    })&lt;/script&gt;</code></pre><h4 id="1-2-12-修改导航栏颜色以及透明效果"><a href="#1-2-12-修改导航栏颜色以及透明效果" class="headerlink" title="1.2.12 修改导航栏颜色以及透明效果"></a>1.2.12 修改导航栏颜色以及透明效果</h4><p>打开 <code>themes/matery/source/css/matery.css</code> 文件，大约在 250 行，有一个<code>.bg-color</code> 属性，修改其属性值即可，代码如下：</p><pre><code>css.bg-color {    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%); //修改成自己喜欢的颜色值    opacity: 0.8;  //透明效果 值范围 0~1，看情况自己修改}</code></pre><h4 id="1-2-13-修改打赏二维码"><a href="#1-2-13-修改打赏二维码" class="headerlink" title="1.2.13 修改打赏二维码"></a>1.2.13 修改打赏二维码</h4><p>在主题文件的 source/medias/reward 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="1-3-增加番剧、音乐页面"><a href="#1-3-增加番剧、音乐页面" class="headerlink" title="1.3 增加番剧、音乐页面"></a>1.3 增加番剧、音乐页面</h3><blockquote><p>此处可以设置一个二级导航爱好，将这些归纳到一个导航中效果更佳</p></blockquote><h4 id="1-3-1-Bilibili"><a href="#1-3-1-Bilibili" class="headerlink" title="1.3.1 Bilibili"></a>1.3.1 Bilibili</h4><blockquote><p>需要插件来获取你的番剧</p></blockquote><ol><li><p>安装插件</p><pre class="line-numbers language-yaml"><code class="language-yaml">npm install hexo<span class="token punctuation">-</span>bilibili<span class="token punctuation">-</span>bangumi <span class="token punctuation">-</span><span class="token punctuation">-</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装番剧更新插件</p><pre class="line-numbers language-yaml"><code class="language-yaml">npm install hexo<span class="token punctuation">-</span>bilibili<span class="token punctuation">-</span>bangumi <span class="token punctuation">-</span><span class="token punctuation">-</span>update <span class="token punctuation">-</span><span class="token punctuation">-</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置</p><p>将下面的配置写入站点配置文件<code>_config.yml</code>里（非主题）</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">bangumi</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#是否开启</span>  <span class="token key atrule">vmid</span><span class="token punctuation">:</span> <span class="token number">1234567 </span><span class="token comment" spellcheck="true">#输入你番剧的uid，登录网址https://space.bilibili.com/1234567，后面数字就是你的uid</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'追番列表'</span> <span class="token comment" spellcheck="true"># 标题</span>  <span class="token key atrule">quote</span><span class="token punctuation">:</span> <span class="token string">'生命不息，追番不止！'</span> <span class="token comment" spellcheck="true"># 简介</span>  <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token number">1 </span><span class="token comment" spellcheck="true"># 初始显示页面：0: 想看 , 1: 在看 , 2: 看过，默认为 1</span>  <span class="token key atrule">loading</span><span class="token punctuation">:</span> <span class="token string">'/img/bangumi-loading.gif'</span> <span class="token comment" spellcheck="true"># 图片加载完成前的 loading 图片</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建番剧页面</p><p>输入命令</p><pre class="line-numbers language-yaml"><code class="language-yaml">hexo new page bangumis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到<code>source/bangumis/index.md</code>这个文件，修改这个文件，添加 <code>type: "bangumis"</code></p><h2 id="yaml"><a href="#yaml" class="headerlink" title="```yaml"></a>```yaml</h2><p>title: bangumis<br>date: 2020-06-18 00:00:00</p><h2 id="type-“bangumis”"><a href="#type-“bangumis”" class="headerlink" title="type: “bangumis”"></a>type: “bangumis”</h2></li><li><p>配置番剧页面为二级导航栏</p><p>参考上边的二级导航栏配置方式</p></li><li><p>使用</p><p>输入命令，更新番剧数据</p><pre class="line-numbers language-yaml"><code class="language-yaml"> hexo clean &amp;&amp; hexo g &amp;&amp; hexo bangumi <span class="token punctuation">-</span>u &amp;&amp; hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><blockquote><p>更新时遇到的坑：</p><p>错误：配置都完全正确，却出现Get bangumi data error</p><p>原因：你的B站设置了番剧仅自己可见</p><p>解决方法：进入B站个人空间，点击设置，将追番追剧设置为公开</p></blockquote><p>   如果想要删除数据，可以输入该命令</p><pre class="line-numbers language-yaml"><code class="language-yaml">   hexo bangumi <span class="token punctuation">-</span>d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：该插件不需要我们每次部署都要输入更新数据的命令，只有你自己番剧更新时才需要执行更新指令，之前的番剧数据会一直保留，直到被你删除</p></blockquote><h4 id="1-3-2-网易云音乐"><a href="#1-3-2-网易云音乐" class="headerlink" title="1.3.2 网易云音乐"></a>1.3.2 网易云音乐</h4><blockquote><p>这个就非常简单了，不需要安装任何插件，只需要创建新页面，配置二级导航即可</p></blockquote><ol><li><p>创建音乐页面</p></li><li><p>输入命令</p><pre class="line-numbers language-yaml"><code class="language-yaml">hexo new page musics<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>找到<code>source/musics/index.md</code>这个文件，修改这个文件，添加 <code>type: "music"</code>   </p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 音乐！音乐！<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-06-16 14:45:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">'music'</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p> 在index.md文件中增加以下内容</p></li></ol><pre class="line-numbers language-yaml"><code class="language-yaml">  &lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=530 height=520 src="//music.163.com/outchain/player<span class="token punctuation">?</span>type=0<span class="token important">&amp;id</span>=2817562565<span class="token important">&amp;auto</span>=1<span class="token important">&amp;height</span>=430"<span class="token punctuation">></span>&lt;/iframe<span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p> 第二行的id的那串数字，需要改成你想要的歌单id</p><p>查看自己id的方式：</p><ol><li>点击网易云音乐软件，找到想设置的歌单→分享→复制链接</li><li><a href="https://music.163.com/playlist?id=531558923&amp;userid=375531677">https://music.163.com/playlist?id=531558923&amp;userid=375531677</a></li><li>id则是你想要的id，<strong>不是</strong>后面的userid</li></ol></blockquote><ol start="5"><li><p>配置音乐页面为二级导航栏</p><p>参考上边的二级导航栏配置方式</p></li></ol><h3 id="1-4-增加自定义相册"><a href="#1-4-增加自定义相册" class="headerlink" title="1.4 增加自定义相册"></a>1.4 增加自定义相册</h3><blockquote><p>修改的原因：</p><p>matery主题原有的相册效果不佳，原因在于全部采用平铺式，没有分类的功能，自定义相册可以建立文件夹，方便分类</p><p>注意：本教程采用图床+CDN，图床采用的是github+Picgo</p><p>关于图床和cdn是什么：</p><p>通俗来说就是将本地图片上传到网上，通过cdn加速来加快读取图片的一种方式</p><p>具体看<a href="https://yafine-blog.cn/posts/eb3a.html">励心大佬关于github图床搭建的教程</a></p></blockquote><ol><li><p>新建相册页面</p><p>执行以下命令：</p><pre class="line-numbers language-yaml"><code class="language-yaml">   hexo new page galleries<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml"><code class="language-yaml">到站点根目录的source目录下找名称为 *<span class="token important">*galleries</span>** 的目录，打开目录下的 *<span class="token important">*index</span>.md** 文档，添加以下配置：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><pre class="line-numbers language-yaml"><code class="language-yaml">   <span class="token key atrule">title</span><span class="token punctuation">:</span> 相册   <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-06-13 10:59:30</span>   <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"galleries"</span>   <span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"galleries"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>配置导航菜单</p><p>在主题配置文件中menu加上</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">相册</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries     <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>创建ejs文件和css文件</p><p>在路径 <strong>matery/source/css</strong>目录下，新建<code>gallery.css</code>，增加以下代码</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.gallery-wrapper</span></span><span class="token punctuation">{</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.gallery-wrapper</span> <span class="token class">.gallery-box</span></span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.gallery-wrapper</span> <span class="token class">.gallery-item</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">-moz-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.gallery-cover-box</span></span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> center center no-repeat<span class="token punctuation">;</span>  <span class="token property">-webkit-background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.gallery-cover-box</span> <span class="token class">.gallery-cover-img</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>,-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.gallery-item</span> <span class="token class">.gallery-name</span></span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.waterfall</span> </span><span class="token punctuation">{</span>  <span class="token property">column-count</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">column-gap</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.photo-wrapper</span></span><span class="token punctuation">{</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.photo-item</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">-moz-page-break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span>  <span class="token property">-webkit-column-break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span>  <span class="token property">break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">-moz-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.photo-item</span> img </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.photo-item</span> <span class="token class">.photo-name</span></span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#dddddd</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*适配移动端布局*/</span><span class="token atrule"><span class="token rule">@media</span> only screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 601px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector"><span class="token class">.waterfall</span> </span><span class="token punctuation">{</span>    <span class="token property">column-count</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token property">column-gap</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<strong>matery/layout</strong> 目录下创建 <strong>galleries.ejs</strong> ，增加以下代码，并修改代码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/gallery.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;%- partial('_partial/bg-cover') %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(site.data</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">site.data.galleries)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>        &lt;% var galleries = site.data.galleries; %>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gallery-wrapper row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &lt;% for (var i = 0, len = galleries.length; i &lt; len; i++) { %>            &lt;% var gallery = galleries[i]; %>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col s6 m4 l4 xl3 gallery-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./&lt;%- gallery.name %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gallery-item<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gallery-cover-box<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(你的链接&lt;%- gallery.cover%>)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gallery-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">gallery.name</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>修改代码：</p><p>在<strong>你的链接</strong>这填写你相册图床的<strong>根网址</strong>，解释一下什么叫根网址，</p><p>一张图片的目录是<a href="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/123/aaa.jpg">https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/123/aaa.jpg</a></p><p>那么它的根目录就是<a href="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/%EF%BC%8C123/%E5%8F%AA%E6%98%AF%E5%9B%BE%E5%BA%8A%E4%B8%AD%E7%9A%84%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9">https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/，123/只是图床中的一个文件夹</a></p><p>比如我的修改为：url(<a href="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/">https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/</a>&lt;%- gallery.cover%&gt;);”&gt;</p></blockquote><p>仍然在此目录新建<code>gallery.ejs</code>文件，添加以下代码，并修改代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"/css/gallery.css"</span><span class="token operator">></span><span class="token operator">&lt;</span>link type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"/libs/fancybox/jquery.fancybox.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span><span class="token operator">&lt;</span>link type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"/libs/justifiedGallery/justifiedGallery.min.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/post-cover'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token keyword">let</span> galleries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>site<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> site<span class="token punctuation">.</span>data<span class="token punctuation">.</span>galleries<span class="token punctuation">)</span> <span class="token punctuation">{</span>    galleries <span class="token operator">=</span> site<span class="token punctuation">.</span>data<span class="token punctuation">.</span>galleries<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> pageTitle <span class="token operator">=</span> page<span class="token punctuation">.</span>title<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getCurrentGallery</span><span class="token punctuation">(</span>galleries<span class="token punctuation">,</span> pageTitle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> galleries<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>galleries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">==</span> pageTitle<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> galleries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> currentGallery <span class="token operator">=</span> <span class="token function">getCurrentGallery</span><span class="token punctuation">(</span>galleries<span class="token punctuation">,</span> pageTitle<span class="token punctuation">)</span><span class="token keyword">var</span> photos <span class="token operator">=</span> currentGallery<span class="token punctuation">.</span>photos<span class="token punctuation">;</span><span class="token keyword">let</span> imageStr <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> photos<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> photo <span class="token operator">=</span> photos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     imageStr <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;a href=\"你的链接"</span> <span class="token operator">+</span> photo <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token operator">+</span>            <span class="token string">"     class=\"photo-item\" rel=\"example_group\""</span> <span class="token operator">+</span>            <span class="token string">"     data-fancybox=\"images\">"</span> <span class="token operator">+</span>            <span class="token string">"      &lt;img src=\"你的链接"</span> <span class="token operator">+</span> photo <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token operator">+</span>            <span class="token string">"       alt="</span> <span class="token operator">+</span> photo <span class="token operator">+</span> <span class="token string">">\n"</span> <span class="token operator">+</span>            <span class="token string">"    &lt;/a>"</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"photo-wrapper"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>password <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/crypto-js.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>            <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/gallery-encrypt.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>            <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"hbe-security"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hbe-input-container"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hbe-form-control"</span> id<span class="token operator">=</span><span class="token string">"pass"</span>  placeholder<span class="token operator">=</span><span class="token string">"请输入密码查看内容"</span><span class="token operator">/</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn-decrypt"</span> id<span class="token operator">=</span><span class="token string">"btn_decrypt"</span><span class="token operator">></span>解密<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>div  id<span class="token operator">=</span><span class="token string">"mygallery"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waterfall"</span> id<span class="token operator">=</span><span class="token string">"encrypt-blog"</span> style<span class="token operator">=</span><span class="token string">"display:none"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">aes</span><span class="token punctuation">(</span>imageStr<span class="token punctuation">,</span> page<span class="token punctuation">.</span>password<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waterfall"</span> id<span class="token operator">=</span><span class="token string">"encrypt-blog"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> imageStr <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/libs/fancybox/fancybox.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/libs/justifiedGallery/justifiedGallery.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a[rel=example_group]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fancybox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#encrypt-blog"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">justifiedGallery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>margins<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> rowHeight<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>修改代码：</p><p>在<strong>你的链接</strong>这填写你相册图床的<strong>根网址</strong></p><p>注意：最后一定要带上 /</p></blockquote></li><li><p>添加相册json配置文件</p><p>在根目录<code>source\_data</code>新建 <strong>galleries.json</strong> 的文件，增加<strong>json</strong> 代码如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"相册名字"</span><span class="token punctuation">,</span>    <span class="token string">"cover"</span><span class="token punctuation">:</span> <span class="token string">"images/p0.png"</span><span class="token punctuation">,</span>      <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"相册的描述"</span><span class="token punctuation">,</span>      <span class="token string">"photos"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"images/node-1.png"</span><span class="token punctuation">,</span>        <span class="token string">"images/node-2.png"</span><span class="token punctuation">,</span>        <span class="token string">"images/node-3.png"</span><span class="token punctuation">,</span>        <span class="token string">"images/node-4.png"</span><span class="token punctuation">,</span>        <span class="token string">"images/node-5.png"</span><span class="token punctuation">,</span>        <span class="token string">"images/node-6.png"</span><span class="token punctuation">,</span>        <span class="token string">"images/node-7.png"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>属性介绍：</p><p>cover：相册的封面，值为图片的地址</p><p>photos：图片的地址，输入了地址界面才会显示该图片，前提是图床中有该图片</p></blockquote></li><li><p>新建相册</p><p>在galleries目录下建立对应的相册名称目录和文件，比如我这个相册需要新建名称为 2020 文件夹，然后在文件夹中新建index.md文件，文件内容为：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">2020</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-02-19 10:51:50</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"gallery"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"gallery"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看效果</p><p>重新部署</p><pre class="line-numbers language-yaml"><code class="language-yaml">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="1-5-增加emoji支持"><a href="#1-5-增加emoji支持" class="headerlink" title="1.5 增加emoji支持"></a>1.5 增加emoji支持</h3><p>😄</p><p>使你markdown博客里的emoji表情跳动起来</p><ol><li><p>安装插件</p><pre class="line-numbers language-yaml"><code class="language-yaml">npm install hexo<span class="token punctuation">-</span>filter<span class="token punctuation">-</span>github<span class="token punctuation">-</span>emojis <span class="token punctuation">-</span><span class="token punctuation">-</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  <span class="token key atrule">customEmojis</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新部署即可查看</p></li></ol><blockquote><p>小坑：在配置支持前发布的文章中的表情并没有获得支持，并且连表情都不会显示，所以最好在配置之后再输入表情进行测试</p></blockquote><h3 id="1-6代码高亮"><a href="#1-6代码高亮" class="headerlink" title="1.6代码高亮"></a>1.6代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，用一个插件来替换它</p><ol><li><p>安装插件</p><pre class="line-numbers language-yaml"><code class="language-yaml">npm i <span class="token punctuation">-</span>S hexo<span class="token punctuation">-</span>prism<span class="token punctuation">-</span>plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改 Hexo 站点配置文件 _config.yml 中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  <span class="token key atrule">custom_css</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="1-7-搜索功能"><a href="#1-7-搜索功能" class="headerlink" title="1.7 搜索功能"></a>1.7 搜索功能</h3><p>实现文章内容搜索</p><ol><li><p>安装插件</p><pre class="line-numbers language-yaml"><code class="language-yaml">npm install hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>search <span class="token punctuation">-</span><span class="token punctuation">-</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在 Hexo 站点配置文件 _config.yml 中，新增以下的配置项：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="1-8-中文链接转拼音"><a href="#1-8-中文链接转拼音" class="headerlink" title="1.8 中文链接转拼音"></a>1.8 中文链接转拼音</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的文章链接也会有中文，这样不利于 SEO，且 gitment 评论对中文链接也不支持。我们可以用 hexo-permalink-pinyin Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><ol><li><p>安装插件</p><pre class="line-numbers language-yaml"><code class="language-yaml">npm i hexo<span class="token punctuation">-</span>permalink<span class="token punctuation">-</span>pinyin <span class="token punctuation">-</span><span class="token punctuation">-</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在 Hexo 站点配置文件 _config.yml 中，新增以下的配置项：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="1-9-文章字数统计插件"><a href="#1-9-文章字数统计插件" class="headerlink" title="1.9 文章字数统计插件"></a>1.9 文章字数统计插件</h3><p>用于在文章中显示文章字数、阅读时长信息</p><ol><li><p>安装插件</p><pre class="line-numbers language-yaml"><code class="language-yaml">npm i <span class="token punctuation">-</span><span class="token punctuation">-</span>save hexo<span class="token punctuation">-</span>wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在<strong>主题</strong>配置文件_config.yml 文件中，<strong>激活</strong>以下配置项即可：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 将这个值设置为 true 即可.</span>  <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="1-10-配置音乐播放器"><a href="#1-10-配置音乐播放器" class="headerlink" title="1.10 配置音乐播放器"></a>1.10 配置音乐播放器</h3><p>想支持音乐播放，在<strong>主题</strong>的 _config.yml 配置文件中激活music配置即可：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 是否在首页显示音乐.</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">autoHide</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># hide automaticaly</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment" spellcheck="true">#require    music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment" spellcheck="true">#require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">411680085     </span><span class="token comment" spellcheck="true">#require    song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">true       </span><span class="token comment" spellcheck="true"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false   </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7       </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">false  </span><span class="token comment" spellcheck="true"># 列表默认折叠</span>  <span class="token key atrule">hideLrc</span><span class="token punctuation">:</span> <span class="token boolean important">true     </span><span class="token comment" spellcheck="true"># 隐藏歌词</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>属性介绍：</p><p>server可选netease（网易云音乐），tencent（QQ音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐）</p><p>type可选song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）</p><p>id获取示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，playlist的id即为这串数字。</p></blockquote><blockquote><p>小坑：matery主题不支持ajax异步机制，在切换页面时音乐也会切换，不会继续一首歌播放所以这个功能比较鸡肋，在于自己取舍</p></blockquote><h3 id="1-11-关于我页面添加个人简历"><a href="#1-11-关于我页面添加个人简历" class="headerlink" title="1.11 关于我页面添加个人简历"></a>1.11 关于我页面添加个人简历</h3><p>打开theme/matery/layout/about.ejs文件，大约在13行。有一个<code>card</code>标签，找出其对应结尾的标签，大约在61行左右，然后在下面新增如下代码</p><pre class="line-numbers language-ejs"><code class="language-ejs"><div class="card">     <div class="card-content">         <div class="card-content article-card-content">             <div class="title center-align" data-aos="zoom-in-up">                 <i class="fa fa-address-book"></i>&nbsp;&nbsp;<%- __('个人简历') %>              </div>                 <div id="articleContent" data-aos="fade-up">                     <%- page.content %>                 </div>           </div>      </div></div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意粘贴的位置和空格要正确，这里的位置随你自己设置，你也可以把简历作为第一个card，然后/source/about/index.md下面写上你的简历了（就像写博客一样）。</p><h3 id="1-12-配置404错误页面"><a href="#1-12-配置404错误页面" class="headerlink" title="1.12 配置404错误页面"></a>1.12 配置404错误页面</h3><p>站点根目录下的source文件夹下新建404.md文件，里面内容如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-6-18 16:41:10</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面了"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在主题文件夹的layout目录下新建404.ejs文件，添加内容如下：</p><pre class="line-numbers language-ejs"><code class="language-ejs"><style type="text/css">    /* don't remove. */    .about-cover {        height: 90.2vh;    }</style><div class="bg-cover pd-header about-cover">    <div class="container">        <div class="row">            <div class="col s10 offset-s1 m8 offset-m2 l8 offset-l2">                <div class="brand">                    <div class="title center-align">                        404                    </div>                    <div class="description center-align">                        <%= page.description %>                    </div>                </div>            </div>        </div>    </div></div><script>    // 每天切换 banner 图.  Switch banner image every day.    $('.bg-cover').css('background-image', 'url(https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.1/source/medias/banner/' + new Date().getDay() + '.jpg)');</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后部署，再看看效果即可<a href="http://localhost:4000/404/">http://localhost:4000/404/</a></p><h3 id="1-13-添加Valine评论系统"><a href="#1-13-添加Valine评论系统" class="headerlink" title="1.13 添加Valine评论系统"></a>1.13 添加Valine评论系统</h3><p>编辑主题目录下的配置文件<code>MyBlog/themes/matery/_config.yml</code>，找到如下内容并修改</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.</span><span class="token key atrule">valine</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">appId</span><span class="token punctuation">:</span> Ucrxxxxxxxxxxxxxxxx<span class="token punctuation">-</span>xxxxsz  <span class="token comment" spellcheck="true"># 自行注册valine获取</span>  <span class="token key atrule">appKey</span><span class="token punctuation">:</span> zPsLxxxxxxxxxxxxxxerLmd    <span class="token comment" spellcheck="true"># 自行注册valine获取</span>  <span class="token key atrule">notify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">verify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">visitor</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> <span class="token string">'monsterid'</span> <span class="token comment" spellcheck="true"># Gravatar style : mm/identicon/monsterid/wavatar/retro/hide</span>  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> <span class="token string">'留下你的足迹..'</span> <span class="token comment" spellcheck="true"># Comment Box placeholder</span>  <span class="token key atrule">background</span><span class="token punctuation">:</span> /medias/comment_bg.png  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">enableQQ</span><span class="token punctuation">:</span> <span class="token number">16463223  </span><span class="token comment" spellcheck="true"># 改为自己的QQ号</span>  <span class="token key atrule">recordIP</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">requiredFields</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> nick    <span class="token punctuation">-</span> mail  <span class="token key atrule">guest_info</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> nick    <span class="token punctuation">-</span> mail    <span class="token punctuation">-</span> link  <span class="token key atrule">master</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> 46606772953bed0812789d6dc955614e  <span class="token comment" spellcheck="true"># md5加密后的博主邮箱</span>  <span class="token key atrule">metaPlaceholder</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 输入框的背景文字</span>    <span class="token key atrule">nick</span><span class="token punctuation">:</span> 昵称/QQ号(必填)    <span class="token key atrule">mail</span><span class="token punctuation">:</span> 邮箱(必填)    <span class="token key atrule">link</span><span class="token punctuation">:</span> 网址(https<span class="token punctuation">:</span>//)  <span class="token key atrule">lang</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN  <span class="token key atrule">tagMeta</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># The String Array of Words to show Flag.[Just Only xCss Style mode]</span>    <span class="token punctuation">-</span> 博主    <span class="token punctuation">-</span> 小伙伴    <span class="token punctuation">-</span> 访客  <span class="token key atrule">friends</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># The MD5 String Array of friends Email to show friends Flag.[Just Only xCss Style mode]</span>    <span class="token punctuation">-</span> cb3e577ff029d6073400d5557effd41f       <span class="token punctuation">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-14-修改公告-dream一栏-里的每日一句"><a href="#1-14-修改公告-dream一栏-里的每日一句" class="headerlink" title="1.14 修改公告(dream一栏)里的每日一句"></a>1.14 修改公告(dream一栏)里的每日一句</h3><p>找到<code>/themes/matery/layout/index.ejs</code>，第17行改为：</p><pre class="line-numbers language-yaml"><code class="language-yaml">&lt;% if (theme.dream.enable) <span class="token punctuation">{</span> %<span class="token punctuation">></span>  &lt;<span class="token tag">!--</span> &lt;%<span class="token punctuation">-</span> partial('_widget/dream') %<span class="token punctuation">></span> <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span class="token scalar string">  &lt;i class="fa fa-volume-up fa-lg fa-fw text-color">&lt;/i> &lt;%- '&lt;span id="hitokoto">一言API请求超时。请稍后重试。&lt;/span> （来源：一言API）' %></span>&lt;% <span class="token punctuation">}</span> %<span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时在<code>/themes/matery/layout/_partial/head.ejs</code>增加代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://v1.hitokoto.cn/?c=d&amp;encode=js&amp;select=%23hitokoto"</span> defer<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-15-添加动态诗词"><a href="#1-15-添加动态诗词" class="headerlink" title="1.15 添加动态诗词"></a>1.15 添加动态诗词</h3><p>采用的是<a href="https://www.jinrishici.com/">今日诗词</a>，每次返回一句诗词，根据时间、地点、天气、事件智能推荐。官网有 <a href="https://www.jinrishici.com/doc/">API 文档</a>，可以去看一下，有多种安装方式，最简单的方式就是从官网获取代码，在 <code>/themes/matery/layout/_partial/head.ejs</code> 添加下面的一行代码：</p><pre><code>javascript&lt;script src="https://sdk.jinrishici.com/v2/browser/jinrishici.js" charset="utf-8"&gt;&lt;/script&gt;</code></pre><p>然后再将 <code>/themes/matery/layout/_partial/bg-cover-content.ejs</code> 中的 <code>&lt;%= config.description %&gt;</code> 修改为 <code>&lt;%- '&lt;span id="jinrishici-sentence"&gt;正在加载今日诗词....&lt;/span&gt;' %&gt;</code>，这个使用前提是将主题配置文件的 <code>subtitle</code> 的值改为 <code>false</code>。</p><h3 id="1-16-鼠标点击文字特效"><a href="#1-16-鼠标点击文字特效" class="headerlink" title="1.16 鼠标点击文字特效"></a>1.16 鼠标点击文字特效</h3><p>实现方法，引入 js 文件，在主题文件下的 <code>/source/js/</code> 下新建 <code>click_show_text.js</code>，其代码如下：</p><pre><code>javascript复制成功var a_idx = 0;jQuery(document).ready(function ($) {    $("body").click(function (e) {        var a = new Array("富强", "民主", "文明", "和谐", "自由", "平等", "公正", "法治", "爱国", "敬业", "诚信", "友善");        var $i = $("&lt;span/&gt;").text(a[a_idx]);        a_idx = (a_idx + 1) % a.length;        var x = e.pageX,            y = e.pageY;        $i.css({            "z-index": 5,            "top": y - 20,            "left": x,            "position": "absolute",            "font-weight": "bold",            "color": "#FF0000"        });        $("body").append($i);        $i.animate({                "top": y - 180,                "opacity": 0            },            3000,            function () {                $i.remove();            });    });    setTimeout('delay()', 2000);});function delay() {    $(".buryit").removeAttr("onclick");}</code></pre><p>或者使用我的 cdn 链接，理论上一直有效 <strong><a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/click_show_text.js">https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/click_show_text.js</a></strong>，然后在添加到 <code>themes/matery/layout/layout.ejs</code>。</p><h3 id="1-17-鼠标点击礼花特效"><a href="#1-17-鼠标点击礼花特效" class="headerlink" title="1.17 鼠标点击礼花特效"></a>1.17 鼠标点击礼花特效</h3><p>文件地址：<a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.1.3/source/js/lihua.js">传送门</a></p><p>在 <strong>matery/source/js/</strong> 目录下新建 <strong>lihua.js</strong>，然后打开上面的传送门网址，将代码复制粘贴进 js 文件里，然后在 <strong>layout.ejs</strong> 文件里引用，最后本地运行查看效果即可。</p><h3 id="1-18-自定义鼠标样式"><a href="#1-18-自定义鼠标样式" class="headerlink" title="1.18 自定义鼠标样式"></a>1.18 自定义鼠标样式</h3><p>建议大家下载鼠标指针样式的格式为 ico 格式，大小为 16<em>16，或者 24</em>24 的。</p><p>首先将鼠标样式下载到本地，推荐大家一个网站，可以免费下载，不过需要登录一下：网址为：<a href="https://www.easyicon.net/">https://www.easyicon.net/</a></p><p>以我的为例，我将鼠标指针样式放在了主题文件夹下的 medias 目录下，然后打开主题文件夹下的 <strong>my.css</strong> 文件，添加内容如下：</p><pre><code>css*{    cursor: url("/medias/cursor1.ico"),auto!important;}:active{    cursor: url("/medias/cursor2.ico"),auto!important;}</code></pre><p>然后在本地运行查看效果即可</p><h3 id="1-19-添加鼠标彩虹星星掉落跟随效果"><a href="#1-19-添加鼠标彩虹星星掉落跟随效果" class="headerlink" title="1.19 添加鼠标彩虹星星掉落跟随效果"></a>1.19 添加鼠标彩虹星星掉落跟随效果</h3><p>在 <code>themes/matery/source/js</code> 目录下新建 <code>cursor.js</code> 文件，打开这个网址<a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/cursor.js">传送门</a>，将内容复制粘贴到 cursor.js 即可。</p><p>然后再 <code>themes/matery/layout/layout.ejs</code> 文件内添加下面的内容：</p><pre><code>javascript&lt;script src="/js/cursor.js"&gt;&lt;/script&gt;</code></pre><h3 id="1-20-在-Hexo-博客中创建自定义页面"><a href="#1-20-在-Hexo-博客中创建自定义页面" class="headerlink" title="1.20 在 Hexo 博客中创建自定义页面"></a>1.20 在 Hexo 博客中创建自定义页面</h3><p>使用<code>hexo</code>创建的静态博客，所有博文内容都是有<code>markdown</code>生成，且页面样式也是由下载的主题自动化生成的，那么想要在独立页面中大展身手的前端小伙伴，如何将写好的静态页面引入到<code>hexo</code>博客中呢？<code>html</code>，<code>css</code>，<code>js</code>等文件在<code>hexo</code>项目里如何避免被自动渲染呢？</p><p>打开hexo项目根目录下的配置文件<code>_config.yml</code>，找到<code>skip_render:</code>，在这里就可以配置需要跳过渲染的文件。</p><p>例如，我们把所有静态页面放到<code>source</code>文件夹下的<code>demo</code>文件夹中，只要配置</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> demo/**<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以使<code>demo</code>下的所有文件（包括子文件）避免被编译。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> demo/*             <span class="token comment" spellcheck="true"># 屏蔽demo文件夹下的文件，不包括子文件夹内的内容</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> demo/**            <span class="token comment" spellcheck="true"># 屏蔽demo文件夹下的所有文件，包括子文件夹内的内容</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> demo/index.html    <span class="token comment" spellcheck="true"># 屏蔽demo文件夹下的index.html，特指一个文件</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> demo/*.html        <span class="token comment" spellcheck="true"># 屏蔽demo文件夹下的所有html文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>写多个筛选条件时</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">skip_render</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> space/**    <span class="token punctuation">-</span> demo/*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>随后即可 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</p><h2 id="2-博客优化"><a href="#2-博客优化" class="headerlink" title="2. 博客优化"></a>2. 博客优化</h2><h3 id="2-1-gulp代码压缩"><a href="#2-1-gulp代码压缩" class="headerlink" title="2.1 gulp代码压缩"></a>2.1 gulp代码压缩</h3><blockquote><p>hexo生成的html、css、js等都有很多的空格或者换行，而空格和换行也是占用字节的，所以需要将空格换行去掉也就是我要进行的“压缩”，减小一点资源文件的大小也是对访问速度有那么一点提升的。</p></blockquote><ol><li><p>在站点目录执行以下命令，安装插件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 全局安装gulp模块</span>npm install gulp <span class="token punctuation">-</span>g<span class="token comment" spellcheck="true"># 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行</span>npm install gulp gulp<span class="token punctuation">-</span>htmlclean gulp<span class="token punctuation">-</span>htmlmin gulp<span class="token punctuation">-</span>minify<span class="token punctuation">-</span>css gulp<span class="token punctuation">-</span>uglify gulp<span class="token punctuation">-</span>imagemin <span class="token punctuation">-</span><span class="token punctuation">-</span>save<span class="token comment" spellcheck="true"># 额外的功能模块</span>npm install gulp<span class="token punctuation">-</span>debug gulp<span class="token punctuation">-</span>clean<span class="token punctuation">-</span>css gulp<span class="token punctuation">-</span>changed gulp<span class="token punctuation">-</span>if gulp<span class="token punctuation">-</span>plumber gulp<span class="token punctuation">-</span>babel babel<span class="token punctuation">-</span>preset<span class="token punctuation">-</span>es2015 del @babel/core <span class="token punctuation">-</span><span class="token punctuation">-</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在Hexo根目录新建文件 gulpfile.js，并复制以下内容到文件中，有中文注释，可以根据自己需求修改。（注意：文件名不能错，一定为gulpfile.js，否则会出错！）</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> debug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cleancss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-clean-css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//css压缩组件</span><span class="token keyword">var</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-uglify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//js压缩组件</span><span class="token keyword">var</span> htmlmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlmin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//html压缩组件</span><span class="token keyword">var</span> htmlclean <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlclean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//html清理组件</span><span class="token keyword">var</span> imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-imagemin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//图片压缩组件</span><span class="token keyword">var</span> changed <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-changed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件更改校验组件</span><span class="token keyword">var</span> gulpif <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-if"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//任务 帮助调用组件</span><span class="token keyword">var</span> plumber <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-plumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//容错组件（发生错误不跳出任务，并报出错误内容）</span><span class="token keyword">var</span> isScriptAll <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span><span class="token keyword">var</span> isDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否调试显示 编译通过的文件</span><span class="token keyword">var</span> gulpBabel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-babel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> es2015Preset <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"babel-preset-es2015"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Hexo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"hexo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> hexo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hexo</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化一个hexo对象</span><span class="token comment" spellcheck="true">// 清除public文件夹</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"clean"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"public/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span><span class="token comment" spellcheck="true">// 创建静态页面 （等同 hexo generate）</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"generate"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hexo            <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"generate"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                watch<span class="token punctuation">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动Hexo服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> hexo        <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 部署到服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hexo            <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                watch<span class="token punctuation">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩public目录下的js文件</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressJs"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./public/**/*.js"</span><span class="token punctuation">,</span> <span class="token string">"!./public/libs/**"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>排除的js        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress JS:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>            <span class="token function">gulpBabel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>es2015Preset<span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">/</span> es5检查机制            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span><span class="token function">调用压缩组件方法uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>对合并的文件进行压缩        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>输出到目标目录<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span> 压缩<span class="token keyword">public</span>目录下的css文件gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressCss"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>        rebase<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token operator">/</span><span class="token operator">/</span>advanced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>类型：Boolean 默认：<span class="token boolean">true</span> <span class="token punctuation">[</span>是否开启高级优化（合并选择器等）<span class="token punctuation">]</span>        compatibility<span class="token punctuation">:</span> <span class="token string">"ie7"</span> <span class="token operator">/</span><span class="token operator">/</span>保留ie7及以下兼容写法 类型：String 默认：<span class="token string">''</span>or<span class="token string">'*'</span> <span class="token punctuation">[</span>启用兼容模式； <span class="token string">'ie7'</span>：IE7兼容模式，<span class="token string">'ie8'</span>：IE8兼容模式，<span class="token string">'*'</span>：IE9<span class="token operator">+</span>兼容模式<span class="token punctuation">]</span>        <span class="token operator">/</span><span class="token operator">/</span>keepBreaks<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>类型：Boolean 默认：<span class="token boolean">false</span> <span class="token punctuation">[</span>是否保留换行<span class="token punctuation">]</span>        <span class="token operator">/</span><span class="token operator">/</span>keepSpecialComments<span class="token punctuation">:</span> <span class="token string">'*'</span> <span class="token operator">/</span><span class="token operator">/</span>保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./public/**/*.css"</span><span class="token punctuation">,</span> <span class="token string">"!./public/**/*.min.css"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//排除的css</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress CSS:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cleancss</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩public目录下的html文件</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressHtml"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> cleanOptions <span class="token operator">=</span> <span class="token punctuation">{</span>        protect<span class="token punctuation">:</span> <span class="token regex">/&lt;\!--%fooTemplate\b.*?%-->/g</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//忽略处理</span>        unprotect<span class="token punctuation">:</span> <span class="token operator">/</span><span class="token operator">&lt;</span>script <span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">*</span>\btype<span class="token operator">=</span><span class="token string">"text\/x-handlebars-template"</span><span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">?</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">/</span>gi <span class="token comment" spellcheck="true">//特殊处理</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> minOption <span class="token operator">=</span> <span class="token punctuation">{</span>        collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩HTML</span>        collapseBooleanAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//省略布尔属性的值 &lt;input checked="true"/> ==> &lt;input /></span>        removeEmptyAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除所有空格作属性值 &lt;input id="" /> ==> &lt;input /></span>        removeScriptTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除&lt;script>的type="text/javascript"</span>        removeStyleLinkTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除&lt;style>和&lt;link>的type="text/css"</span>        removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//清除HTML注释</span>        minifyJS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩页面JS</span>        minifyCSS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩页面CSS</span>        minifyURLs<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//替换页面URL</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">"./public/**/*.html"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress HTML:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlclean</span><span class="token punctuation">(</span>cleanOptions<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlmin</span><span class="token punctuation">(</span>minOption<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩 public/medias 目录内图片</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressImage"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>        optimizationLevel<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Number 默认：3 取值范围：0-7（优化等级）</span>        progressive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 无损压缩jpg图片</span>        interlaced<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span>        multipass<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 多次优化svg直到完全优化</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">"./public/medias/**/*.*"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public/medias"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress Images:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">imagemin</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行顺序： 清除public目录 -> 产生原始博客内容 -> 执行压缩混淆 -> 部署到服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span>    <span class="token string">"build"</span><span class="token punctuation">,</span>    gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>        <span class="token string">"clean"</span><span class="token punctuation">,</span>        <span class="token string">"generate"</span><span class="token punctuation">,</span>        <span class="token string">"compressHtml"</span><span class="token punctuation">,</span>        <span class="token string">"compressCss"</span><span class="token punctuation">,</span>        <span class="token string">"compressJs"</span><span class="token punctuation">,</span>        gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认任务</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span>    <span class="token string">"default"</span><span class="token punctuation">,</span>    gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>        <span class="token string">"clean"</span><span class="token punctuation">,</span>        <span class="token string">"generate"</span><span class="token punctuation">,</span>        gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">"compressHtml"</span><span class="token punctuation">,</span> <span class="token string">"compressCss"</span><span class="token punctuation">,</span> <span class="token string">"compressJs"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：这里我去掉了图片的压缩，如果想要加上可以在第154行加上 “compressImage”, 和第165行的加上”compressImage” 即可</p></blockquote></li><li><p>使用（两种方式）：</p><ul><li>直接在Hexo根目录执行 gulp，这个命令相当于 hexo cl&amp;&amp;hexo g 并且再把代码压缩，再hexo s进行部署即可</li><li>在Hexo根目录执行 gulp build ，这个命令与第1种相比是：在最后又加了个 hexo d ，等于说生成、压缩文件后又帮你自动部署了</li></ul></li></ol><h3 id="2-2-CDN加速"><a href="#2-2-CDN加速" class="headerlink" title="2.2 CDN加速"></a>2.2 CDN加速</h3><blockquote><p>关于CDN是什么？参考<a href="https://yafine-blog.cn/posts/ee35.html">励心大佬</a></p><p>由于我们将博客部署到了国外的Github上，国内访问速度很慢，我们可以使用这个技术来实现全站加速</p></blockquote><p>在理解了CDN的含义和该如何使用CDN的前提下，matery主题有一个很人性化的操作，不需要我们将每个资源都逐个设置，在主题配置文件_config.yml中搜索<code>jsDelivr</code>，填写url为自己的博客仓库即可，如我的：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">jsDelivr</span><span class="token punctuation">:</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/fenghen0918/fenghen0918.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时重新<code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</code>部署你的项目体验效果，网站的加载速度会快很多（先看小苏经历的坑）。</p><blockquote><p>关于CDN加速的坑：</p><ol><li>配置了此项，就代表着hexo s本地调试的时候，网站依然会去GitHub请求资源（原来的资源），所以本地调试的时候记得将 此项配置 注释或者删除掉；</li><li>在hexo s本地调试好之后，需要hexo d部署到网上，要先配置到<code>url</code>，之后再<code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</code>进行部署，否则不生效；</li><li>使用了matery提供的全局CDN加速，有可能你的樱花散落，鼠标图标等一些特效消失，具体原因还不清楚，不过加速效果才是小苏想要的，就舍弃掉了这些特效。</li></ol></blockquote><h3 id="2-3-打造图床"><a href="#2-3-打造图床" class="headerlink" title="2.3 打造图床"></a>2.3 打造图床</h3><blockquote><p>图床的选择有免费和收费，在这里推荐一种免费搭建图床的方式：</p><p>PicGo+Github：<a href="https://yafine-blog.cn/posts/eb3a.html">https://yafine-blog.cn/posts/eb3a.html</a></p><p>有了图床，我们可以实现自定义相册、markdown基于图床上传图片的功能，很强大</p></blockquote><h3 id="2-4-部署到Coding"><a href="#2-4-部署到Coding" class="headerlink" title="2.4 部署到Coding"></a>2.4 部署到Coding</h3><blockquote><p>在上面的教程我们可以将博客部署到国外Github的仓库上，我们也可以将博客部署到国内Coding、Gitee仓库上，可以提高一些网站访问的速度，小苏只使用了Coding，这里也介绍一下。</p></blockquote><ul><li><a href="https://fenghen0918.github.io/2020/06/20/hexo-bo-ke-bu-shu-dao-coding/">https://fenghen0918.github.io/2020/06/20/hexo-bo-ke-bu-shu-dao-coding/</a></li></ul><h3 id="2-5-新建文章自动打开本地Markdown编辑器"><a href="#2-5-新建文章自动打开本地Markdown编辑器" class="headerlink" title="2.5 新建文章自动打开本地Markdown编辑器"></a>2.5 新建文章自动打开本地Markdown编辑器</h3><blockquote><p>写新文章时，需要控制台执行hexo new “文章名字”生成一篇新文章，但需要手动打开，挺麻烦，我们可以设置在生成之后自动打开</p></blockquote><p>在站点根目录下新建scripts目录，然后在新建<code>auto_open.js</code>，在文件填入一下内容：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Hexo 2.x 用户复制这段</span><span class="token comment" spellcheck="true">//hexo.on('new', function(path){</span>  <span class="token comment" spellcheck="true">//spawn('start  "markdown编辑器绝对路径.exe" ' + path);</span><span class="token comment" spellcheck="true">//});</span><span class="token comment" spellcheck="true">// Hexo 3 用户复制这段</span>hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'start  "D:\Program Files\Typora\Typora.exe" '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其中”D:\Program Files\Typora\Typora.exe”是我本地编辑器的路径，只需要改为你本地编辑器的路径即可，然后在执行<code>hexo cl &amp;&amp; hexo g -d</code>，部署到GitHub即可，以后在发布文章就会自动打开编辑器。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
